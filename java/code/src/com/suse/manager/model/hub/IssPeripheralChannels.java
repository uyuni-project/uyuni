/*
 * Copyright (c) 2024 SUSE LLC
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 */
package com.suse.manager.model.hub;

import com.redhat.rhn.domain.BaseDomainHelper;
import com.redhat.rhn.domain.channel.Channel;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name = "suseISSPeripheralChannels")
public class IssPeripheralChannels extends BaseDomainHelper {
    private Long id;
    private IssPeripheral peripheral;
    private Integer peripheralOrgId;
    private Channel channel;

    protected IssPeripheralChannels() {
        // Default empty Constructor for Hibernate
    }

    /**
     * Constructor
     * @param peripheralIn the Peripheral Server
     * @param channelIn the channel to be synchronized
     */
    public IssPeripheralChannels(IssPeripheral peripheralIn, Channel channelIn) {
        peripheral = peripheralIn;
        channel = channelIn;
        peripheralOrgId = null;
    }

    /**
     * Constructor
     * @param peripheralIn the Peripheral Server
     * @param channelIn the channel to be synchronized
     * @param peripheralOrgIdIn the custom peripheral org id the channel should be assigned to
     */
    public IssPeripheralChannels(IssPeripheral peripheralIn, Channel channelIn, int peripheralOrgIdIn) {
        peripheral = peripheralIn;
        channel = channelIn;
        peripheralOrgId = peripheralOrgIdIn;
    }

    /**
     * @return return the ID
     */
    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    public Long getId() {
        return id;
    }

    /**
     * Get the Peripheral Server.
     * @return the peripheral server
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "peripheral_id")
    public IssPeripheral getPeripheral() {
        return peripheral;
    }

    /**
     * Get the Channel
     * @return return the Channel
     */
    @ManyToOne
    @JoinColumn(name = "channel_id")
    public Channel getChannel() {
        return channel;
    }

    /**
     * Get the peripheral organization id where this channel should be assigned to.
     * Vendor Channels will have NULL here
     * @return the peripherla organization id or NULL
     */
    @Column(name = "peripheral_org_id")
    public Integer getPeripheralOrgId() {
        return peripheralOrgId;
    }

    /*
     * will be autogenerated
     */
    protected void setId(Long idIn) {
        id = idIn;
    }

    /**
     * @param peripheralIn the peripheral server
     */
    public void setPeripheral(IssPeripheral peripheralIn) {
        peripheral = peripheralIn;
    }

    /**
     * @param channelIn the channel
     */
    public void setChannel(Channel channelIn) {
        channel = channelIn;
    }

    /**
     * @param peripheralOrgIdIn the peripheral organization id
     */
    public void setPeripheralOrgId(Integer peripheralOrgIdIn) {
        peripheralOrgId = peripheralOrgIdIn;
    }

    @Override
    public boolean equals(Object oIn) {
        if (this == oIn) {
            return true;
        }
        if (!(oIn instanceof IssPeripheralChannels that)) {
            return false;
        }
        return Objects.equals(getPeripheral(), that.getPeripheral()) &&
                Objects.equals(getPeripheralOrgId(), that.getPeripheralOrgId()) &&
                Objects.equals(getChannel(), that.getChannel());
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder()
                .append(getPeripheral())
                .append(getPeripheralOrgId())
                .append(getChannel()).toHashCode();
    }

    @Override
    public String toString() {
        return "IssPeripheralChannel{" +
                "id=" + id +
                ", peripheral='" + getPeripheral() + '\'' +
                ", channel='" + getChannel() + '\'' +
                '}';
    }
}
