<datasource_modes>

<mode name="scouts_for_org">
  <query params="org_id">
SELECT SC.recid AS ID,
       SC.customer_id,
       SC.description,
       SC.public_key,
       SC.vip,
       SC.pem_public_key,
       SC.pem_public_key_hash,
       SN.recid AS SAT_NODE_ID,
       SN.mac_address,
       SN.max_concurrent_checks,
       SN.ip,
       SN.sched_log_level,
       SN.sput_log_level,
       SN.dq_log_level,
       SN.scout_shared_key,
       SN.server_id
  FROM rhn_sat_cluster SC, rhn_sat_node SN
 WHERE SC.customer_id = :org_id
  AND  SN.sat_cluster_id = SC.recid
ORDER BY UPPER(SC.description)
  </query>
  <elaborator name="config_push_status" />
  <elaborator name="org_changes" />
</mode>

<mode name="scouts_all">
  <query params="">
SELECT SC.recid AS ID,
       SC.customer_id,
       SC.description,
       SC.public_key,
       SC.vip,
       SC.pem_public_key,
       SC.pem_public_key_hash,
       SN.recid AS SAT_NODE_ID,
       SN.mac_address,
       SN.max_concurrent_checks,
       SN.ip,
       SN.sched_log_level,
       SN.sput_log_level,
       SN.dq_log_level,
       SN.scout_shared_key,
       SN.server_id
  FROM rhn_sat_cluster SC, rhn_sat_node SN
 WHERE SN.sat_cluster_id = SC.recid
ORDER BY UPPER(SC.description)
  </query>
  <elaborator name="config_push_status_all" />
  <elaborator name="org_changes_all" />
</mode>


<!--
- if date executed is null then it's either expired or pending.
- treat the case where the date is past the expiration as expired, otherwise pending
- if date executed is not null then an exit status of '0' is OK, '1' is warning, otherwise "error"
-->
<query name="config_push_status" params="org_id">
SELECT distinct
       case when CQE.date_executed is null then (
       case when current_timestamp &lt; CQI.expiration_date then 'PENDING' else 'EXPIRED' end ) else (
       case when exit_status = 0 then 'OK' when exit_status = 1 then 'WARNING' else 'ERROR' end ) end AS CONFIG_STATUS,
       SC.recid AS id,
       CQI.last_update_user,
       TO_CHAR(CQI.date_submitted, 'YYYY-MM-DD HH24:MI:SS') AS DATE_SUBMITTED,
       TO_CHAR(CQE.date_executed, 'YYYY-MM-DD HH24:MI:SS') AS DATE_EXECUTED,
       CQE.stdout
  FROM rhn_command_queue_execs CQE,
    rhn_command_queue_instances CQI,
    rhn_sat_cluster SC
  WHERE SC.recid = CQE.netsaint_id
  AND SC.recid IN (%s)
  AND SC.customer_id = :org_id
  AND CQE.instance_id = CQI.recid
  AND CQI.recid = (
    SELECT max(instance_id)
      FROM rhn_command_queue_execs
      WHERE netsaint_id = CQE.netsaint_id
      AND command_id = 1)
  AND SC.deployed = '1'
</query>


<query name="org_changes" params="org_id">
SELECT 1 AS PUSH_NEEDED,
         SC.recid AS id
  FROM rhn_sat_cluster SC, (
  SELECT MAX(SC.last_update_date) cluster_last_update,
         MAX(SN.last_update_date) node_last_update,
         MAX(P.last_update_date) probe_last_update
  FROM   rhn_sat_cluster SC, rhn_sat_node SN , rhn_probe P
  WHERE  SN.sat_cluster_id = SC.recid
  AND    SC.recid IN (%s)
  AND    SC.customer_id = :org_id
  AND EXISTS (SELECT 1 from rhn_check_probe CP
       WHERE P.recid = CP.probe_id
       AND CP.sat_cluster_id = SC.recid)
  ) last_update,
  (SELECT coalesce(MAX(CQE.date_executed), to_char('1', 'J')) push_date
      FROM rhn_command_queue_execs CQE,
           rhn_command_queue_instances CQI,
           rhn_sat_cluster SC
      WHERE CQE.instance_id = CQI.recid
      AND CQE.netsaint_id = SC.recid
      AND SC.customer_id = :org_id
      AND command_id=1
  ) last_push,
  ( SELECT count(*) CNT
    FROM   rhn_deployed_probe
    WHERE  recid NOT IN (SELECT recid FROM rhn_probe
      WHERE probe_type = 'check')
  ) undeployed_probes
  WHERE last_push.push_date &lt; last_update.cluster_last_update
  OR last_push.push_date &lt; last_update.node_last_update
  OR last_push.push_date &lt; last_update.probe_last_update
  OR undeployed_probes.cnt &gt; 0
</query>


<query name="config_push_status_all" params="">
SELECT distinct
       case when CQE.date_executed is null then (
       case when current_timestamp &lt; CQI.expiration_date then 'PENDING' else 'EXPIRED' end ) else (
       case when exit_status = 0 then 'OK' when exit_status = 1 then 'WARNING' else 'ERROR' end ) end AS CONFIG_STATUS,
       SC.recid AS id,
       CQI.last_update_user,
       TO_CHAR(CQI.date_submitted, 'YYYY-MM-DD HH24:MI:SS') AS DATE_SUBMITTED,
       TO_CHAR(CQE.date_executed, 'YYYY-MM-DD HH24:MI:SS') AS DATE_EXECUTED,
       CQE.stdout
  FROM rhn_command_queue_execs CQE,
    rhn_command_queue_instances CQI,
    rhn_sat_cluster SC
  WHERE SC.recid = CQE.netsaint_id
  AND SC.recid IN (%s)
  AND CQE.instance_id = CQI.recid
  AND CQI.recid = (
    SELECT max(instance_id)
      FROM rhn_command_queue_execs
      WHERE netsaint_id = CQE.netsaint_id
      AND command_id = 1)
  AND SC.deployed = '1'
</query>


<query name="org_changes_all" params="">
SELECT 1 AS PUSH_NEEDED,
         SC.recid AS id
  FROM rhn_sat_cluster SC, (
  SELECT MAX(SC.last_update_date) cluster_last_update,
         MAX(SN.last_update_date) node_last_update,
         MAX(P.last_update_date) probe_last_update
  FROM   rhn_sat_cluster SC, rhn_sat_node SN , rhn_probe P
  WHERE  SN.sat_cluster_id = SC.recid
  AND    SC.recid IN (%s)
  AND EXISTS (SELECT 1 from rhn_check_probe CP
       WHERE P.recid = CP.probe_id
       AND CP.sat_cluster_id = SC.recid)
  ) last_update,
  (SELECT coalesce(MAX(CQE.date_executed), to_date('1', 'J')) push_date
      FROM rhn_command_queue_execs CQE,
           rhn_command_queue_instances CQI,
           rhn_sat_cluster SC
      WHERE CQE.instance_id = CQI.recid
      AND CQE.netsaint_id = SC.recid
      AND command_id=1
  ) last_push,
  ( SELECT count(*) CNT
    FROM   rhn_deployed_probe
    WHERE  recid NOT IN (SELECT recid FROM rhn_probe
      WHERE probe_type = 'check')
  ) undeployed_probes
  WHERE last_push.push_date &lt; last_update.cluster_last_update
  OR last_push.push_date &lt; last_update.node_last_update
  OR last_push.push_date &lt; last_update.probe_last_update
  OR undeployed_probes.cnt &gt; 0
</query>


<mode name="fetch_key">
  <query params="sat_cluster_id">
SELECT recid as ID,
       scout_shared_key
  FROM rhn_sat_node
 WHERE sat_cluster_id = :sat_cluster_id
  </query>
</mode>

</datasource_modes>
