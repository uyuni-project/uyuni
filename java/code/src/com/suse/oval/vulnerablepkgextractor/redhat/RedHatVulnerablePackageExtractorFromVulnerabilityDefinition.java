/*
 * Copyright (c) 2023 SUSE LLC
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */

package com.suse.oval.vulnerablepkgextractor.redhat;

import com.suse.oval.OsFamily;
import com.suse.oval.ovaltypes.Advisory;
import com.suse.oval.ovaltypes.DefinitionClassEnum;
import com.suse.oval.ovaltypes.DefinitionType;
import com.suse.oval.vulnerablepkgextractor.ProductVulnerablePackages;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackage;
import com.suse.oval.vulnerablepkgextractor.VulnerablePackagesExtractor;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Vulnerable packages extractor for vulnerability definitions
 * from: <a href="https://www.redhat.com/security/data/oval/v2/">RedHat OVAL</a>
 */
public class RedHatVulnerablePackageExtractorFromVulnerabilityDefinition implements VulnerablePackagesExtractor {
    private static final Logger LOG =
            LogManager.getLogger(RedHatVulnerablePackageExtractorFromVulnerabilityDefinition.class);
    private final DefinitionType vulnerabilityDefinition;

    /**
     * Standard constructor
     *
     * @param vulnerabilityDefinitionIn the vulnerability definition to extract vulnerable packages from
     * */
    public RedHatVulnerablePackageExtractorFromVulnerabilityDefinition(DefinitionType vulnerabilityDefinitionIn) {
        this.vulnerabilityDefinition = vulnerabilityDefinitionIn;
        assertDefinitionIsValid(vulnerabilityDefinitionIn);
    }

    @Override
    public List<ProductVulnerablePackages> extract() {
        List<VulnerablePackage> vulnerablePackages = vulnerabilityDefinition.getMetadata().getAdvisory()
                .map(Advisory::getAffectedComponents).orElse(Collections.emptyList())
                .stream().map(this::toVulnerablePackage)
                .collect(Collectors.toList());

        String cve = vulnerabilityDefinition.getSingleCve().orElseThrow();

        List<String> affectedCpeList =
                vulnerabilityDefinition.getMetadata().getAdvisory().map(Advisory::getAffectedCpeList)
                        .orElse(Collections.emptyList());

        if (affectedCpeList.isEmpty()) {
            LOG.warn("RedHat affected CPE list cannot be empty");
        }

        List<ProductVulnerablePackages> result = new ArrayList<>();
        for (String affectedCpe : affectedCpeList) {
            // o implies 'operating system', the OVAL could also describe applications
            if (!affectedCpe.startsWith("cpe:/o:")) {
                continue;
            }
            ProductVulnerablePackages productVulnerablePackages = new ProductVulnerablePackages();
            productVulnerablePackages.setProductCpe(affectedCpe);
            productVulnerablePackages.setVulnerablePackages(vulnerablePackages);
            productVulnerablePackages.setSingleCve(cve);

            result.add(productVulnerablePackages);
        }

        return result;
    }

    @Override
    public boolean isValidDefinition(DefinitionType definitionTypeIn) {
        boolean isVulnerabilityDefinition =
                vulnerabilityDefinition.getDefinitionClass() == DefinitionClassEnum.VULNERABILITY;
        boolean isRedHatOVAL = vulnerabilityDefinition.getOsFamily() == OsFamily.REDHAT_ENTERPRISE_LINUX;

        // Clients should filter out unaffected definitions because there is no point of extracting vulnerable packages
        // from unaffected definitions
        boolean isUnaffected = !vulnerabilityDefinition.getId().contains("unaffected");

        return isVulnerabilityDefinition && isRedHatOVAL && isUnaffected;
    }

    private VulnerablePackage toVulnerablePackage(String affectedPackage) {
        VulnerablePackage vulnerablePackage = new VulnerablePackage();
        vulnerablePackage.setName(affectedPackage);
        vulnerablePackage.setFixVersion(null);
        return vulnerablePackage;
    }

}
