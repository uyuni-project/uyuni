#!/usr/bin/python
#
# wrapper for Script to migrate systems between Orgs.
#
# Copyright (c) 2008--2010 Red Hat, Inc.
#
# Authors: Pradeep Kilambi
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#


if __name__ != '__main__':
    raise ImportError, "module cannot be imported"

import sys


def systemExit(code, msgs=None):
    "Exit with a code and optional message(s). Saved a few lines of code."

    if msgs:
        if type(msgs) not in [type([]), type(())]:
            msgs = (msgs, )
        for msg in msgs:
            sys.stderr.write(str(msg) + '\n')
    sys.exit(code)

_LIBPATH = "/usr/share/rhn"
# add to the path if need be
if _LIBPATH not in sys.path:
    sys.path.append(_LIBPATH)

try:
    import os
    import socket
    from rhn import rhnLockfile
except KeyboardInterrupt:
    systemExit(0, "\nUser interrupted process.")


### acquire lock/check for other instances of migrate servers
#   i.e., lock against multiple instances of migrate servers
LOCK = None
try:
    LOCK = rhnLockfile.Lockfile('/tmp/migrate-server.pid')
except rhnLockfile.LockfileLockedException:
    systemExit(1, "ERROR: attempting to run more than one instance of migrate-server. Exiting.")

try:
    # NOTE: importing
    from utils import migrateSystemProfile
except KeyboardInterrupt:
    systemExit(0, "\nUser interrupted process.")
except ImportError, e:
    systemExit(2, "Unable to find migrate server tool.\n"
                  "Error: %s" % e)


def releaseLOCK():
    global LOCK
    if LOCK:
        LOCK.release()


def main():
    # execute
    try:
        return migrateSystemProfile.main()
    except KeyboardInterrupt:
        systemExit(0, "\nUser interrupted process.")

    releaseLOCK()
    return 0


if __name__ == '__main__':
    try:
        sys.exit(abs(main() or 0))
    except KeyboardInterrupt:
        systemExit(0, "\nUser interrupted process.")
