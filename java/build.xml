<?xml version="1.0"?>

<!--
  Spacewalk build file, please indent 2 spaces. NO TABS!
-->
<project name="RHN" default="all" basedir=".">
  <property file="${user.home}/.java/java.conf"/>
  <property file="conf/rhn_java.conf"/>
  <!-- External java.lib.dir property -->
  <condition property="java.lib.dir" value="${JAVA_LIBDIR}" else="/usr/share/java">
    <isset property="JAVA_LIBDIR"/>
  </condition>
  <condition property="product.name.short" value="susemanager" else="uyuni">
    <equals arg1="${product.name}" arg2="'SUSE Manager'"/>
  </condition>
  <available file="${java.lib.dir}/tomcat6" type="dir" property="tomcat" value="tomcat6" />
  <available file="${java.lib.dir}/tomcat" type="dir" property="tomcat" value="tomcat" />
  <available file="/usr/share/java/tomcat/tomcat-servlet-3.1-api.jar" type="file" property="tomcat" value="tomcat8" />
  <available file="/usr/share/java/tomcat/tomcat-servlet-4.0-api.jar" type="file" property="tomcat" value="tomcat9" />
  <property name="tomcat" value="tomcat5" />
  <echo message="Importing buildconf/build-props-${product.name.short}.xml" />
  <import file="buildconf/build-props-${product.name.short}.xml" />
  <echo message="Importing buildconf/build-props-${tomcat}.xml" />
  <import file="buildconf/build-props-${tomcat}.xml" />
  <import file="buildconf/build-props.xml" />
  <import file="buildconf/build-taskdefs.xml" />
  <import file="buildconf/build-utils.xml" />
  <import file="buildconf/build-webapp.xml" />

  <target name= "build-all" depends="clean, create-webapp-dir, all"/>

  <target name="prepare" depends="init-taskdefs">
        <mkdir dir="${build.dir}/src"/>
  </target>

  <target name="boot-deps" unless="installbuild">
    <mkdir dir="${boot.lib.dir}" />
    <jpackage-deps jars="${boot.jar.dependencies}" dir="${boot.lib.dir}" />
  </target>

  <!-- only runs if we are missing a jpackage dir; speeds builds -->
  <target name="link-jars" depends="test-deps,resolve" if="missing-deps">
    <mkdir dir="${build.lib.dir}" />
    <mkdir dir="${run.lib.dir}" />
    <mkdir dir="${run-external.lib.dir}" />
    <mkdir dir="${test.lib.dir}" />

    <echo message="Linking build jars"/>
    <jpackage-deps jars="${jasper-jars} ${tomcat-jars}" dir="${build.lib.dir}" />
    <link-jars ivyxml="${rhn-home}/ivy.xml" libdir="${lib.dir}"
               jars="${build.jar.dependencies}" dir="${build.lib.dir}" />
    <echo message="Linking test jars"/>
    <link-jars ivyxml="${rhn-home}/ivy.xml" libdir="${lib.dir}"
               jars="${test.jar.dependencies}" dir="${test.lib.dir}"/>
    <echo message="Linking run jars"/>
    <link-jars ivyxml="${rhn-home}/ivy.xml" libdir="${lib.dir}"
               jars="${run.jar.dependencies}" dir="${run-external.lib.dir}"/>
    </target>

  <target name="missingstrings"
          description="prints out a report with untranslated strings.">
    <mkdir dir="${report.dir}" />
    <exec executable="${basedir}/scripts/missingstrings.sh"
          output="${report.dir}/missingstrings.txt"
          dir="${rhn-home}/scripts" />
  </target>

  <!-- see if any of the jpackage managed dirs are missing -->
  <target name="test-deps">
    <condition property="missing-deps">
      <not>
        <and>
          <available file="${build.lib.dir}" type="dir" />
          <available file="${run.lib.dir}" type="dir" />
          <available file="${test.lib.dir}" type="dir" />
        </and>
      </not>
    </condition>
  </target>

  <target name="coverage-report" depends="instrument" if="ccbuild">
    <!-- This is really stupid, but jcoverage can't deal with having code
         with different top-level directories, so we copy all code to a
         single root dir.  :-(  -->
    <mkdir dir="${build.dir}/src-copy" />
    <copy toDir="${build.dir}/src-copy">
      <fileset dir="code/src">
        <include name="**/*.java" />
        <exclude name="**/*Task.java" />
      </fileset>
    </copy>

    <emma enabled="true">
      <report sourcepath="${build.dir}/src-copy"
              sort="+block,+name,+method,+class"
              metrics="method:70,block:80,line:80,class:100">
        <infileset dir="${rhn-home}" includes="*.em, *.ec" />
        <!-- txt outfile="${report.dir}/emma.txt"
             depth="package"
             columns="class,method,block,line,name" / -->
        <html outfile="${report.dir}/emma.html"
              depth="method"
              columns="name,class,method,block,line" />
        <xml outfile="${report.dir}/emma.xml"
             depth="method"
             columns="name,class,method,block,line" />
      </report>
    </emma>

    <delete dir="${build.dir}/src-copy" />
  </target>

  <target name="comment-ratio-report">
    <mkdir dir="${report.dir}" />
    <exec executable="/bin/sh" dir="${src.dir}"
          output="${report.dir}/comment-ratio.txt" >
      <arg value="${rhn-home}/scripts/slocc.sh" />
      <arg value="-findopt" />
      <arg value="-name *.java" />
      <arg value="." />
    </exec>
  </target>

  <target name="init"
          depends="resolve,link-jars,init-taskdefs, set-default-config-dir">
    <tstamp />
  </target>

  <target name="all" depends="init,compile,pack"
          description="Compile and pack - no code generation in this step" />

  <target name="init-cc" depends="set-cc-config-dir,boot-deps">
    <property name="ccbuild" value="true" />
  </target>

  <target name="init-install" depends="set-default-config-dir">
    <property name="installbuild" value="true" />
  </target>

  <target name="cctarget"
          depends="init-cc,all,coverage-report,comment-ratio-report,apidoc-jsp,jspcompile,javadoc"
          description="Target called by cruisecontrol process">
  </target>

  <target name="set-default-config-dir">
    <property name="rhn.config.dir" value="/etc/rhn" />
  </target>

  <target name="set-cc-config-dir">
    <property name="rhn.config.dir"
              value="${rhn-home}/buildconf/builder/config/satellite" />
  </target>

  <target name="run" description="runs a class with a main method" depends="compile">
    <java fork="true"
          classname="${classname}"
          failonerror="true" >
          <classpath>
            <pathelement path="${build.dir}/classes" />
            <path refid="alljars"/>
          </classpath>
    </java>
  </target>

  <target name="clean" description="Remove all build artifacts">
    <delete dir="${build.dir}" quiet="true"/>
    <delete>
      <fileset dir="${rhn-home}" includes="junit*.properties" />
    </delete>
    <delete>
      <fileset defaultexcludes="no" dir="${rhn-home}">
        <include name="**/*~" />
        <include name="velocity.log*" />
        <include name="coverage.ec" />
        <include name="coverage.em" />
      </fileset>
    </delete>
  </target>

  <target name="apidoc-singlepage" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="SinglePageDoclet" />
    <property name="template.dir" value="singlepage" />
    <property name="apidoc.output" value="${report.dir}/apidocs/${template.dir}/" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-jsp" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="JSPDoclet" />
    <property name="template.dir" value="jsp" />
    <property name="apidoc.output" value="${report.dir}/apidocs/${template.dir}/" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-html" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="HtmlDoclet" />
    <property name="template.dir" value="html" />
    <property name="apidoc.output" value="${report.dir}/apidocs/${template.dir}/" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-docbook" description="Generate docbook xml from the API">
    <property name="doclet.class" value="DocBookDoclet" />
    <property name="template.dir" value="docbook" />
    <property name="apidoc.output" value="${report.dir}/apidocs/${template.dir}/" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-asciidoc" description="Generate asciidoc from the API">
    <property name="doclet.class" value="AsciidocDoclet" />
    <property name="template.dir" value="asciidoc" />
    <property name="apidoc.output" value="${report.dir}/apidocs/${template.dir}/" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc" description="Generate the api documentation" depends="init">
    <path id="javadocpath">
    <path refid="buildjars" />
      <pathelement location="build/classes" />
    </path>

    <mkdir dir="${report.dir}/apidocs" />
    <mkdir dir="${report.dir}/apidocs/${template.dir}/" />
    <mkdir dir="${report.dir}/apidocs/${template.dir}/handlers/" />
    <javadoc doclet="com.redhat.rhn.internal.doclet.${doclet.class}" docletpathref="javadocpath" classpathref="buildjars" sourcepath="code/src"
        additionalparam="-d ${apidoc.output} -templates buildconf/apidoc/${template.dir} -product ${product.name} -apiversion '${java.apiversion}'">
      <fileset dir="code" >
        <include name="**/src/com/redhat/rhn/frontend/xmlrpc/**/*Handler.java" />
        <include name="**/src/com/redhat/rhn/frontend/xmlrpc/serializer/*Serializer.java" />
        <include name="**/src/com/redhat/rhn/domain/config/xmlrpc/serializer/*Serializer.java" />
        <include name="**/src/com/suse/manager/xmlrpc/**/*Handler.java" />
        <include name="**/src/com/suse/manager/xmlrpc/serializer/*Serializer.java" />
      </fileset>
      <excludepackage name="**/*" />
    </javadoc>

  </target>

  <target name="javadoc" description="Generate the java-doc" depends="init">
    <javadoc destdir="${report.dir}/javadoc" author="true" version="true"
             use="true" failonerror="true" classpathref="buildjars"
             stylesheetfile="${src.dir}/webapp/css/rhnjavadoc.css"
             breakiterator="yes" useexternalfile="true" maxmemory="128m" >
      <tag name="todo" scope="all" description="To do:" />
      <tag name="xmlrpc.param" scope="methods" enabled="false"/>
      <tag name="xmlrpc.returntype" scope="methods" enabled="false"/>
      <tag name="xmlrpc.namespace" scope="types" enabled="false"/>
      <tag name="xmlrpc.doc" scope="all" enabled="false"/>
      <tag name="xmlrpc.serializer" scope="methods" enabled="false"/>
      <fileset dir="code" >
        <include name="**/src/**/*.java" />
        <exclude name="**/test/**" />
        <exclude name="**/testing/*TestUtils.java" />
        <exclude name="**/testing/*Test.java" />
        <exclude name="**/internal/**" />
      </fileset>
      <fileset dir="${build.dir}/src" >
        <include name="**/*.java" />
      </fileset>
    </javadoc>
    <echo message="javadoc finished."/>
    <copy file="${src.dir}/webapp/img/inherit.gif"
          tofile="${report.dir}/javadoc/resources/inherit.gif"
          overwrite="yes" />
  </target>

  <target name="javadoc-deploy" description="Locally deploy javadocs"
          depends="javadoc">
    <delete quiet="true">
      <fileset dir="${javadoc.deploydir}"
               includes="**/*.html"
               followsymlinks="false"/>
    </delete>
    <copy todir="${javadoc.deploydir}">
      <fileset dir="${report.dir}/javadoc"
               includes="**/*.html" />
    </copy>
  </target>

  <!-- We may want to break this down so that we can specify directories or
       classes to operate on.  But, hopefully our checkstyle report will
       generally be clean, so we may be able to always check all classes. -->
  <target name="checkstyle" depends="init,do-compile-main">
    <mkdir dir="${report.dir}" />
    <checkstyle config="buildconf/checkstyle.xml" failOnViolation="true" >
      <property key="javadoc.method.scope" value="public" />
      <property key="javadoc.type.scope" value="package" />
      <property key="javadoc.var.scope" value="package" />
      <property key="javadoc.lazy" value="${javadoc.lazy}" />
      <property key="checkstyle.cache.file" value="${checkstyle.cache.src}" />
      <fileset dir="code" >
        <include name="**/src/**/*.java" />
        <exclude name="**/test/*.java" />
      </fileset>
      <classpath>
          <path refid="buildjars" />
          <pathelement path="${build.dir}/classes" />
      </classpath>
      <formatter type="plain" />
      <formatter type="xml" toFile="${report.dir}/checkstyle_report.xml" />
    </checkstyle>
    <checkstyle config="buildconf/checkstyle.xml" failOnViolation="true" >
      <property key="javadoc.method.scope" value="nothing" />
      <property key="javadoc.type.scope" value="nothing" />
      <property key="javadoc.var.scope" value="nothing" />
      <property key="javadoc.lazy" value="true" />
      <property key="checkstyle.cache.file" value="${checkstyle.cache.test}" />
      <fileset dir="code" >
        <include name="**/test/*.java" />
      </fileset>
      <formatter type="plain" />
      <formatter type="xml" toFile="${report.dir}/checkstyle_report_test.xml" />
    </checkstyle>
  </target>

  <target name="init-pack">
    <mkdir dir="${build.dir}/webapp" />
  </target>

  <target name="pack" depends="init,init-pack,pack-megajar,pack-testjar,pack-webapp"
          description="Create jars and copy descriptors" />

  <target name="pack-all"
          depends="init,init-pack,pack-megajar,pack-webapp"
          description="Create jars and copy descriptors" />

  <target name="instrument" depends="init-taskdefs" if="ccbuild">
    <emma enabled="true">
      <instr outdir="${build.instrument.dir}" merge="no"
          instrpath="${build.dir}/classes" mode="fullcopy"
          outfile="${rhn-home}/coverage.em" >
        <filter excludes="*.internal.*" />
        <filter excludes="*.scripts.*" />
        <filter excludes="*Mock*" />
        <filter excludes="*Constants" />
        <filter excludes="*Exception" />
        <filter excludes="*.test.*" />
        <filter excludes="com.redhat.common.*" />
        <filter excludes="com.redhat.services.*" />
        <filter excludes="com.redhat.rhn.testing.*" />
      </instr>
    </emma>

    <copy toDir="${build.instrument.dir}/classes">
      <fileset dir="${build.dir}/classes">
        <include name="**/*.xml" />
      </fileset>
    </copy>
  </target>

  <!-- Anything below this line should not generally be run from the command

       line.  These are the tasks that actually implement the public tasks -->

  <!-- ============== Compile tasks ================== -->
  <target name="compile" depends="init, compile-main, compile-all"
          description="Compile source" />

  <target name="compile-internal" depends="link-jars"
          description="Compile build helpers">
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           srcdir="code/internal/src"
           classpathref="buildjars"
           includeantruntime="true" >
    </javac>
  </target>

  <target name="compile-main" depends="do-compile-main, setup-log4j"/>

  <target name="do-compile-main" depends="link-jars,prepare"
          description="Compile the main codebase" unless="installbuild">
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="512m"
           classpathref="buildjars" >
      <src>
        <path location="${build.dir}/src" />
        <path location="code/src" />
        <path location="code/scripts/src" />
      </src>
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
         <exclude name="**/log4j.properties" />
      </fileset>
    </copy>
  </target>

  <target name ="setup-log4j" >
    <property name="dest.log4j" location = "${build.dir}/classes/log4j.properties"/>
    <if>
      <available file="${custom.log4j}"/>
      <then>
        <copy tofile="${dest.log4j}" file="${custom.log4j}"/>
      </then>
      <else>
        <copy tofile="${dest.log4j}" file="${src.dir}/src/log4j.properties"/>
      </else>
    </if>
  </target>

  <target name="compile-all" depends="link-jars,prepare"
          description="compiles the main codebase without testcases"
          if="installbuild">
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="256m"
           classpathref="alljars"
 	   	   excludes="**/test/*,**/testing/*,**/*Test*.java"
      >
      <src>
        <path location="${build.dir}/src" />
        <path location="code/src" />
        <path location="code/scripts/src" />
      </src>
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </copy>
  </target>

  <target name="unwar-webapp" depends="pack" >
    <unjar src="${rhn.war}"
           dest="${build.dir}/webapp/rhnjava" />
  </target>

  <target name="jspcompile" depends="pack,unwar-webapp"
          description="precompile jsp's">
    <mkdir dir="${build.dir}/jsp-temp" />
    <mkdir dir="${build.dir}/apidoc-temp" />
    <mkdir dir="${build.dir}/webapp/rhnjava/WEB-INF/classes" />
    <fileset id="jspffiles" dir="${build.dir}/webapp/rhnjava">
      <include name="**/*.jspf"/>
      <include name="**/*.jsp"/>
    </fileset>
    <fileset id="apidoc_jspffiles" dir="${prefix}${webapp-dir}/rhn">
      <include name="**/*.jspf"/>
      <include name="**/*.jsp"/>
    </fileset>
    <pathconvert targetos="unix" pathsep="," property="jspflist" refid="jspffiles"/>
    <pathconvert targetos="unix" pathsep="," property="apidoc_jspflist" refid="apidoc_jspffiles"/>
    <jasper2
        verbose="2"
        uriroot="${build.dir}/webapp/rhnjava"
        jspfiles="${jspflist}"
        webXmlFragment="${build.dir}/webapp/generated_web.xml"
        outputDir="${build.dir}/jsp-temp" />
    <jasper2
        verbose="2"
        uriroot="${prefix}${webapp-dir}/rhn"
        jspfiles="${apidoc_jspflist}"
        webXmlFragment="${build.dir}/webapp/generated_apidoc.xml"
        outputDir="${build.dir}/apidoc-temp" />
    <javac destdir="${build.dir}/webapp/rhnjava/WEB-INF/classes"
           debug="off" optimize="on"
           deprecation="${deprecation}"
           fork="yes"
           memoryMaximumSize="512m"
           classpathref="alljars">
       <src path="${build.dir}/jsp-temp"/>
       <src path="${build.dir}/apidoc-temp"/>
    </javac>
    <loadfile property="jspc.web.fragment"
              srcfile="${build.dir}/webapp/generated_web.xml" />
    <replace file="${build.dir}/webapp/rhnjava/WEB-INF/web.xml">
      <replacefilter token="&lt;!-- add precompiled jsp servlets --&gt;"
              value="${jspc.web.fragment}"/>
    </replace>
    <loadfile property="jspc.web.fragment.apidoc"
              srcfile="${build.dir}/webapp/generated_apidoc.xml" />
    <replace file="${build.dir}/webapp/rhnjava/WEB-INF/web.xml">
      <replacefilter token="&lt;!-- add generated apidoc --&gt;"
              value="${jspc.web.fragment.apidoc}"/>
    </replace>
    <delete file="${rhn.war}"/>
    <jar basedir="${build.dir}/webapp/rhnjava"
         destfile="${rhn.war}"
         excludes="**/*.java"/>
  </target>

  <!-- =================== Packaging Tasks ======================= -->
  <target name="megajar-init">
    <mkdir dir="${run.lib.dir}" />
  </target>

  <target name="pack-megajar" depends="megajar-init, compile">
    <delete file="${megajar.jar}" />
    <jar destfile="${megajar.jar}">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;
             html go as javadoc elsewhere -->
        <exclude name="**/internal/**" />
        <exclude name="**/*.tld" />
        <exclude name="**/*.html" />
        <exclude name="**/test/" />
        <exclude name="**/*/testing/**" />
        <exclude name="**/log4j.properties" />
        <exclude name="**/*.conf" />
        <exclude name="**/*.conf.rpmsave" />
        <exclude name="**/StringResource*.xml"/>
      </fileset>
      <fileset dir="${build.dir}/classes">
        <include name="**/StringResource_en_US.xml"/>
      </fileset>
      <!-- ugh, we can't flatten this like we would with a <copy> tag
           or use a mapper, alas -->
      <metainf dir="${build.dir}/classes/com/redhat/rhn/frontend/taglibs">
        <include name="*.tld" />
      </metainf>
    </jar>
  </target>

  <target name="pack-testjar" depends="megajar-init, compile">
    <delete file="${testjar.jar}" />
    <jar destfile="${testjar.jar}">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;
             html go as javadoc elsewhere -->
        <include name="**/test/*" />
        <include name="**/*/testing/**" />
      </fileset>

    </jar>
  </target>

  <target name="pack-webapp" depends="compile">
    <war destfile="${rhn.war}" webxml="${src.dir}/webapp/WEB-INF/web.xml">
      <fileset dir="${src.dir}/webapp">
        <exclude name="WEB-INF/web.xml"/>
        <exclude name="help/**" unless="includehelp"/>
      </fileset>
      <classes dir="${build.dir}/classes">
        <include name="log4j.properties" />
      </classes>
      <lib dir="${run.lib.dir}">
        <include name="rhn.jar"/>
        <include name="rhn-test.jar"/>
      </lib>
      <lib dir="${run-external.lib.dir}">
        <!-- Don't want the Oracle drivers which use JNI in the war. -->
        <exclude name="**/ojdbc*" />
        <exclude name="**/oracle-jdbc*" />
        <exclude name="**/servlet*" />
        <exclude name="**/jspapi*" />
        <exclude name="**/jasper5-compiler*" />
      </lib>
    </war>
  </target>

  <target name="gen-explain-plan" depends="compile-internal,init-taskdefs"
          description="Generate explain plans for the DataSource queries.">
    <mkdir dir="${report.dir}/explainplan" />
    <java fork="true"
          classname="com.redhat.rhn.scripts.ExplainPlanGenerator"
          failonerror="true" >
          <classpath>
              <pathelement path="${build.dir}/classes" />
              <path refid="alljars"/>
          </classpath>
          <arg value="${rhn.checkout.dir}" />
          <arg value="${report.dir}/explainplan/explain.txt" />
    </java>
  </target>

  <target name="install-tomcat5">
       <property name="webapp-dir" value="/var/lib/tomcat5/webapps/" />
       <antcall target="install" />
  </target>

  <target name="install-tomcat6">
       <property name="webapp-dir" value="/var/lib/tomcat6/webapps/" />
       <echo message="${prefix}" />
       <echo message="${webapp-dir}" />
       <antcall target="install" />
  </target>

  <target name="install-tomcat">
       <property name="webapp-dir" value="/var/lib/tomcat/webapps/" />
    <!--
     - initializing prefix otherwise webapp is not copied to tomcat directory
     -->
       <property name="prefix" value="" />
       <echo message="${prefix}" />
       <echo message="${webapp-dir}" />
       <antcall target="install" />
  </target>

  <target name="install-tomcat8-suse">
       <property name="webapp-dir" value="/srv/tomcat/webapps/" />
       <echo message="${prefix}" />
       <echo message="${webapp-dir}" />
       <antcall target="install" />
  </target>

  <target name="install-tomcat9-suse">
       <property name="webapp-dir" value="/srv/tomcat/webapps/" />
       <echo message="${prefix}" />
       <echo message="${webapp-dir}" />
       <antcall target="install" />
  </target>

  <target name="apidoc-install"
          depends="apidoc-jsp"
          description="Copies apidoc to the target directory">

    <delete dir="${prefix}${webapp-dir}/rhn" />
    <mkdir dir="${prefix}${webapp-dir}/rhn" />
    <mkdir dir="${prefix}${webapp-dir}/rhn/apidoc" />
    <mkdir dir="${prefix}${webapp-dir}/rhn/apidoc/handlers" />
    <!--
     - copy the apidocs to the right place
     -->
    <copy file="${build.dir}/reports/apidocs/jsp/index.jsp"
          toDir="${prefix}${webapp-dir}/rhn/apidoc"
          overwrite="true" />

    <copy file="${build.dir}/reports/apidocs/jsp/faqs.jsp"
          toDir="${prefix}${webapp-dir}/rhn/apidoc"
          overwrite="true" />

    <copy file="${build.dir}/reports/apidocs/jsp/scripts.jsp"
          toDir="${prefix}${webapp-dir}/rhn/apidoc"
          overwrite="true" />

    <copy toDir="${prefix}${webapp-dir}rhn/apidoc/handlers/">
        <fileset dir="${report.dir}/apidocs/jsp/handlers/" />
    </copy>
  </target>

  <target name="install"
          depends="init-install,init,compile-all,pack,apidoc-jsp,apidoc-install,jspcompile"
          description="Install the webapp to the directory specified by $prefix">
    <delete dir="${prefix}/usr/share/rhn/lib" />
    <mkdir dir="${prefix}/usr/share/rhn/lib" />
    <unjar src="${rhn.war}" dest="${prefix}${webapp-dir}/rhn" />

    <!--
     - copy the jar that contains our code to /usr/share/rhn/lib to be shared
     - with taskomatic and the webapp.
     -->
    <copy file="${prefix}${webapp-dir}/rhn/WEB-INF/lib/rhn.jar"
          toDir="${prefix}/usr/share/rhn/lib"
          overwrite="true"  />

    <!--
     - Delete ALL of the jars, including rhn.jar, from the webapp so that
     - they can be replaced with symlinks.
     -->
    <delete>
      <fileset dir="${prefix}${webapp-dir}/rhn/WEB-INF/lib" >
        <include name="*.jar" />
      </fileset>
    </delete>

    <!-- create symlinks for everything -->
    <jpackage-deps jars="${dist.jar.dependencies}"
        dir="${prefix}${webapp-dir}/rhn/WEB-INF/lib"/>
    <symlink link="${prefix}${webapp-dir}/rhn/WEB-INF/lib/rhn.jar"
             resource="/usr/share/rhn/lib/rhn.jar"
             failonerror="false"
             overwrite="true" />

    <!--
      - delete the symlinks for the jars that break the webapp.  Basically
      - these are the oracle jars and the servlet jars
      -->
     <delete verbose="true">
       <fileset dir="${prefix}${webapp-dir}/rhn/WEB-INF/lib">
        <include name="**/ojdbc*" />
        <include name="**/oracle-jdbc*" />
        <include name="**/servlet*" />
        <include name="**/logdriver*" />
        <include name="**/jspapi*" />
        <include name="**/jasper5-compiler*" />
    </fileset>
    </delete>

    <!-- link taskomatic jars -->
    <mkdir dir="${prefix}${taskomatic.link.dir}" />
    <jpackage-deps jars="${taskomatic.jar.dependencies}"
                    dir="${prefix}${taskomatic.link.dir}"/>
    <!-- delete jars that are not needed-->
    <delete>
      <fileset dir="${prefix}${taskomatic.link.dir}" >
        <filename name="tomcattomcat-servlet-3.1-api.jar"/>
      </fileset>
    </delete>
  </target>

  <target name="make-eclipse-project"
          description="Configures this checkout as an eclipse project.">
    <copy toDir="${rhn-home}" overwrite="false">
      <fileset dir="${rhn-home}/conf/eclipse/">
        <include name=".project" />
        <include name=".checkstyle" />
        <include name=".classpath" />
        <include name=".settings/*" />
        <!-- include name=".externalToolBuilders/*" /-->
      </fileset>
    </copy>
  </target>

  <target name="wtf"
          description="Use this target to help you diagnose development problems.">
      <echo message="Hi, this task helps you get out your frustration when" />
      <echo message="writing code.  Please feel free to bop your cubemate" />
      <echo message="in the head for some comic relief." />
  </target>

  <target name="resolve" depends="resolve-local" />

  <target name="resolve-local" if="installbuild">
    <mkdir dir="${build.lib.dir}" />
    <mkdir dir="${test.lib.dir}" />
    <mkdir dir="${run-external.lib.dir}" />
    <jpackage-deps jars="${install.build.jar.dependencies}"
                   dir="${build.lib.dir}" />
    <jpackage-deps jars="${install.run.jar.dependencies}"
                   dir="${run-external.lib.dir}"/>
  </target>
</project>
