/*
 * Copyright (c) 2009--2014 Red Hat, Inc.
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */
package com.redhat.rhn.frontend.xmlrpc.activationkey.test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import com.redhat.rhn.FaultException;
import com.redhat.rhn.common.conf.Config;
import com.redhat.rhn.common.validator.ValidatorException;
import com.redhat.rhn.domain.channel.Channel;
import com.redhat.rhn.domain.channel.test.ChannelFactoryTest;
import com.redhat.rhn.domain.config.ConfigChannel;
import com.redhat.rhn.domain.config.ConfigChannelType;
import com.redhat.rhn.domain.rhnpackage.PackageName;
import com.redhat.rhn.domain.rhnpackage.test.PackageNameTest;
import com.redhat.rhn.domain.role.RoleFactory;
import com.redhat.rhn.domain.server.ManagedServerGroup;
import com.redhat.rhn.domain.server.MinionServer;
import com.redhat.rhn.domain.server.ServerConstants;
import com.redhat.rhn.domain.server.ServerFactory;
import com.redhat.rhn.domain.server.ServerGroup;
import com.redhat.rhn.domain.server.ServerGroupType;
import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;
import com.redhat.rhn.domain.token.ActivationKey;
import com.redhat.rhn.domain.token.TokenPackage;
import com.redhat.rhn.domain.token.test.ActivationKeyTest;
import com.redhat.rhn.frontend.xmlrpc.InvalidChannelException;
import com.redhat.rhn.frontend.xmlrpc.NoSuchSystemException;
import com.redhat.rhn.frontend.xmlrpc.activationkey.ActivationKeyHandler;
import com.redhat.rhn.frontend.xmlrpc.activationkey.AuthenticationException;
import com.redhat.rhn.frontend.xmlrpc.activationkey.ChannelInfo;
import com.redhat.rhn.frontend.xmlrpc.activationkey.NoSuchActivationKeyException;
import com.redhat.rhn.frontend.xmlrpc.serializer.ActivationKeySerializer;
import com.redhat.rhn.frontend.xmlrpc.test.BaseHandlerTestCase;
import com.redhat.rhn.manager.entitlement.EntitlementManager;
import com.redhat.rhn.manager.system.ServerGroupManager;
import com.redhat.rhn.manager.token.ActivationKeyManager;
import com.redhat.rhn.testing.ChannelTestUtils;
import com.redhat.rhn.testing.ConfigTestUtils;
import com.redhat.rhn.testing.ServerGroupTestUtils;
import com.redhat.rhn.testing.TestUtils;
import com.redhat.rhn.testing.UserTestUtils;

import com.suse.manager.utils.MachinePasswordUtils;
import com.suse.manager.webui.services.test.TestSaltApi;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import redstone.xmlrpc.XmlRpcSerializer;

public class ActivationKeyHandlerTest extends BaseHandlerTestCase {

    private ActivationKeyHandler keyHandler = new ActivationKeyHandler(new ServerGroupManager(new TestSaltApi()));
    private static final String KEY = "myexplicitkey";
    private static final String KEY_DESCRIPTION = "Test Key";
    private static final Integer KEY_USAGE_LIMIT = 0;
    private static final List<String> KEY_ENTITLEMENTS;
    static {
        KEY_ENTITLEMENTS = new LinkedList<>();
        KEY_ENTITLEMENTS.add(EntitlementManager.VIRTUALIZATION_ENTITLED);
    }

    private Channel baseChannel;
    private String baseChannelLabel;

    @Override
    @BeforeEach
    public void setUp() throws Exception {
        super.setUp();
        baseChannel = ChannelTestUtils.createBaseChannel(admin);
        baseChannelLabel = baseChannel.getLabel();
    }

    @Test
    public void testCreateWithAutogeneratedKey() {
        String key = keyHandler.create(admin, "", KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.TRUE);
        assertFalse(key.isEmpty());
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(key, admin);
        assertEquals(1, activationKey.getChannels().size());
        assertEquals(activationKey.getId(), admin.getOrg().getToken().getId());
        assertEquals(0, activationKey.getUsageLimit().longValue());
        assertEquals(KEY_DESCRIPTION, activationKey.getNote());

        // Created by default:
        assertEquals(2, activationKey.getEntitlements().size());
        assertTrue(keyHasEntitlement(activationKey,
                ServerConstants.getServerGroupTypeEnterpriseEntitled()));
        assertTrue(keyHasEntitlement(activationKey,
                ServerConstants.getServerGroupTypeVirtualizationEntitled()));
    }

    @Test
    public void testCreateWithBlankChannelAndUnlimitedUsageLimit() {
        List<String> ents = new ArrayList<>(1);
        String key = keyHandler.create(admin, "", KEY_DESCRIPTION, null,
                                ents, Boolean.TRUE);
        assertFalse(key.isEmpty());
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                lookupByKey(key, admin);
        assertTrue(activationKey.getChannels().isEmpty());
        assertEquals(activationKey.getId(), admin.getOrg().getToken().getId());
        assertNull(activationKey.getUsageLimit());
        assertEquals(KEY_DESCRIPTION, activationKey.getNote());
    }

    @Test
    public void testCreateWithZeroUsageLimit() {
        String key = keyHandler.create(admin, "", KEY_DESCRIPTION, null,
                0, KEY_ENTITLEMENTS, Boolean.TRUE);
        assertFalse(key.isEmpty());
        ActivationKey activationKey = ActivationKeyManager.getInstance().
               lookupByKey(key, admin);
        assertEquals(0, activationKey.getUsageLimit().longValue());
    }

    @Test
    public void testCreateWithExplicitKey() {
        String resultingKey = keyHandler.create(admin, KEY, "testing",
                baseChannelLabel, 0, KEY_ENTITLEMENTS, Boolean.FALSE);
        assertNotEquals(KEY, resultingKey);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                lookupByKey(resultingKey, admin);
        assertFalse(activationKey.getToken().isOrgDefault());
        assertNotEquals(activationKey.getToken(), admin.getOrg().getToken());
    }

    @Test
    public void testCreateWithSameKey() {
        keyHandler.create(admin, KEY, "testing",
                baseChannelLabel, 0, KEY_ENTITLEMENTS, Boolean.FALSE);
        try {
            keyHandler.create(admin, KEY, "testing",
                baseChannelLabel, 0, KEY_ENTITLEMENTS, Boolean.FALSE);
            fail();
        }
        catch (FaultException e) {
            // expected
        }
    }

    @Test
    public void testCreateWithInvaidChannelId() {
        try {
            keyHandler.create(admin, "", "testing", "NOT A CHANNEL",
                    0, KEY_ENTITLEMENTS, Boolean.FALSE);
            fail();
        }
        catch (InvalidChannelException e) {
            // expected
        }
    }

    @Test
    public void testCreateWithChildChannel() throws Exception {
        Channel childChannel = ChannelTestUtils.createChildChannel(admin, baseChannel);
        String childChannelLabel = childChannel.getLabel();
        try {
            keyHandler.create(admin, "", "testing", childChannelLabel,
                    0, KEY_ENTITLEMENTS, Boolean.FALSE);
            fail();
        }
        catch (InvalidChannelException e) {
            // expected
        }
    }

    @Test
    public void testCreateWithBaseEntitlements() {
        List<String> badEntitlements = new LinkedList<>();
        badEntitlements.add("enterprise_entitled");
        try {
            keyHandler.create(admin, "", "testing", baseChannelLabel,
                    0, badEntitlements, Boolean.FALSE);
            fail();
        }
        catch (FaultException fe) {
            // expected
        }
    }

    @Test
    public void testCreateWithInvalidEntitlement() {
        List<String> badEntitlements = new LinkedList<>();
        badEntitlements.add("provisioning_foobar");
        try {
            keyHandler.create(admin, "", "testing", baseChannelLabel,
                    0, badEntitlements, Boolean.FALSE);
            fail();
        }
        catch (FaultException fe) {
            // expected
        }
    }

    @Test
    public void testActivationKeyRoleEnforced() {
        try {
            keyHandler.create(regular, KEY, KEY_DESCRIPTION,
                baseChannelLabel, KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
            fail();
        }
        catch (IllegalArgumentException e) {
            // expected
        }
    }

    @Test
    public void testUpdateEverything() throws Exception {

        String key = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.TRUE);

        Map<String, Object> details = new HashMap<>();
        String description2 = "Test Key 2";
        Channel baseChannel2 = ChannelTestUtils.createBaseChannel(admin);
        String baseChannelId2 = baseChannel2.getLabel();
        details.put("description", description2);
        details.put("base_channel_label", baseChannelId2);
        details.put("usage_limit", 15);
        details.put("universal_default", Boolean.FALSE);
        keyHandler.setDetails(admin, key, details);

        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                        lookupByKey(key, admin);

        assertEquals(1, activationKey.getChannels().size());
        assertEquals(baseChannel2, activationKey.getChannels().iterator().next());
        assertEquals(Long.valueOf(15), activationKey.getUsageLimit());
        assertFalse(activationKey.isUniversalDefault());
    }

    @Test
    public void testSetDetailsUnlimitedUsage() {

        String key = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.TRUE);

        Map<String, Object> details = new HashMap<>();
        details.put("usage_limit", 15); // should be ignored
        details.put("unlimited_usage_limit", Boolean.TRUE);
        keyHandler.setDetails(admin, key, details);

        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                        lookupByKey(key, admin);

        assertNull(activationKey.getUsageLimit());
    }

    @Test
    public void testSetDetailsContactMethod() {
        String key = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.TRUE);

        // Set 'ssh-push'
        Map<String, Object> details = new HashMap<>();
        details.put("contact_method", "ssh-push");
        keyHandler.setDetails(admin, key, details);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                lookupByKey(key, admin);
        assertEquals(ServerFactory.findContactMethodByLabel("ssh-push"),
                activationKey.getContactMethod());

        // Set 'ssh-push-tunnel'
        details.put("contact_method", "ssh-push-tunnel");
        keyHandler.setDetails(admin, key, details);
        activationKey = ActivationKeyManager.getInstance().
                lookupByKey(key, admin);
        assertEquals(ServerFactory.findContactMethodByLabel("ssh-push-tunnel"),
                activationKey.getContactMethod());
    }

    @Test
    public void testSetDetailsContactMethodInvalid() {
        String key = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.TRUE);

        Map<String, Object> details = new HashMap<>();
        details.put("contact_method", "foobar");
        try {
            keyHandler.setDetails(admin, key, details);
            fail("Setting invalid contact method should throw exception!");
        }
        catch (FaultException e) {
            // expected
        }
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                lookupByKey(key, admin);
        assertEquals(ServerFactory.findContactMethodByLabel("default"),
                activationKey.getContactMethod());
    }

    @Test
    public void testGetDetails() throws Exception {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);

        Channel childChannel = ChannelTestUtils.createChildChannel(admin, baseChannel);
        String childChannelLabel = childChannel.getLabel();
        keyHandler.addChildChannels(admin, newKey, buildList(childChannelLabel));

        ServerGroup group = ServerGroupTestUtils.createManaged(admin);
        keyHandler.addServerGroups(admin, newKey,
                buildList(group.getId().intValue()));

        PackageName newName = PackageNameTest.createTestPackageName();
        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", newName.getName())));

        PackageName newName2 = PackageNameTest.createTestPackageName();
        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", newName2.getName())));

        PackageName newName3 = PackageNameTest.createTestPackageName();
        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", newName3.getName())));

        ActivationKey key = keyHandler.getDetails(admin, newKey);
        Writer output = new StringWriter();
        ActivationKeySerializer serializer = new ActivationKeySerializer();
        serializer.serialize(key, output, new XmlRpcSerializer());
        String finalResult = output.toString();

        assertTrue(finalResult.contains(newKey));
        assertTrue(finalResult.contains(KEY_DESCRIPTION));
        assertTrue(finalResult.contains("<i4>" + KEY_USAGE_LIMIT + "</i4>"));
        assertTrue(finalResult.contains("<string>" + baseChannelLabel + "</string>"));

        assertTrue(finalResult.contains(newName.getName()));
        assertTrue(finalResult.contains(newName2.getName()));
        assertTrue(finalResult.contains(newName3.getName()));

        // Verify that the contact method is returned
        assertTrue(finalResult.contains("<member><name>contact_method</name>" +
                "<value><string>default</string></value></member>"));
    }

    @Test
    public void testSetAddOnEntitlement() {
        List<String> entitlements = new ArrayList<>();
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, entitlements, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance()
                                                    .lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getEntitlements().size());
        assertTrue(keyHasEntitlement(activationKey,
                ServerConstants.getServerGroupTypeEnterpriseEntitled()));
        assertFalse(keyHasEntitlement(activationKey, ServerConstants
                .getServerGroupTypeVirtualizationEntitled()));

        ServerGroupType virtualization = ServerConstants
                .getServerGroupTypeVirtualizationEntitled();
        keyHandler.addEntitlements(admin, newKey,
                buildEntitlementsList(new String[] { virtualization.getLabel() }));
        assertEquals(2, activationKey.getEntitlements().size());
        assertTrue(keyHasEntitlement(activationKey, virtualization));
    }

    private List<String> buildEntitlementsList(String [] entitlements) {
        List<String> entitlementList = new LinkedList<>();
        for (String entitlementIn : entitlements) {
            entitlementList.add(entitlementIn);
        }
        return entitlementList;
    }

    @Test
    public void testSetNonExistentEntitlement() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        try {
            keyHandler.addEntitlements(admin, newKey,
                    buildEntitlementsList(new String []{"not a real label"}));
            fail();
        }
        catch (ValidatorException e) {
            // expected
        }
    }

    /*
     * Ensure no exception is thrown when adding an entitlement the key already has.
     */
    @Test
    public void testReAddEntitlement() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(2, activationKey.getEntitlements().size());
        keyHandler.addEntitlements(admin, newKey,
                buildEntitlementsList(new String[]{"virtualization_host"}));
        assertEquals(2, activationKey.getEntitlements().size());
    }

    @Test
    public void testRemoveAddOnEntitements() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                           lookupByKey(newKey, admin);
        assertEquals(2, activationKey.getEntitlements().size());

        keyHandler.removeEntitlements(admin, newKey, KEY_ENTITLEMENTS);
        assertEquals(1, activationKey.getEntitlements().size());
    }

    /*
     * No exception should be thrown removing an entitlement the key doesn't have:
     */
    @Test
    public void testRemoveUnappliedAddOnEntitements() {
        List<String> noEntitlements = new ArrayList<>();
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, noEntitlements, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                        lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getEntitlements().size());

        List<String> entsToRemove = new LinkedList<>();
        entsToRemove.add("virtualization_host");
        keyHandler.removeEntitlements(admin, newKey, entsToRemove);
        assertEquals(1, activationKey.getEntitlements().size());
    }

    @Test
    public void testRemoveNonExistentAddOnEntitlement() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        try {
            keyHandler.removeEntitlements(admin, newKey,
                    buildEntitlementsList(new String []{"not a real entitlement"}));
            fail();
        }
        catch (ValidatorException e) {
            // expected
        }
    }

    @Test
    public void testAddChildChannel() throws Exception {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getChannels().size());

        Channel childChannel = ChannelTestUtils.createChildChannel(admin, baseChannel);
        String childChannelLabel = childChannel.getLabel();
        keyHandler.addChildChannels(admin, newKey, buildList(childChannelLabel));
        assertEquals(2, activationKey.getChannels().size());
    }

    @Test
    public void testAddBaseChannelAsChild() throws Exception {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                           lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getChannels().size());

        Channel anotherBaseChan = ChannelTestUtils.createBaseChannel(admin);
        String channelLabel = anotherBaseChan.getLabel();
        try {
            keyHandler.addChildChannels(admin, newKey, buildList(channelLabel));
            fail();
        }
        catch (InvalidChannelException e) {
            // expected
        }
    }

    /*
     * Adding a child channel when we don't have the parent should throw an exception.
     */
    @Test
    public void testAddChildChannelFromDifferentBase() throws Exception {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                          lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getChannels().size());

        Channel anotherBaseChan = ChannelTestUtils.createBaseChannel(admin);
        Channel childChannel = ChannelTestUtils.createChildChannel(admin,
            anotherBaseChan);
        String childChannelLabel = childChannel.getLabel();
        try {
            keyHandler.addChildChannels(admin, newKey, buildList(childChannelLabel));
            fail();
        }
        catch (InvalidChannelException e) {
            // expected
        }
    }

    @Test
    public void testRemoveChildChannel() throws Exception {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                        lookupByKey(newKey, admin);
        assertEquals(1, activationKey.getChannels().size());
        Channel childChannel = ChannelTestUtils.createChildChannel(admin, baseChannel);
        String childChannelLabel = childChannel.getLabel();
        keyHandler.addChildChannels(admin, newKey, buildList(childChannelLabel));
        assertEquals(2, activationKey.getChannels().size());

        keyHandler.removeChildChannels(admin, newKey, buildList(childChannelLabel));
        assertEquals(1, activationKey.getChannels().size());
    }

    @Test
    public void testAddServerGroup() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getServerGroups().size());

        ServerGroup group = ServerGroupTestUtils.createManaged(admin);
        keyHandler.addServerGroups(admin, newKey,
                buildList(group.getId().intValue()));
        assertEquals(1, activationKey.getServerGroups().size());
    }

    /*
     * Don't throw any exceptions when trying to re-add a server group we already have.
     */
    @Test
    public void testReAddServerGroup() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getServerGroups().size());

        ServerGroup group = ServerGroupTestUtils.createManaged(admin);
        keyHandler.addServerGroups(admin, newKey,
                buildList(group.getId().intValue()));
        assertEquals(1, activationKey.getServerGroups().size());

        keyHandler.addServerGroups(admin, newKey,
                buildList(group.getId().intValue()));
        assertEquals(1, activationKey.getServerGroups().size());
    }

    @Test
    public void testRemoveServerGroup() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getServerGroups().size());

        ServerGroup group = ServerGroupTestUtils.createManaged(admin);
        keyHandler.addServerGroups(admin, newKey,
                buildList(group.getId().intValue()));
        assertEquals(1, activationKey.getServerGroups().size());

        keyHandler.removeServerGroups(admin, newKey,
                buildList(group.getId().intValue()));
        assertEquals(0, activationKey.getServerGroups().size());
    }

    /*
     * Don't throw an exception when trying to remove a server group that hasn't been
     * added.
     */
    @Test
    public void testRemoveServerGroupNotThere() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                           lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getServerGroups().size());
        ManagedServerGroup sg = ServerGroupTestUtils.createManaged(admin);
        keyHandler.removeServerGroups(admin, newKey, buildList(
                sg.getId().intValue()));
        assertEquals(0, activationKey.getServerGroups().size());
    }

    @Test
    public void testAddPackageName() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getPackages().size());

        PackageName newName = PackageNameTest.createTestPackageName();
        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", newName.getName())));
        assertEquals(1, activationKey.getPackages().size());
    }

    @Test
    public void testRemovePackageName() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getPackages().size());

        PackageName newName = PackageNameTest.createTestPackageName();
        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", newName.getName())));
        assertEquals(1, activationKey.getPackages().size());

        keyHandler.removePackages(admin, newKey, List.of(Map.of("name", newName.getName())));
        assertEquals(0, activationKey.getPackages().size());
    }

    @Test
    public void testAddPackages() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        // check initial state
        assertEquals(0, activationKey.getPackages().size());

        // setup test
        List<Map<String, String>> packages = new ArrayList<>();
        Map<String, String> pkg1 = new HashMap<>();
        pkg1.put("name", "pkg1");
        pkg1.put("arch", "i386");
        packages.add(pkg1);

        Map<String, String> pkg2 = new HashMap<>();
        pkg2.put("name", "pkg2");
        pkg2.put("arch", "");
        packages.add(pkg2);

        Map<String, String> pkg3 = new HashMap<>();
        pkg3.put("name", "pkg3");
        packages.add(pkg3);

        // execute test
        int result = keyHandler.addPackages(admin, newKey, packages);

        // verify results
        assertEquals(1, result);
        assertEquals(3, activationKey.getPackages().size());

        boolean foundPkg1 = false, foundPkg2 = false, foundPkg3 = false;

        for (TokenPackage pkg : activationKey.getPackages()) {
            if ((pkg.getPackageName() != null) &&
                pkg.getPackageName().getName().equals("pkg1")) {

                if ((pkg.getPackageArch() != null) &&
                    pkg.getPackageArch().getLabel().equals("i386")) {

                    foundPkg1 = true;
                }
            }
            else if ((pkg.getPackageName() != null) &&
                     pkg.getPackageName().getName().equals("pkg2")) {

                if (pkg.getPackageArch() == null) {
                    foundPkg2 = true;
                }
            }
            else if ((pkg.getPackageName() != null) &&
                     pkg.getPackageName().getName().equals("pkg3")) {

                if (pkg.getPackageArch() == null) {
                    foundPkg3 = true;
                }
            }
        }
        assertTrue(foundPkg1);
        assertTrue(foundPkg2);
        assertTrue(foundPkg3);
    }

    @Test
    public void testRemovePackages() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        // check initial state
        assertEquals(0, activationKey.getPackages().size());

        // setup test
        List<Map<String, String>> packages = new ArrayList<>();
        Map<String, String> pkg1 = new HashMap<>();
        pkg1.put("name", "pkg1");
        pkg1.put("arch", "i386");
        packages.add(pkg1);

        Map<String, String> pkg2 = new HashMap<>();
        pkg2.put("name", "pkg2");
        pkg2.put("arch", "");
        packages.add(pkg2);

        Map<String, String> pkg3 = new HashMap<>();
        pkg3.put("name", "pkg3");
        packages.add(pkg3);

        keyHandler.addPackages(admin, newKey, packages);
        assertEquals(3, activationKey.getPackages().size());

        // execute tests and verify results
        packages.clear();
        Map<String, String> unknownPkg = new HashMap<>();
        unknownPkg.put("name", "unknown");
        unknownPkg.put("arch", "i386");
        packages.add(unknownPkg);
        int result = keyHandler.removePackages(admin, newKey, packages);
        assertEquals(3, activationKey.getPackages().size());

        packages.clear();
        packages.add(pkg2);
        result = keyHandler.removePackages(admin, newKey, packages);
        assertEquals(2, activationKey.getPackages().size());

        packages.clear();
        packages.add(pkg1);
        packages.add(pkg3);
        result = keyHandler.removePackages(admin, newKey, packages);
        assertEquals(0, activationKey.getPackages().size());
    }

    @Test
    public void testAddNonExistentPackage() {
        String newKey = keyHandler.create(admin, KEY, KEY_DESCRIPTION, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKey activationKey = ActivationKeyManager.getInstance().
                                                            lookupByKey(newKey, admin);
        assertEquals(0, activationKey.getPackages().size());

        keyHandler.addPackages(admin, newKey, List.of(Map.of("name", "notarealpackage")));
        // if the package name didn't exist, it should be added...
        assertEquals(1, activationKey.getPackages().size());
    }

    private boolean keyHasEntitlement(ActivationKey key, ServerGroupType entitlement) {
        boolean found = false;
        for (ServerGroupType current : key.getEntitlements()) {
            if (current.getId() == entitlement.getId()) {
                found = true;
                break;
            }
        }
        return found;
    }

    /**
     * Pack the given input into a list.
     * @param input Object to pack
     * @return Single item list
     */
    private List buildList(Object input) {
        List output = new LinkedList<>();
        output.add(input);
        return output;
    }

    /*
     * Care not to test in a fragile manner. No idea how many activation keys might exist
     * in the database on the host we're testing against, so assume nothing but what we
     * create in the actual test.
     */
    @Test
    public void testListActivationKeys() {
        // Create a bunch of keys:
        for (int i = 0; i < 5; i++) {
            keyHandler.create(admin, "", KEY_DESCRIPTION + " " + i, baseChannelLabel,
                    KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        }

        List<ActivationKey> keys = keyHandler.listActivationKeys(admin);

        assertTrue(keys.size() >= 5);
    }

    @Test
    public void testListActivatedSystems() throws Exception {
        ActivationKey key = ActivationKeyTest.createTestActivationKey(admin);
        int numServersActivated = key.getToken().getActivatedServers().size();

        Object[] servers = keyHandler.listActivatedSystems(admin, key.getKey());

        assertEquals(numServersActivated, servers.length);
    }

    @Test
    public void testListChannelsNoMinion() {
        try {
            keyHandler.listChannels("", "", "");
            fail("Expected NoSuchSystemException");
        }
        catch (NoSuchSystemException e) {
        }
        catch (Throwable t) {
            fail("Expected NoSuchSystemException but got " + t);
        }
    }

    @Test
    public void testListChannelsNoKey() throws Exception {
        MinionServer testMinionServer = MinionServerFactoryTest.createTestMinionServer(regular);
        try {
            keyHandler.listChannels(testMinionServer.getMinionId(), "", "");
            fail("Expected NoSuchActivationKeyException");
        }
        catch (NoSuchActivationKeyException e) {
        }
        catch (Throwable t) {
            fail("Expected NoSuchActivationKeyException but got " + t);
        }
    }

    @Test
    public void testListChannelsWrongPassword() throws Exception {
        MinionServer testMinionServer = MinionServerFactoryTest.createTestMinionServer(regular);
        ActivationKey key = ActivationKeyTest.createTestActivationKey(regular);
        try {
            keyHandler.listChannels(testMinionServer.getMinionId(), "", key.getKey());
            fail("Expected AuthenticationException");
        }
        catch (AuthenticationException e) {
            assertEquals("wrong machine password.", e.getMessage());
        }
        catch (Throwable t) {
            fail("Expected AuthenticationException but got " + t);
        }
    }

    @Test
    public void testListChannels() throws Exception {
        Config.get().setString("server.secret_key",
                DigestUtils.sha256Hex(TestUtils.randomString()));
        MinionServer testMinionServer = MinionServerFactoryTest.createTestMinionServer(regular);
        ActivationKey key = ActivationKeyTest.createTestActivationKey(regular);
        Channel channel1 = ChannelFactoryTest.createTestChannel(regular);
        Channel channel2 = ChannelFactoryTest.createTestChannel(regular);
        HashSet<Channel> channels = new HashSet<>();
        channels.add(channel1);
        channels.add(channel2);
        key.setChannels(channels);
        String machinePassword = MachinePasswordUtils.machinePassword(testMinionServer);
        List<ChannelInfo> channelInfo = keyHandler.listChannels(
                testMinionServer.getMinionId(), machinePassword, key.getKey());
        assertEquals(2, channelInfo.size());
        List<String> labels = channelInfo.stream().map(ChannelInfo::getLabel).collect(Collectors.toList());
        List<String> names = channelInfo.stream().map(ChannelInfo::getName).collect(Collectors.toList());

        channels.stream().forEach(channel -> {
            assertTrue(labels.contains(channel.getLabel()));
            assertTrue(names.contains(channel.getName()));
        });
    }

    @Test
    public void testConfigChannels() {
        String newKey = keyHandler.create(admin, KEY,
                        KEY_DESCRIPTION + " " + 1, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        UserTestUtils.addUserRole(admin, RoleFactory.CONFIG_ADMIN);
        // Create a global channel
        ConfigChannel global1 = ConfigTestUtils.createConfigChannel(admin.getOrg(),
                ConfigChannelType.normal());
        ConfigChannel global2 = ConfigTestUtils.createConfigChannel(admin.getOrg(),
                ConfigChannelType.normal());

        ConfigChannel global3 = ConfigTestUtils.createConfigChannel(admin.getOrg(),
                ConfigChannelType.normal());

        ConfigChannel global4 = ConfigTestUtils.createConfigChannel(admin.getOrg(),
                ConfigChannelType.normal());

        List<ConfigChannel> configs = new LinkedList<>();
        configs.add(global1);
        configs.add(global2);
        configs.add(global3);
        configs.add(global4);
        List<String> configLabels = new LinkedList<>();
        for (ConfigChannel cc : configs) {
            configLabels.add(cc.getLabel());
        }
        List<String> keys = new LinkedList<>();
        keys.add(newKey);

        assertEquals(1, keyHandler.setConfigChannels(admin, keys, configLabels));
        assertEquals(configs, keyHandler.listConfigChannels(admin, newKey));
        //now test remove
        //now try catch invalid ids
        try {
            configLabels.add("1111122");
            keyHandler.setConfigChannels(admin, keys, configLabels);
            fail("IllegalArgumentException NOT RAISED on invalid channel addition");
        }
        catch (Exception e) {
            //exception was successfully raised!
        }
        //test remove channel
        configLabels.clear();
        for (ConfigChannel cc : configs) {
            configLabels.add(cc.getLabel());
        }

        assertEquals(1,
              keyHandler.removeConfigChannels(admin, keys,
                                          configLabels.subList(0, 2)));
        assertEquals(configs.subList(2, configs.size()),
                    keyHandler.listConfigChannels(admin, newKey));

        //test add channels
        keyHandler.addConfigChannels(admin, keys, configLabels.subList(0, 2), true);
        assertEquals(configs, keyHandler.listConfigChannels(admin, newKey));

        assertEquals(1,
                keyHandler.removeConfigChannels(admin, keys,
                                            configLabels.subList(2, configs.size())));
        keyHandler.addConfigChannels(admin, keys,
                    configLabels.subList(2, configs.size()), false);
        assertEquals(configs, keyHandler.listConfigChannels(admin, newKey));
    }

    @Test
    public void testRemove() {
        String newKey = keyHandler.create(admin, KEY,
                KEY_DESCRIPTION + " " + 1, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKeyManager manager = ActivationKeyManager.getInstance();
        ActivationKey activationKey = manager.lookupByKey(newKey, admin);
        assertNotNull(activationKey);
        assertEquals(1, keyHandler.delete(admin, newKey));
        try {
            manager.lookupByKey(newKey, admin);
            String msg = "NUll lookup failed, because this object should NOT exist!";
            fail(msg);
        }
        catch (Exception e) {
            // great!.. Exception for null lookup is controvoersial but convenient..
        }
    }

    @Test
    public void testConfigDeployment() {
        String newKey = keyHandler.create(admin, KEY,
                KEY_DESCRIPTION + " " + 1, baseChannelLabel,
                KEY_USAGE_LIMIT, KEY_ENTITLEMENTS, Boolean.FALSE);
        ActivationKeyManager manager = ActivationKeyManager.getInstance();
        ActivationKey activationKey = manager.lookupByKey(newKey, admin);
        assertNotNull(activationKey);

        int status = keyHandler.checkConfigDeployment(admin, newKey);
        //deployment status disabled by default
        assertEquals(status, 0);

        keyHandler.enableConfigDeployment(admin, newKey);
        status = keyHandler.checkConfigDeployment(admin, newKey);
        assertEquals(status, 1);
        assertTrue(activationKey.getDeployConfigs());

        keyHandler.disableConfigDeployment(admin, newKey);
        status = keyHandler.checkConfigDeployment(admin, newKey);
        assertEquals(status, 0);
        assertFalse(activationKey.getDeployConfigs());

        try {
            status = keyHandler.checkConfigDeployment(admin, "invalidkey");
        }
        catch (Exception e) {
            // great!.. Exception received on error...
        }
    }
}
