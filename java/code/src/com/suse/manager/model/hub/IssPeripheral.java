/*
 * Copyright (c) 2024--2025 SUSE LLC
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 */
package com.suse.manager.model.hub;

import com.redhat.rhn.domain.BaseDomainHelper;
import com.redhat.rhn.domain.credentials.HubSCCCredentials;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

@Entity
@Table(name = "suseISSPeripheral")
public class IssPeripheral extends BaseDomainHelper implements IssServer {
    private Long id;
    private String fqdn;
    private String rootCa;
    private HubSCCCredentials mirrorCredentials;
    private Set<IssPeripheralChannels> peripheralChannels;

    protected IssPeripheral() {
        peripheralChannels = new HashSet<>();
        // Default empty Constructor for Hibernate
    }

    @Transient
    public IssRole getRole() {
        return IssRole.PERIPHERAL;
    }

    /**
     * Constructor
     * @param fqdnIn the FQDN of the Peripheral Server
     */
    public IssPeripheral(String fqdnIn) {
        this (fqdnIn, null);
    }

    /**
     * Constructor
     * @param fqdnIn the FQDN of the Peripheral Server
     * @param rootCaIn the root CA used by the Peripheral Server
     */
    public IssPeripheral(String fqdnIn, String rootCaIn) {
        fqdn = fqdnIn;
        rootCa = rootCaIn;
        mirrorCredentials = null;
        peripheralChannels = new HashSet<>();
    }

    /**
     * @return return the ID
     */
    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Get the FQDN of the Peripheral Server
     * @return return the FQDN of the Peripheral Server
     */
    @Column(name = "fqdn", unique = true)
    @Override
    public String getFqdn() {
        return fqdn;
    }

    /**
     * Get the configured Root CA
     * @return return the root ca
     */
    @Column(name = "root_ca")
    @Override
    public String getRootCa() {
        return rootCa;
    }

    /**
     * Get the mirror credentials.
     * @return the credentials
     */
    @ManyToOne(targetEntity = HubSCCCredentials.class)
    @JoinColumn(name = "mirror_creds_id")
    public HubSCCCredentials getMirrorCredentials() {
        return mirrorCredentials;
    }

    /**
     * @return return channels which should be synced to the peripheral server
     */
    @OneToMany(mappedBy = "peripheral", fetch = FetchType.LAZY)
    public Set<IssPeripheralChannels> getPeripheralChannels() {
        return peripheralChannels;
    }

    /*
     * will be autogenerated
     */
    protected void setId(Long idIn) {
        id = idIn;
    }

    /**
     * @param fqdnIn the FQDN
     */
    @Override
    public void setFqdn(String fqdnIn) {
        fqdn = fqdnIn;
    }

    /**
     * @param rootCaIn the root ca
     */
    @Override
    public void setRootCa(String rootCaIn) {
        rootCa = rootCaIn;
    }

    /**
     * @param mirrorCredentialsIn the mirror credentials
     */
    public void setMirrorCredentials(HubSCCCredentials mirrorCredentialsIn) {
        mirrorCredentials = mirrorCredentialsIn;
    }

    public void setPeripheralChannels(Set<IssPeripheralChannels> peripheralChannelsIn) {
        peripheralChannels = peripheralChannelsIn;
    }

    @Override
    public boolean equals(Object oIn) {
        if (this == oIn) {
            return true;
        }
        if (!(oIn instanceof IssPeripheral issPer)) {
            return false;
        }
        return Objects.equals(getFqdn(), issPer.getFqdn()) &&
                Objects.equals(getRootCa(), issPer.getRootCa()) &&
                Objects.equals(getMirrorCredentials(), issPer.getMirrorCredentials());
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(getFqdn()).append(getRootCa()).append(getMirrorCredentials()).toHashCode();
    }

    @Override
    public String toString() {
        return "IssPeripheral{" +
                "id=" + id +
                ", fqdn='" + fqdn + '\'' +
                '}';
    }
}
