<!--
   Queries in this file are related to the storing, maintaining, and retrieving of
   log information on asynchronous SSM operations.
-->

<datasource_modes>

<!-- Loads all SSM operation details associated with the user regardless of status. In
     addition, this query will return the number of servers involved in each operation. -->
<mode name="find_all_operations" class="com.redhat.rhn.frontend.dto.OperationDetailsDto">
  <query params="user_id">
     SELECT op.id,
            op.description,
            op.status,
            op.started,
            op.modified,
            (SELECT COUNT(server_id)
               FROM rhnSsmOperationServer ops
              WHERE ops.operation_id = op.id) as server_count
       FROM rhnSsmOperation op
      WHERE op.user_id = :user_id
   ORDER BY op.modified DESC
  </query>
</mode>

<!-- Loads SSM operation details associated with the user for operations that match the
     given status. In addition, this query will return the number of servers involved in
     each operation.

     The values for status should be taken from the enumeration SsmOperationStatus.
     -->
<mode name="find_operations_with_status" class="com.redhat.rhn.frontend.dto.OperationDetailsDto">
   <query params="user_id, status">
      SELECT op.id,
             op.description,
             op.status,
             op.started,
             op.modified,
             (SELECT COUNT(server_id)
                FROM rhnSsmOperationServer ops
               WHERE ops.operation_id = op.id) as server_count
        FROM rhnSsmOperation op
       WHERE op.status = :status
         AND op.user_id = :user_id
    ORDER BY op.modified DESC
   </query>
</mode>

<!-- Loads the SSM operation details identified by the given user and operation ID. -->
<mode name="find_operation_by_id" class="com.redhat.rhn.frontend.dto.OperationDetailsDto">
   <query params="user_id, op_id">
      SELECT op.id,
             op.description,
             op.status,
             op.started,
             op.modified
        FROM rhnSsmOperation op
       WHERE op.id = :op_id
         AND op.user_id = :user_id
   </query>
</mode>

<!-- Returns the next value in the operation sequence. -->
<mode name="get_seq_nextval">
   <query>
      SELECT sequence_nextval('rhn_ss_op_seq') AS nextval
        FROM dual
   </query>
</mode>

<!-- Adds a new SSM operation to be tracked, defaulting the created and modified values.

     The values for status should be taken from the enumeration SsmOperationStatus.
     -->
<write-mode name="create_operation">
   <query params="op_id, user_id, description, status">
      INSERT
        INTO rhnSsmOperation
             (id, user_id, description, status, started, modified)
      VALUES (
             :op_id,
             :user_id,
             :description,
             :status,
             current_timestamp,
             current_timestamp
             )
   </query>
</write-mode>

<!-- adds sids for which servers we want to work on -->
<write-mode name="map_sids_to_operation">
   <query params="op_id, user_id">
      INSERT  INTO   rhnSsmOperationServer( operation_id, server_id)
             (
             select :op_id, S.id
             from rhnServer S inner join rhnUserServerPerms USP on S.id = USP.server_id
             where S.id in (%s)
             	   AND user_id = :user_id
		   and S.id not in
             	   (
                    SELECT sos.server_id
                      FROM rhnSsmOperationServer sos
                     WHERE sos.operation_id = :op_id
                       AND sos.server_id = s.id
		   )
             )
   </query>
</write-mode>

<!-- Updates the status of the given operation.

     The values for status should be taken from the enumeration SsmOperationStatus.
     -->
<write-mode name="update_status">
   <query params="user_id, op_id, status">
      UPDATE rhnSsmOperation
         SET status = :status,
             modified = current_timestamp
       WHERE id = :op_id
         AND user_id = :user_id
   </query>
</write-mode>

<!-- Creates a mapping between an operation (rhnSsmOperation) and the servers on which
     the operation is performed (rhnServer). This query will take the server IDs from
     an RhnSet and will check to ensure the mapping doesn't already exist.

     This call assumes the server IDs are stored in the set's "element" field.
     -->
<write-mode name="map_servers_to_operation">
   <query params="op_id, user_id, set_label">
      INSERT INTO rhnSsmOperationServer (operation_id, server_id)
             (
             SELECT DISTINCT :op_id, s.element
               FROM rhnSet s
              WHERE label = :set_label
                AND user_id = :user_id
                AND s.element NOT IN
                    (
                    SELECT sos.server_id
                      FROM rhnSsmOperationServer sos
                     WHERE sos.operation_id = :op_id
                       AND sos.server_id = s.element
                    )
             )
   </query>
</write-mode>

<!-- Returns a list of all servers involved in the operation identified by the given ID. -->
<mode name="find_server_data_for_operation_id" class="com.redhat.rhn.frontend.dto.ServerOperationDataDto">
   <query params="op_id">
      SELECT s.id, s.name, sos.note
        FROM rhnSsmOperationServer sos,
             rhnServer s
       WHERE sos.operation_id = :op_id
         AND s.id = sos.server_id
   </query>
</mode>

<!-- Adds a note to an operation-server pair. -->
<write-mode name="add_note_to_operation_on_server">
   <query params="op_id, server_id, note">
      UPDATE rhnSsmOperationServer
         SET note = :note
       WHERE operation_id = :op_id
         AND server_id = :server_id
   </query>
</write-mode>
</datasource_modes>
