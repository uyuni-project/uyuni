#!/usr/bin/python3
import argparse
import configparser
import os
import re
import urllib.parse
import urllib.request
import xml.etree.ElementTree as ET

BASE_PRJ = "systemsmanagement:Uyuni"
STABLE_PRJ = BASE_PRJ + ":Stable"
MASTER_PRJ = BASE_PRJ + ":Master"
MASTER_PRJ_OTHER = BASE_PRJ + ":Master:Other"
MASTER_PRJ_KIT = BASE_PRJ + ":Master:Kit"
URL_PRJ = "https://www.uyuni-project.org/"


def obs_urlopen(url, user, password, method='GET', data=None):
    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, url, user, password)
    auth_handler = urllib.request.HTTPBasicAuthHandler(password_mgr)
    opener = urllib.request.build_opener(auth_handler)
    urllib.request.install_opener(opener)
    if data is not None:
        if isinstance(data, str):
            data = bytes(data, "utf-8")
        else:
            data = urllib.parse.urlencode(data, doseq=True).encode("utf-8")
        req = urllib.request.Request(url=url, data=data, method=method)
    else:
        req = urllib.request.Request(url)
    if method == 'PUT':
        req.add_header('Content-Type', 'application/octet-stream')
    resource = urllib.request.urlopen(req)
    charset = resource.headers.get_content_charset()
    if charset is None:
        charset = 'utf-8'
    return(resource.read().decode(charset))


def copy_merge_prjconf(args, dprj, prjs):
    prjconfig = ''
    for prj in prjs:
        print("Reading and merging prjconf from %s..." % prj)
        prjconfig += obs_urlopen(args.obsurl + "/source/" +
                                 prj + "/_config", args.user, args.password)
        prjconfig += '\n\n'
    obs_urlopen(args.obsurl + "/source/" + dprj + "/_config",
                args.user, args.password, 'PUT', prjconfig)
    # We need this as a project returns 404 while it's being
    # created after sending the meta information
    code = None
    while code is None:
        try:
            ret = obs_urlopen(args.obsurl + "/source/" + dprj + "/_config",
                              args.user, args.password, 'PUT', prjconfig)
        except urllib.error.HTTPError as err:
            if err.code == 404:
                continue
            else:
                raise
        except:
            raise
        else:
            code = ET.fromstring(ret).attrib['code']


def copy_all_packages(args, dprj, prjs):
    for prj in prjs:
        print("Copying packages from %s..." % prj)
        for package in ET.fromstring(obs_urlopen(args.obsurl + "/source/" + prj, args.user, args.password)):
            # Ignore packages autogenerated by 000product or _product
            if re.search('(000product|_product):.*', package.attrib['name']):
                print("Ignoring " + package.attrib['name'])
                continue
            rev = ET.fromstring(obs_urlopen(args.obsurl + "/source/" + prj + "/" +
                                            package.attrib['name'] + "?rev=latest", args.user, args.password)).attrib['rev']
            data = {'comment': 'Promoted from ' + prj + '/' +
                    package.attrib['name'] + ' revision ' + rev, 'opackage': package.attrib['name'], 'oproject': prj, 'cmd': 'copy', 'orev': rev}
            meta = ET.fromstring(obs_urlopen(args.obsurl + "/source/" + prj +
                                             "/" + package.attrib['name'] + '/_meta', args.user, args.password))
            meta.set('project', dprj)
            meta = ET.tostring(meta).decode()
            print("Copying %s/%s revision %s..." %
                  (prj, package.attrib['name'], rev))
            obs_urlopen(args.obsurl + "/source/" + dprj + '/' +
                        package.attrib['name'] + '/_meta', args.user, args.password, 'PUT', meta)
            obs_urlopen(args.obsurl + "/source/" + dprj + '/' +
                        package.attrib['name'], args.user, args.password, 'POST', data)


def clean_packages(args, dprj, prjs, keep_removed):
    opackages = []
    dpackages = []
    rpackages = []
    for prj in prjs:
        for package in ET.fromstring(obs_urlopen(args.obsurl + "/source/" + prj, args.user, args.password)):
            opackages.append(package.attrib['name'])
    for package in ET.fromstring(obs_urlopen(args.obsurl + "/source/" + dprj, args.user, args.password)):
        dpackages.append(package.attrib['name'])
    for dpackage in dpackages:
        if dpackage in opackages:
            continue
        else:
            rpackages.append(dpackage)
    if len(rpackages) > 0:
        print("The following packages from %s are not present at %s" %
              (dprj, ' '.join(prjs)))
        for package in rpackages:
            print(package)
        if not keep_removed:
            print("As --keep_removed is not present, the packages will be removed")
        for package in rpackages:
            data = {'comment': 'Package removed for %s submission' % args.uyuniver}
            obs_urlopen(args.obsurl + "/source/" + prj + '/' +
                        package, args.user, args.password, 'DELETE', data)


def create_meta_repo(args, meta, name, projects, own=False):
    repo = ET.SubElement(meta, 'repository', name=name)
    for project, repository in projects.items():
        if meta.get('name') == project and not own:
            continue
        ET.SubElement(repo, 'path', project=project, repository=repository)
    for arch in args.archs:
        ET.SubElement(repo, 'arch').text = arch


def add_meta(args, dprj, vprj, prjs):
    meta = ET.Element('project', name=dprj)
    doc = ET.ElementTree(meta)
    title = 'Uyuni release ' + args.uyuniver
    # This is a snapshot project
    if dprj == vprj:
        title += ' (Snapshot)'
    ET.SubElement(meta, 'title').text = title
    ET.SubElement(meta, 'description')
    ET.SubElement(meta, 'url').text = URL_PRJ
    ET.SubElement(meta, 'person', userid=args.user, role='maintainer')
    projects = {dprj: "openSUSE_Leap_" + args.leapver,
                MASTER_PRJ_KIT: "openSUSE_Leap_" + args.leapver,
                "openSUSE:Leap:%s:Update" % args.leapver: 'standard'}
    create_meta_repo(args, meta, "openSUSE_Leap_" + args.leapver, projects)
    create_meta_repo(args, meta, "images", projects, own=True)
    meta = ET.tostring(meta).decode()
    print("Configuring meta for the project...")
    obs_urlopen(args.obsurl + "/source/" + dprj + '/_meta',
                args.user, args.password, 'PUT', meta)


def prjExists(args, prj):
    try:
        obs_urlopen(args.obsurl + "/source/" + prj +
                    '/_meta', args.user, args.password)
        return(True)
    except urllib.error.HTTPError as err:
        if err.code == 404:
            return(False)
        else:
            raise


def removeProject(args, prj, force=False):
    data = {'force': 1}
    print("Removing %s..." % prj)
    obs_urlopen(args.obsurl + "/source/" + prj,
                args.user, args.password, 'DELETE', data)


def project_is_locked(args, prj):
    try:
        tree = ET.fromstring(obs_urlopen(
            args.obsurl + "/build/" + prj + "/_result", args.user, args.password))
    except urllib.error.HTTPError as err:
        if err.code == 404:
            return(False)
    if tree is None:
        return(False)
    if tree.find("result/status[@code='locked']"):
        return(True)
    return(False)


def main():
    parser = argparse.ArgumentParser(
        description="Release a new Uyuni version to %s and a new directory %s:Snapshots:X:Y.Z" % (MASTER_PRJ, BASE_PRJ))
    parser.add_argument("-U", "--user", action="store", dest="user",
                        help="OBS Username or read from ~/.oscrc")
    parser.add_argument("-P", "--password", action="store", dest="password",
                        help="OBS Password or read from ~/.oscrc")
    parser.add_argument("-u", "--uyuni-version", action="store", dest="uyuniver",
                        help="The Uyunu major version to be released (e.g. 4.0.0)")
    parser.add_argument("-l", "--leap-version", action="store", dest="leapver",
                        help="The Leap version for the base system (Default: 42.3)",
                        default="42.3")
    parser.add_argument("-O", "--obs-url", action="store", dest="obsurl",
                        default="https://api.opensuse.org",
                        help="OBS URL (Default: https://api.opensuse.org")
    parser.add_argument("-a", "--archs", action="store", dest="archs",
                        help="Comma separated list of architectures (x86_64 by default)",
                        default="x86_64")
    parser.add_argument("--force", action="store_true", dest="force",
                        help="If present, removes the version project, and recreates it again",
                        default=False)
    parser.add_argument("--keep-removed", action="store_true", dest="keep_removed",
                        help="If present, keeps the packages removed from %s and %s"
                        % (MASTER_PRJ, MASTER_PRJ_OTHER), default=False)
    args = parser.parse_args()
    if not args.uyuniver:
        raise RuntimeError('The new Uyuni version is mandatory')
    if not args.user or not args.password:
        try:
            creds_path = "%s/.oscrc" % os.path.expanduser('~')
            creds = configparser.ConfigParser()
            creds.read(creds_path)
            args.user = creds.get(args.obsurl, 'user')
            args.password = creds.get(args.obsurl, 'pass')
        except Exception as e:
            raise RuntimeError(
                'Could not find credentials for %s at %s' % (args.obsurl, creds_path))
    args.archs = args.archs.split(',')
    vprj = BASE_PRJ + ':Snapshots:' + args.uyuniver
    prjsAll = [MASTER_PRJ, MASTER_PRJ_OTHER, MASTER_PRJ_KIT]
    prjsCopy = [MASTER_PRJ, MASTER_PRJ_OTHER]
    prjsPublish = [vprj, STABLE_PRJ]

    for prj in prjsPublish:
        if project_is_locked(args, prj):
            raise RuntimeError(
                "Project %s is locked, unlock it first with 'osc unlock %s', and then wait until all packages are unlocked" % (prj, prj))

    if prjExists(args, vprj):
        if not args.force:
            raise RuntimeError(
                'Project %s already exists and --force is not enabled' % vprj)
        else:
            print('WARNING! Project %s will be removed and recreated!' % vprj)
            removeProject(args, vprj, force=True)
    for prj in prjsPublish:
        print(
            "########################## Publishing %s... ##########################" % prj)
        # Meta: Enable repos for Leap version, add systemsmanagement:Uyuni:Master:Kit as dependency
        # This gets the project created
        add_meta(args, prj, vprj, prjsCopy)
        # Copy and merge prjconfigs
        copy_merge_prjconf(args, prj, prjsCopy)
        # Copy packages from systemsmanagement:Uyuni:Master and systemsmanagement:Uyuni:Master:Other
        copy_all_packages(args, prj, prjsCopy)
        # Evaluate and clean removed packages, if required
        clean_packages(args, prj, prjsCopy, args.keep_removed)
        # Wait until everything is built and lock
    print("All packages submitted!")
    print("After all packages are built at %s, remember to lock the projects with:" % (
        ' and '.join(prjsPublish)))
    for prj in prjsPublish:
        print("osc lock %s" % (prj))


if __name__ == "__main__":
    try:
        main()
    except RuntimeError as e:
        print("ERROR: %s" % e)
    except Exception as e:
        print("ERROR: %s" % e)
        raise
