{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "Popup";
    import "Stage";
    import "Wizard";

    string dir		= Directory::tmpdir;
    string env_file	= "/root/setup_env.sh";
    string logfile	= "/var/log/susemanager_setup.log";
    string errfile	= "/var/log/susemanager_setup.err";
    any ret		= `back;

    map display_info	= UI::GetDisplayInfo ();
    boolean text_mode	= display_info["TextMode"]:false;

    foreach (string file, [ env_file, logfile, errfile], {
        if (FileUtils::Exists (file))
	{
	    SCR::Execute (.target.remove, file);
	}
    });
    SCR::Execute (.target.bash, sformat ("/usr/bin/touch %1; /bin/chmod 0600 %1;", env_file));

    string migration_file	= Directory::tmpdir + "/susemanager_migration";
    boolean migration		= FileUtils::Exists (migration_file);

    foreach (string file, [ "env_migration", "env_manager", "env_db", "env_cert", "env_cc"], {
	string file_path	= sformat ("%1/%2", dir, file);
	if (FileUtils::Exists (file_path))
	{
	    SCR::Execute (.target.bash, sformat ("cat %1 >> %2", file_path, env_file));
	}
    });


    term cont	= `VBox (
	`VSpacing (0.4),
	`ReplacePoint (`id (`rp_label),
	    // text label
	    `Label (`id (`label), _("Setup is prepared."))
	),
	text_mode ? `VBox (
	    // label
	    `Left (`Label (_("Setup script output"))),
	    `LogView (`id (`stdout), "", 6, 0),
	    `VSpacing (0.4),
	    // label
	    `Left (`Label (_("Error output"))),
	    `LogView (`id (`stderr), "", 2, 0)
	) : `VBox (
	    // label
	    `Left (`Label (_("Setup script output"))),
	    `VWeight (3, `LogView (`id (`stdout), "", 8, 0)),
	    `VSpacing (0.4),
	    // label
	    `Left (`Label (_("Error output"))),
	    `VWeight (1, `LogView (`id (`stderr), "", 4, 0))
	)
    );

    if (migration)
    {
	cont	= `VBox (
	    `VSpacing (2),
	    // text label
	    `Label (_("Now you can start the migration process using the migration.sh script.
View the available options with /usr/lib/susemanager/bin/migration.sh -h

Be aware that this process can take more than 10 hours,
depending on the configuration of you Satellite server.

For more information of how to migrate a Satellite server,
refer to the SUSE Manager Quick Start.")),
	    `VSpacing (2)
	);
    }

    term contents = `HBox (`HSpacing (1), `VBox (
	`VSpacing (0.4),
	cont,
	`VSpacing (0.4)
    ), `HSpacing (1));

    string help_text	= migration ? "" :
	// help text
	 _("<p>Now, the configuration script is running, and it will take some time.</p>
<p>The script output and possible error output can be watched on the screen.</p>");

    // dialog caption
    Wizard::SetContents (_("Write Settings"), contents, help_text, true, true);

    while (migration)
    {
	ret	= UI::UserInput ();
	if (ret == `abort && !Popup::ConfirmAbort (`incomplete))
	{
	    continue;
	}
	else
	{
	    return ret;
	}
    }

    if (!Popup::YesNo (_("All data is collected. Run setup now?")))
    {
	return ret;
    }

    UI::ReplaceWidget (`id (`rp_label),
	// text label
	`Label (`id (`label), _("Setup is running. Please wait..."))
    );

    integer pid	= -1;

    void update_output () {

	string line = (string)SCR::Read (.process.read_line, pid);
	if (line != nil && line != "")
	    UI::ChangeWidget (`id(`stdout), `LastLine, line + "\n");
	string err = (string)SCR::Read (.process.read_line_stderr, pid);
	if (err!= nil && err != "")
	    UI::ChangeWidget (`id(`stderr), `LastLine, err + "\n");
    }

    UI::BusyCursor ();
    Wizard::DisableNextButton ();
    Wizard::DisableBackButton ();

    string cmd	= sformat ("/usr/lib/susemanager/bin/migration.sh -s");
    pid	= (integer) SCR::Execute (.process.start_shell, cmd);
    integer status = 0;

    while (true)
    {
	ret = (symbol) UI::PollInput();
	if (SCR::Read(.process.running, pid) != true)
	{
	    update_output ();
	    // explicitely check the process buffer after exit (bnc#488799)
	    string buf   = (string) SCR::Read (.process.read, pid);
	    string err_buf	= (string) SCR::Read (.process.read_stderr, pid);
	    if (buf != nil && buf != "")
		UI::ChangeWidget (`id(`stdout), `LastLine, buf + "\n");
	    if (err_buf != nil && err_buf != "")
		UI::ChangeWidget (`id(`stderr), `LastLine, err_buf + "\n");

	    status	= (integer) SCR::Read (.process.status, pid);
	    y2internal ("exit status of the script: %1", status);
            // text label
            string message = _("Setup is completed.");
            if (status != 0) {
                // text label
                message = _("Setup failed.");
            }
	    UI::ReplaceWidget (`id (`rp_label),
		// text label
		`Label (`id (`label), `opt (`boldFont), message)
	    );
	    break;
	}
	else
	{
	    update_output ();
	}
	if (ret == `cancel || ret == `abort)
	{
	    SCR::Execute (.process.kill, pid, 15);
	    UI::ReplaceWidget (`id (`rp_label),
		// text label
		`Label (`id (`label), `opt (`boldFont), _("Setup has been aborted."))
	    );
	    break;
	}
	sleep (100);
    }

    SCR::Execute (.process.kill, pid);

    // save the logs
    string stdout	= (string) UI::QueryWidget (`id (`stdout), `Value);
    SCR::Write (.target.string, logfile, stdout);
    string stderr	= (string) UI::QueryWidget (`id (`stderr), `Value);
    SCR::Write (.target.string, errfile, stderr);

    UI::NormalCursor ();

    Wizard::EnableBackButton ();
    Wizard::EnableNextButton ();

    while (true)
    {
	ret	= UI::UserInput ();
	if (status != 0) {
            return nil;
        }
        if (ret == `abort && !Popup::ConfirmAbort (`incomplete))
	{
	    continue;
	}
	else
	{
	    return ret;
	}
    }
}
