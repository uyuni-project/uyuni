<!--
  ~ Copyright (c) 2022 SUSE LLC
  ~
  ~ This software is licensed to you under the GNU General Public License,
  ~ version 2 (GPLv2). There is NO WARRANTY for this software, express or
  ~ implied, including the implied warranties of MERCHANTABILITY or FITNESS
  ~ FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
  ~ along with this software; if not, see
  ~ http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
  ~
  ~ Red Hat trademarks are not licensed under GPLv2. No permission is
  ~ granted to use or replicate Red Hat trademarks that are incorporated
  ~ in this software or its documentation.
  -->
<datasource_modes>

<mode name="System" class="">
  <query params="offset, limit">
      SELECT rhnserver.id AS system_id
                 , rhnserver.name AS profile_name
                 , rhnserver.hostname
                 , suseminioninfo.minion_id
                 , suseminioninfo.os_family AS minion_os_family
                 , suseminioninfo.kernel_live_version AS minion_kernel_live_version
                 , rhnserver.machine_id
                 , web_contact.login AS registered_by
                 , rhnserver.created AS registration_time
                 , rhnserverinfo.checkin AS last_checkin_time
                 , rhnserver.running_kernel AS kernel_version
                 , rhnserverarch.name AS architecture
                 , web_customer.name AS organization
                 , get_hw_info_as_clob(rhnserver.id, '; ') AS hardware
        FROM rhnserver
                 LEFT JOIN suseminioninfo ON rhnserver.id = suseminioninfo.server_id
                 LEFT JOIN web_contact ON rhnserver.creator_id = web_contact.id
                 LEFT JOIN rhnserverinfo ON  rhnserver.id = rhnserverinfo.server_id
                 INNER JOIN rhnserverarch ON rhnserver.server_arch_id = rhnserverarch.id
                 INNER JOIN web_customer ON rhnserver.org_id = web_customer.id
        order by system_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemConfigChannel" class="">
    <query params="offset, limit">
          SELECT rhnserverconfigchannel.server_id AS system_id
                    , rhnserverconfigchannel.config_channel_id
                    , rhnconfigchannel.name
                    , rhnserverconfigchannel.position
            FROM rhnserverconfigchannel
                    INNER JOIN rhnconfigchannel ON rhnserverconfigchannel.config_channel_id = rhnconfigchannel.id
          order by system_id, config_channel_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemEntitlement" class="">
    <query params="offset, limit">
          SELECT rhnservergroupmembers.server_id AS system_id
                    , rhnservergroupmembers.server_group_id AS system_group_id
                    , rhnservergroup.name
                    , rhnservergroup.description
                    , rhnservergroup.group_type
                    , rhnservergrouptype.name AS group_type_name
                    , rhnservergroup.current_members
                    , web_customer.name AS organization
            FROM rhnservergroupmembers
                    INNER JOIN rhnservergroup ON rhnservergroupmembers.server_group_id = rhnservergroup.id
                    INNER JOIN web_customer ON rhnservergroup.org_id = web_customer.id
                    INNER JOIN rhnservergrouptype ON rhnservergroup.group_type = rhnservergrouptype.id
           WHERE rhnservergroup.group_type IS NOT NULL
          order by system_id, server_group_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemGroup" class="">
    <query params="offset, limit">
          SELECT rhnservergroupmembers.server_id AS system_id
                    , rhnservergroupmembers.server_group_id AS system_group_id
                    , rhnservergroup.name
                    , rhnservergroup.description
                    , rhnservergroup.current_members
                    , web_customer.name AS organization
            FROM rhnservergroupmembers
                    INNER JOIN rhnservergroup ON rhnservergroupmembers.server_group_id = rhnservergroup.id
                    INNER JOIN web_customer ON rhnservergroup.org_id = web_customer.id
           WHERE rhnservergroup.group_type IS NULL
          order by server_id, server_group_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemPrimaryAddress" class="">
    <query params="offset, limit">
          SELECT server_id AS system_id
                    , rsna4.address AS ip4_addr
                    , rsna4.netmask AS ip4_netmask
                    , rsna4.broadcast AS ip4_broadcast
                    , rsna6.address AS ip6_addr
                    , rsna6.netmask AS ip6_netmask
                    , rsna6.scope AS ip6_scope
            FROM rhnservernetinterface rsni
                    LEFT JOIN rhnservernetaddress4 rsna4 ON rsni.id = rsna4.interface_id
                    LEFT JOIN rhnservernetaddress6 rsna6 ON rsni.id = rsna6.interface_id
           WHERE id IN ( SELECT min(id)
                           FROM rhnservernetinterface
                          WHERE is_primary = 'Y'
                       GROUP BY server_id
                 )
          order by server_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemVirtualData" class="">
    <query params="offset, limit">
          SELECT rhnvirtualinstance.host_system_id
                    , rhnvirtualinstance.virtual_system_id
                    , rhnvirtualinstanceinfo.name
                    , rhnvirtualinstancetype.name AS instance_type_name
                    , rhnvirtualinstanceinfo.vcpus
                    , rhnvirtualinstanceinfo.memory_size
                    , rhnvirtualinstance.uuid
                    , rhnvirtualinstance.confirmed
                    , rhnvirtualinstancestate.name AS state_name
            FROM rhnvirtualinstance
                    INNER JOIN rhnvirtualinstanceinfo ON rhnvirtualinstance.id = rhnvirtualinstanceinfo.instance_id
                    INNER JOIN rhnvirtualinstancetype ON rhnvirtualinstanceinfo.instance_type = rhnvirtualinstancetype.id
                    INNER JOIN rhnvirtualinstancestate ON rhnvirtualinstanceinfo.state = rhnvirtualinstancestate.id
          order by host_system_id, virtual_system_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemChannel" class="">
    <query params="offset, limit">
          SELECT rhnserverchannel.server_id AS system_id
                    , rhnserverchannel.channel_id
                    , rhnchannel.name
                    , rhnchannel.description
                    , rhnchannelarch.name AS architecture_name
                    , rhnproductname.name AS product_name
                    , rhnchannel.parent_channel AS parent_channel_id
                    , rhnparentchannel.name AS parent_channel_name
            FROM rhnserverchannel
                    INNER JOIN rhnchannel ON rhnserverchannel.channel_id=rhnchannel.id
                    INNER JOIN rhnchannelarch ON rhnchannel.channel_arch_id=rhnchannelarch.id
                    LEFT JOIN rhnproductname ON rhnchannel.product_name_id=rhnproductname.id
                    LEFT JOIN rhnchannel rhnparentchannel ON rhnchannel.parent_channel=rhnparentchannel.id
          order by system_id, channel_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemOutdated" class="">
    <query params="offset, limit">
          SELECT rhnserverneededcache.server_id AS system_id
                    , count(distinct rhnpackage.name_id) AS packages_out_of_date
                    , count(rhnserverneededcache.errata_id) AS errata_out_of_date
            FROM rhnpackage, rhnserverneededcache
           WHERE rhnserverneededcache.package_id = rhnpackage.id
        GROUP BY rhnserverneededcache.server_id
          order by system_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemAction" class="">
    <query params="offset, limit">
          SELECT rhnserveraction.server_id AS system_id
                      , rhnserveraction.action_id
                      , rhnserver.hostname
                      , rhnserveraction.pickup_time
                      , rhnserveraction.completion_time
                      , rhnactionstatus.name AS status
                      , case
                          when rhnactiontype.name = 'Package Install' and rhnactionpackage.parameter = 'upgrade' then 'Package Upgrade'
                          else rhnactiontype.name
                        end as event
                      , case
                          when rhnactiontype.name = 'Patch Update' then rhnerrata.advisory
                          when rhnactiontype.name in ( 'Package Install', 'Package Removal', 'Verify deployed packages' ) then (
                                    rhnpackagename.name
                                    || case when rhnpackageevr.id is not null then '-' || evr_t_as_vre_simple(rhnpackageevr.evr) end
                                    || case when rhnpackagearch.id is not null then '.' || rhnpackagearch.label end
                          )
                          when rhnactiontype.label like 'configfiles.%' then rhnconfigfilename.path
                          when rhnactiontype.label = 'kickstart.initiate' then rhnksdata.label
                          when rhnactiontype.label = 'scap.xccdf_eval' then rhnxccdftestresult.identifier
                        end as event_data
            FROM rhnserveraction
                      LEFT JOIN rhnserver ON rhnserveraction.server_id = rhnserver.id
                      LEFT JOIN rhnaction ON rhnserveraction.action_id = rhnaction.id
                      LEFT JOIN rhnactionstatus ON rhnserveraction.status = rhnactionstatus.id
                      LEFT JOIN rhnactiontype ON rhnaction.action_type = rhnactiontype.id
                      LEFT JOIN rhnactionpackage ON rhnserveraction.action_id = rhnactionpackage.action_id
                      LEFT JOIN rhnpackagename ON rhnactionpackage.name_id = rhnpackagename.id
                      LEFT JOIN rhnpackageevr ON rhnactionpackage.evr_id = rhnpackageevr.id
                      LEFT JOIN rhnpackagearch ON rhnactionpackage.package_arch_id = rhnpackagearch.id
                      LEFT JOIN rhnactionerrataupdate ON rhnserveraction.action_id = rhnactionerrataupdate.action_id
                      LEFT JOIN rhnerrata ON rhnactionerrataupdate.errata_id = rhnerrata.id
                      LEFT JOIN rhnactionconfigrevision ON rhnserveraction.action_id = rhnactionconfigrevision.action_id and rhnserveraction.server_id = rhnactionconfigrevision.server_id
                      LEFT JOIN rhnconfigrevision ON rhnactionconfigrevision.config_revision_id = rhnconfigrevision.id
                      LEFT JOIN rhnconfigfile ON rhnconfigrevision.config_file_id = rhnconfigfile.id
                      LEFT JOIN rhnconfigfilename ON rhnconfigfile.config_file_name_id = rhnconfigfilename.id
                      LEFT JOIN rhnkickstartsessionhistory ON rhnserveraction.action_id = rhnkickstartsessionhistory.action_id
                      LEFT JOIN rhnkickstartsession ON rhnkickstartsessionhistory.kickstart_session_id = rhnkickstartsession.id
                      LEFT JOIN rhnksdata ON rhnkickstartsession.kickstart_id = rhnksdata.id
                      LEFT JOIN rhnactionscap ON rhnserveraction.action_id = rhnactionscap.action_id
                      LEFT JOIN rhnxccdftestresult ON rhnxccdftestresult.action_scap_id = rhnactionscap.id
          order by system_id, action_id offset :offset limit :limit
  </query>
</mode>

<mode name="SystemHistory" class="">
    <query params="offset, limit">
          SELECT rhnserverhistory.server_id AS system_id
                      , rhnserverhistory.id as history_id
                      , rhnserver.hostname
                      , case
                          when rhnserverhistory.summary like 'subscribed to channel %' then 'Subscribed to channel'
                          when rhnserverhistory.summary like 'unsubscribed from channel %' then 'Unsubscribed from channel'
                          when rhnserverhistory.summary like 'Updated system release %' then 'Updated system release'
                          else trim(upper(substr(rhnserverhistory.summary, 1, 1)) || substr(rhnserverhistory.summary, 2))
                        end AS event
                      , case
                          when summary in ( 'added system entitlement ', 'removed system entitlement ') then details
                          when summary like 'subscribed to channel %' then details
                          when summary like 'unsubscribed from channel %' then details
                          when summary like 'Updated system release %' then substr(summary, 24)
                        end AS event_data
                      , greatest(rhnserverhistory.created, rhnserverhistory.modified) AS event_time

            FROM rhnserverhistory
                      LEFT JOIN rhnserver ON rhnserverhistory.server_id = rhnserver.id
          order by rhnserverhistory.id offset :offset limit :limit
</query>
</mode>

</datasource_modes>
