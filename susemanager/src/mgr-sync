#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014 SUSE
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# SUSE trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate SUSE trademarks that are incorporated
# in this software or its documentation.

import sys
import socket
import optparse

from spacewalk.susemanager.mgr_sync.mgr_sync import MgrSync
from spacewalk.susemanager.mgr_sync.helpers import cli_msg
from spacewalk.susemanager.mgr_sync.config import Config


def get_options():
    """
    Create CLI option parser.
    """
    parser = optparse.OptionParser(
        version="%prog 0.1",
        description="Synchronize SUSE Manager repositories")

    parser.add_option("-l", "--list-channels", action="store_true",
                      dest="listchannels",
                      help="list all the channels which are available for you")
    parser.add_option("-p", "--list-products", action="store_true",
                      dest="listproducts",
                      help="list all the products which are available for you")
    #parser.add_option("-a", "--add-product", action="store_true",
    #                  dest="addproduct",
    #                  help="Add all mandatory channels of a product [interactive]")
    #parser.add_option("--add-product-by-ident", action="store",
    #                  dest="addproductbyident",
    #                  help="Add all mandatory channels of the product identified by the given ident")
    #parser.add_option("-c", "--add-channel", action="store", dest="addchannel",
    #                  help="Add a new channel and trigger a reposync")
    #parser.add_option("--all-childs", action="store_true", dest="allchilds",
    #                  help="Show also children, if the parent is not synced yet")
    #parser.add_option("--no-optional", action="store_true", dest="noopt",
    #                  help="Do not list optional channels")
    #parser.add_option("--filter", action="store", dest="filter",
    #                  help="Show only labels, which contains the filter word (case-insensitive)")
    parser.add_option("-r", "--refresh", action="store_true",
                      help="refresh product, channel and subscription"
                      "information without triggering any reposyncs")
    parser.add_option("-s", "--save-config", action="store_true",
                      dest="saveconfig",
                      help="Save the configuration to the local dot file.")
    #parser.add_option("-m", "--migrate_res", action="store_true",
    #                  help="migrate to RES subscriptions")
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                      help="Print no output, still logs output")
    parser.add_option('-v', '--verbose', action="store_true",  dest='verbose',
                      help="Verbose")

    return parser


if not sys.argv[1:]:
    sys.argv.append("--help")
options = get_options().parse_args()[0]

# XXX: Temporary flags while real options are not yet implemented
options.addproduct = False
options.addchannel = False
options.allchilds = False

try:
    MgrSync(Config.get_config()).run(options)
except socket.error, ex:
    cli_msg("Network error: %s" % ex, stderr=True)
    if options.verbose:
        raise
except KeyboardInterrupt, ex:
    cli_msg("\n")
except Exception, ex:
    cli_msg("General error: %s" % ex, stderr=True)
    if options.verbose:
        raise

