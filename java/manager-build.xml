<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 SUSE Manager build file for development use
 
 Builds and deploys the webapp to a SSH host running Tomcat, runs tests
 
 Requirements & configuration:
 
 https://github.com/SUSE/spacewalk/wiki/Java-Development-Environment
-->
<project name="SUSE Manager" default="deploy-restart" basedir=".">
  <!-- Import common definitions -->
  <import file="buildconf/manager-common.xml" />
  
  <!-- Define tasks -->
  <target name="init-tests">
    <property name="build.tests" value="true" />

    <condition property="testdirs.exist">
      <and>
        <available file="/usr/share/rhn/unit-tests/conf" type="dir" />
        <available file="/usr/share/rhn/config-defaults" type="dir" />
      </and>
    </condition>
  </target>

  <target name="clean" description="Cleans up all generated files">
    <delete dir="${build.dir}" quiet="true">
      <exclude name="classes/**/*" if="precompiled" />
    </delete>
    <delete dir="${test.results.dir}" />
  </target>
	
  <target name="refresh-branding-jar" depends="clean" description="Compiles and builds the SUSE branding jar">
    <mkdir dir="${build.dir}/java-branding" />

    <javac destdir="${build.dir}/java-branding"
           source="1.6"
           target="1.6"
           includeantruntime="no"
           nowarn="true"
           srcdir="${branding.src.dir}" />

    <copy toDir="${build.dir}/java-branding">
      <fileset dir="${branding.src.dir}" excludes="**/*.java" />
    </copy>

    <jar destfile="${lib.dir}/java-branding.jar" includes="">
      <fileset dir="${build.dir}/java-branding" />
    </jar>
  </target>

  <target name="compile"
          depends="clean,refresh-branding-jar"
          unless="precompiled"
          description="Compiles the main codebase"
  >
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           source="1.6"
           target="1.6"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="256m"
           includeAntRuntime="false"
           classpathref="libjars"
    >
      <src>
        <path location="code/src" />
        <path location="code/scripts/src" />
      </src>
      <exclude name="**/test/*.java" unless="build.tests" />
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </copy>
  </target>

  <target name="jar" depends="compile" description="Packs the main application jar">
    <jar destfile="${build.dir}/rhn.jar">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;  html files go as javadoc -->
        <exclude name="**/internal/**" />
        <exclude name="**/*.tld" />
        <exclude name="**/*.html" />
        <exclude name="**/*.conf" />
        <exclude name="**/*.conf.rpmsave" />
        <exclude name="**/test/" unless="build.tests" />
        <exclude name="**/*/testing/**" unless="build.tests" />
        <exclude name="**/StringResource*.xml" unless="build.tests" />
      </fileset>
      <fileset dir="${build.dir}/classes">
        <include name="**/StringResource_en_US.xml" />
      </fileset>
      <fileset dir="${src.dir}/webapp">
        <include name="**/web.xml" if="build.tests" />
        <include name="**/struts-config.xml" if="build.tests" />
      </fileset>
      <!-- Can't be flattened like in <copy>, alas -->
      <metainf dir="${build.dir}/classes/com/redhat/rhn/frontend/taglibs">
        <include name="*.tld" />
      </metainf>
    </jar>
  </target>

  <target name="webapp" depends="jar" description="Creates the Web application directory">
    <copy todir="${build.dir}/webapp">
      <fileset dir="${src.dir}/webapp">
        <exclude name="help/**" />
      </fileset>
    </copy>

    <copy todir="${build.dir}/webapp/WEB-INF/lib">
      <fileset file="${build.dir}/rhn.jar" />
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />

        <!-- Don't copy unneded jars -->
        <exclude name="**/jasper*" />
        <exclude name="**/jspapi*" />
        <exclude name="**/tomcat6*" unless="build.tests" />
      </fileset>
      <fileset dir="${rhn-home}/buildconf/tempjars">
        <include name="**/*.jar" />
      </fileset>
    </copy>

    <replace file="${build.dir}/webapp/WEB-INF/web.xml">
      <replacetoken><![CDATA[<!-- add precompiled jsp servlets -->]]></replacetoken>
      <replacevalue><![CDATA[
  <servlet-mapping>
    <servlet-name>jsp</servlet-name>
    <url-pattern>*.jsp</url-pattern>
  </servlet-mapping>
      ]]></replacevalue>
    </replace>
  </target>

  <target name="deploy" depends="webapp" description="Deploy a new copy of SUSE Manager">
    <echo message="Copying files to remote host..." />
    <exec executable="rsync">
      <arg line="-a --delete ${build.dir}/webapp/ ${deploy.user}@${deploy.host}:${deploy.dir}/" />
    </exec>

    <exec command="ssh ${deploy.user}@${deploy.host}" inputstring='
        echo "Linking the branding jar...";
        mv ${deploy.dir}/WEB-INF/lib/java-branding.jar /usr/share/rhn/lib;
        ln -sf /usr/share/rhn/lib/java-branding.jar ${deploy.dir}/WEB-INF/lib/java-branding.jar;
  
        echo "Linking the main jar for Taskomatic...";
        mv ${deploy.dir}/WEB-INF/lib/rhn.jar /usr/share/rhn/lib;
        ln -sf /usr/share/rhn/lib/rhn.jar ${deploy.dir}/WEB-INF/lib;
      '
    />
  </target>

  <target name="deploy-static-resources" description="Deploy css/js/img/font files">
    <condition property="spacewalk.upstream">
      <not>
        <available file="${basedir}/../susemanager" type="dir"/>
      </not>
    </condition>
    <condition property="static.files.dir" value="/var/www/html" else="/srv/www/htdocs">
      <isset property="spacewalk.upstream"/>
    </condition>
    <echo message="Copying css/js files to remote host...${static.files.dir}"/>
    <exec executable="rsync">
      <arg line="-a --delete ${basedir}/../branding/css/ ${deploy.user}@${deploy.host}:${static.files.dir}/css/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --delete ${basedir}/../branding/img/ ${deploy.user}@${deploy.host}:${static.files.dir}/img/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --delete ${basedir}/../web/html/javascript/ ${deploy.user}@${deploy.host}:${static.files.dir}/javascript/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --delete ${basedir}/../web/html/fonts/ ${deploy.user}@${deploy.host}:${static.files.dir}/fonts/" />
    </exec>
  </target>

  <target name="restart-tomcat" description="Restart the tomcat process">
    <exec command="ssh ${deploy.user}@${deploy.host}" inputstring='
        echo "Launching Tomcat restart...";
        nohup rctomcat6 restart > /dev/null 2>&amp;1 &amp;
      '
    />
  </target>

  <target name="restart-taskomatic" description="Restart the taskomatic process">
    <exec command="ssh ${deploy.user}@${deploy.host}" inputstring='
        echo "Launching Taskomatic restart...";
        nohup rctaskomatic restart > /dev/null 2>&amp;1 &amp;
      '
    />
  </target>

  <target name="deploy-restart" depends="deploy, restart-tomcat, restart-taskomatic" />

  <target name="deploy-images" description="Deploys images from the branding directory to the server">
    <echo message="Copying files to remote host..." />
    <exec executable="rsync">
      <arg line="-a ${branding.img.dir}/ ${deploy.user}@${deploy.host}:/srv/www/htdocs/img" />
    </exec>
  </target>

  <target name="deploy-tests" depends="init-tests,webapp" description="Deploy SUSE Manager tests">
    <echo message="Copying webapp files to remote host for running tests..." />
    <exec executable="rsync">
      <arg line="-a --delete ${build.dir}/webapp/ ${deploy.user}@${deploy.host}:${deploy.dir}/" />
    </exec>

    <exec command="ssh ${deploy.user}@${deploy.host}" inputstring='
        echo "Stopping Tomcat...";
        nohup rctomcat6 stop > /dev/null 2>&amp;1 &amp;

        echo "Linking the branding jar...";
        mv ${deploy.dir}/WEB-INF/lib/java-branding.jar /usr/share/rhn/lib;
        ln -sf /usr/share/rhn/lib/java-branding.jar ${deploy.dir}/WEB-INF/lib/java-branding.jar;

        echo "Linking the main jar for Taskomatic...";
        mv ${deploy.dir}/WEB-INF/lib/rhn.jar /usr/share/rhn/lib;
        ln -sf /usr/share/rhn/lib/rhn.jar ${deploy.dir}/WEB-INF/lib;
      '
    />
  </target>

  <target name="run-tests" depends="deploy-tests" description="Run unit tests remotely">
    <echo message="Copying files to remote host..." />
    <exec executable="scp" description="Copy ./buildconf directory to deploy host">
      <arg value="-r" />
      <arg line="buildconf ${deploy.user}@${deploy.host}:${deploy.dir}/WEB-INF" />
    </exec>
    <exec executable="scp" description="Copy test files to deploy host">
      <arg value="-r" />
      <arg line="code/src/com/redhat/rhn/common/conf/test/conf ${deploy.user}@${deploy.host}:/usr/share/rhn/unit-tests/" />
    </exec>

    <exec command="ssh ${deploy.user}@${deploy.host}" inputstring='
        cd ${deploy.dir}/WEB-INF;
        ant -f buildconf/manager-test.xml -Dlib.dir=${deploy.dir}/WEB-INF/lib -Dtest.jar=${deploy.dir}/WEB-INF/lib/rhn.jar -Dtest.configuration.path=/etc/rhn -Dtests.includes=${tests.includes} -Dtests.excludes=${tests.excludes};
      '
    />
  </target>

  <target name="init-local-tests" depends="init-tests" unless="testdirs.exist">
    <echo message="Creating directories (below /usr/share) needed for running tests" />
    <exec executable="sudo">
      <arg value="mkdir" />
      <arg value="-p" />
      <arg value="/usr/share/rhn/unit-tests" />
      <arg value="/usr/share/rhn/config-defaults" />
    </exec>
    <echo message="Copying files needed for tests" />
    <exec executable="sudo">
      <arg value="cp" />
      <arg value="-r" />
      <arg value="code/src/com/redhat/rhn/common/conf/test/conf" />
      <arg value="/usr/share/rhn/unit-tests" />
    </exec>
  </target>

  <target name="run-tests-locally" depends="init-local-tests,jar" description="Run unit tests locally">
    <property name="test.jar" value="${build.dir}/rhn.jar" />
    <property name="test.configuration.path" value="${basedir}/conf/local-tests" />
    <ant antfile="manager-test.xml" dir="buildconf"/>
  </target>

  <target name="checkstyle" depends="compile" description="Runs the checkstyle tool on sources">
    <taskdef resource="checkstyletask.properties" classpathref="libjars" />
    <checkstyle config="buildconf/checkstyle.xml">
      <classpath>
        <path location="${build.dir}/classes" />
        <path refid="libjars" />
      </classpath>
      <fileset dir="code">
        <include name="**/src/**/*.java" />
        <exclude name="**/test/*.java" />
        <exclude name="**/playpen/*.java" />
      </fileset>
      <property key="checkstyle.cache.file" file="build/${checkstyle.cache.src}" />
      <property key="checkstyle.header.file" file="buildconf/LICENSE.txt" />
      <property key="javadoc.method.scope" value="public" />
      <property key="javadoc.var.scope" value="package" />
      <property key="javadoc.type.scope" value="package" />
      <property key="javadoc.lazy" value="false" />
    </checkstyle>
  </target>
</project>
