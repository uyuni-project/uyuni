<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 SUSE Manager build file for development use

 Builds and deploys the webapp to a SSH host running Tomcat, runs tests

 Requirements & configuration:

 https://github.com/SUSE/spacewalk/wiki/Java-Development-Environment
-->
<project name="SUSE Manager" default="deploy" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- User-defined properties -->
  <property file="buildconf/manager-developer-build.properties" />

  <!-- Upstream-defined properties -->
  <import file="buildconf/build-props.xml" />

  <!-- Other properties -->
  <property name="deploy.host" value="deployhost" />
  <property name="deploy.port" value="22" />
  <property name="deploy.dir" value="/srv/tomcat/webapps/rhn" />
  <property name="deploy.user" value="root" />

  <property name="tests.includes" value="buildconf/manager-test-includes" />
  <property name="tests.excludes" value="buildconf/manager-test-excludes" />
  <property name="tests.results.dir" value="test-results"/>
  <property name="tests.coverage.results.dir" value="test-results/coverage/html"/>
  <property name="tests.coverage.destfile" value="test-results/coverage/jacoco.exec"/>
  <property name="tests.configuration.path" value="${basedir}/buildconf/test" />

  <property name="branding.dir" value="${basedir}/../branding"/>
  <property name="branding.src.dir" value="${branding.dir}/java/code/src"/>
  <property name="branding.img.dir" value="${branding.dir}/img"/>
  <property name="branding.css.dir" value="${branding.dir}/css"/>
  <property name="branding.fonts.dir" value="${branding.dir}/fonts"/>
  <property name="js.dir" value="${basedir}/../web/html/src/dist/javascript"/>
  <property name="js.vendors.dir" value="${basedir}/../web/html/src/dist/vendors"/>
  <property name="js.components.dir" value="${basedir}/../web/html/src"/>

  <property name="ssh.socket.file" value="${user.home}/.ssh/manager-build-tunnel-${deploy.host}-${deploy.user}"/>
  <property name="ssh.socket.option" value="-o ControlPath=${ssh.socket.file}"/>
  <property name="ssh.command.args" value="${ssh.socket.option} -p ${deploy.port} ${deploy.user}@${deploy.host}"/>

  <!-- Taskdefs -->
  <taskdef name="ivy-retrieve" classname="org.apache.ivy.ant.IvyRetrieve"/>

  <!-- Paths -->
  <path id="libjars">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>
  <path id="managertestjars">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
    <fileset file="${build.dir}/rhn.jar" />
  </path>

  <!-- Tasks -->
  <target name="clean" description="Cleans up all generated files">
    <delete dir="${build.dir}" quiet="true">
      <exclude name="classes/**/*" if="precompiled" />
    </delete>
    <delete dir="${test.results.dir}" />
  </target>

  <target name="ivy" description="Retrieves dependencies through ivy">
    <ivy-retrieve sync="true" />
  </target>

  <target name="refresh-branding-jar" depends="clean" description="Compiles and builds the SUSE branding jar">
    <mkdir dir="${build.dir}/java-branding" />

    <javac destdir="${build.dir}/java-branding"
           source="1.8"
           target="1.8"
           includeantruntime="no"
           nowarn="true"
           srcdir="${branding.src.dir}" />

    <copy toDir="${build.dir}/java-branding">
      <fileset dir="${branding.src.dir}" excludes="**/*.java" />
    </copy>

    <jar destfile="${lib.dir}/java-branding.jar" includes="">
      <fileset dir="${build.dir}/java-branding" />
    </jar>
  </target>

  <target name="compile"
          depends="clean"
          unless="precompiled"
          description="Compiles the main codebase"
  >
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           source="1.8"
           target="1.8"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="256m"
           includeAntRuntime="false"
           classpathref="libjars"
    >
      <src>
        <path location="code/src" />
        <path location="code/scripts/src" />
      </src>
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/src">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </copy>
  </target>

  <target name="jar" depends="compile" description="Packs the main application jar">
    <jar destfile="${build.dir}/rhn.jar">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;  html files go as javadoc -->
        <exclude name="**/internal/**" />
        <exclude name="**/*.tld" />
        <exclude name="**/*.html" />
      </fileset>
      <fileset dir="${build.dir}/classes">
        <include name="**/StringResource_en_US.xml" />
      </fileset>
      <fileset dir="${src.dir}/webapp">
        <include name="**/web.xml" />
        <include name="**/struts-config.xml" />
      </fileset>
      <!-- Can't be flattened like in <copy>, alas -->
      <metainf dir="${build.dir}/classes/com/redhat/rhn/frontend/taglibs">
        <include name="*.tld" />
      </metainf>
    </jar>
  </target>

  <target name="webapp" depends="jar" description="Creates the Web application directory">
    <copy todir="${build.dir}/webapp">
      <fileset dir="${src.dir}/webapp">
        <exclude name="help/**" />
      </fileset>
    </copy>

    <copy todir="${build.dir}/webapp/WEB-INF/lib">
      <fileset file="${build.dir}/rhn.jar" />
      <fileset dir="${lib.dir}">
        <include name="**/*.jar" />
        <exclude name="**/tomcat*-el*" />
        <exclude name="**/jasper*" />
        <exclude name="**/tomcat*-jsp*" />
        <exclude name="**/tomcat*-servlet*" />
        <exclude name="**/jspapi*" />
        <exclude name="**/websocket-api*" />
        <exclude name="**/checkstyle*" />
        <exclude name="**/jacocoant*" />
        <exclude name="**/xalan-j2-serializer*" />
      </fileset>
    </copy>
  </target>

  <target name="check-ssh-socket">
    <available file="${ssh.socket.file}" property="ssh-socket.present"/>
  </target>

  <target name="open-ssh-socket" depends="check-ssh-socket" unless="ssh-socket.present">
    <exec executable="ssh">
      <arg line="-M -f -N -C ${ssh.command.args}" />
    </exec>
  </target>

  <target name="deploy" depends="webapp, open-ssh-socket" description="Deploy a new copy of SUSE Manager">
    <echo message="Copying files to remote host..." />
    <exec executable="rsync">
      <arg line="-a --delete --rsh 'ssh ${ssh.socket.option}' ${build.dir}/webapp/ ${deploy.user}@${deploy.host}:${deploy.dir}/" />
    </exec>

    <echo message="Linking the branding jar..." />
    <exec executable="ssh">
      <arg line="${ssh.command.args} mv ${deploy.dir}/WEB-INF/lib/java-branding.jar /usr/share/rhn/lib"/>
    </exec>

    <exec executable="ssh">
      <arg line="${ssh.command.args} ln -sf /usr/share/rhn/lib/java-branding.jar ${deploy.dir}/WEB-INF/lib/java-branding.jar"/>
    </exec>

    <echo message="Linking jars for Taskomatic..."/>
    <exec executable="ssh">
      <arg line="${ssh.command.args} ln -sf ${deploy.dir}/WEB-INF/lib/*.jar /usr/share/spacewalk/taskomatic"/>
    </exec>
    <exec executable="ssh">
      <arg line="${ssh.command.args} mv ${deploy.dir}/WEB-INF/lib/rhn.jar /usr/share/rhn/lib"/>
    </exec>
    <exec executable="ssh">
      <arg line="${ssh.command.args} ln -sf /usr/share/rhn/lib/rhn.jar ${deploy.dir}/WEB-INF/lib"/>
    </exec>

  </target>

  <target name="is-yarn-installed">
    <property environment="env" />
    <available file="yarn"
               filepath="${env.PATH}"
               property="yarn.installed"/>
  </target>

  <target name="warn-if-yarn-not-installed" depends="is-yarn-installed" unless="yarn.installed">
    <fail>yarn is not in the PATH. Please install yarn first.</fail>
  </target>

  <target name="deploy-static-resources" depends="open-ssh-socket,warn-if-yarn-not-installed" description="Deploy css/js/img/font files">
    <condition property="spacewalk.upstream">
      <not>
        <available file="${basedir}/../susemanager" type="dir"/>
      </not>
    </condition>
    <condition property="static.files.dir" value="/var/www/html" else="/srv/www/htdocs">
      <isset property="spacewalk.upstream"/>
    </condition>
    <echo message="Calling yarn build ..."/>
    <exec executable="yarn" dir="${js.components.dir}">
      <arg line="build"/>
    </exec>

    <echo message="Copying css/js files to remote host...${static.files.dir}"/>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${branding.css.dir}/ ${deploy.user}@${deploy.host}:${static.files.dir}/css/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${branding.img.dir}/ ${deploy.user}@${deploy.host}:${static.files.dir}/img/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${branding.fonts.dir}/ ${deploy.user}@${deploy.host}:${static.files.dir}/fonts/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${js.dir}/ ${deploy.user}@${deploy.host}:${static.files.dir}/javascript/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${js.vendors.dir}/ ${deploy.user}@${deploy.host}:${static.files.dir}/vendors/" />
    </exec>
  </target>

  <target name="deploy-salt-files" depends="open-ssh-socket" description="Deploy Salt files">
    <condition property="spacewalk.upstream">
      <not>
        <available file="${basedir}/../susemanager" type="dir"/>
      </not>
    </condition>
    <property name="salt.state.files.dir" value="/usr/share/susemanager/salt"/>
    <property name="salt.reactor.files.dir" value="/usr/share/susemanager/reactor"/>

    <echo message="Copying Salt sls files to remote host...${salt.state.files.dir}"/>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${basedir}/../susemanager-utils/susemanager-sls/salt/ ${deploy.user}@${deploy.host}:${salt.state.files.dir}/" />
    </exec>
    <echo message="Copying Salt grains, beacons, and modules to remote host...${salt.state.files.dir}"/>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${basedir}/../susemanager-utils/susemanager-sls/src/grains/ ${deploy.user}@${deploy.host}:${salt.state.files.dir}/_grains/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${basedir}/../susemanager-utils/susemanager-sls/src/beacons/ ${deploy.user}@${deploy.host}:${salt.state.files.dir}/_beacons/" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${basedir}/../susemanager-utils/susemanager-sls/src/modules/ ${deploy.user}@${deploy.host}:${salt.state.files.dir}/_modules/" />
    </exec>
    <echo message="Copying Salt reactor to remote host...${salt.reactor.files.dir}"/>
    <exec executable="rsync">
      <arg line="-a --rsh 'ssh ${ssh.socket.option}' ${basedir}/../susemanager-utils/susemanager-sls/reactor/ ${deploy.user}@${deploy.host}:${salt.reactor.files.dir}/" />
    </exec>
  </target>

  <target name="restart-tomcat" depends="open-ssh-socket" description="Restart the tomcat process">
    <echo message="Launching Tomcat restart..."/>
    <exec executable="ssh">
      <arg line="${ssh.command.args} nohup rctomcat restart > /dev/null 2>&amp;1 &amp;"/>
    </exec>
  </target>

  <target name="restart-taskomatic" depends="open-ssh-socket" description="Restart the taskomatic process">
    <echo message="Launching Taskomatic restart..."/>
    <exec executable="ssh">
      <arg line="${ssh.command.args}  nohup rctaskomatic restart > /dev/null 2>&amp;1 &amp;"/>
    </exec>
  </target>

  <target name="deploy-restart" depends="deploy, restart-tomcat" />

  <target name="test" depends="jar" description="Run unit tests">
    <mkdir dir="${tests.results.dir}" />

    <loadfile property="tests.includes.text" srcFile="${tests.includes}"/>
    <loadfile property="tests.excludes.text" srcFile="${tests.excludes}"/>
    <echo message="Running tests including:" />
    <echo message="${tests.includes.text}" />
    <echo message="and excluding:" />
    <echo message="${tests.excludes.text}" />

    <junit fork="yes" forkmode="once" maxmemory="256m" dir="${basedir}/buildconf"
	    failureproperty="junit_failed">
      <sysproperty key="rhn-home" value="." />
      <sysproperty key="java.awt.headless" value="true" />
      <sysproperty key="log4j.threshold" value="warn" />
      <sysproperty key="rhn.config.dir" value="${tests.configuration.path}" />

      <jvmarg value="-ea" />
      <classpath refid="managertestjars" />
      <formatter type="xml" usefile="true" />
      <formatter type="brief" usefile="false" />
      <batchtest todir="${tests.results.dir}">
        <zipfileset src="${build.dir}/rhn.jar" includesfile="${tests.includes}" excludesfile="${tests.excludes}" />
      </batchtest>
    </junit>
  </target>

  <target name="test-pr" depends="test" description="Run unit tests for Pull Requests">
    <fail if="junit_failed"/>
  </target>

  <target name="checkstyle" depends="compile" description="Runs the checkstyle tool on sources">
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="libjars" />
    <checkstyle config="buildconf/checkstyle.xml">
      <classpath>
        <path location="${build.dir}/classes" />
        <path refid="libjars" />
      </classpath>
      <fileset dir="code">
        <include name="**/src/**/*.java" />
        <exclude name="**/test/*.java" />
        <exclude name="**/playpen/*.java" />
        <exclude name="**/MenuTree.java" />
      </fileset>
      <property key="checkstyle.cache.file" file="${checkstyle.cache.src}" />
      <property key="checkstyle.header.file" file="buildconf/LICENSE.txt" />
      <property key="javadoc.method.scope" value="public" />
      <property key="javadoc.var.scope" value="package" />
      <property key="javadoc.type.scope" value="package" />
      <property key="javadoc.lazy" value="false" />
    </checkstyle>
  </target>

  <target name="test-coverage" depends="jar" description="Measure unit test coverage">
    <taskdef resource="org/jacoco/ant/antlib.xml" classpathref="libjars" />

    <loadfile property="tests.includes.text" srcFile="${tests.includes}"/>
    <loadfile property="tests.excludes.text" srcFile="${tests.excludes}"/>
    <echo message="Running tests with coverage including:" />
    <echo message="${tests.includes.text}" />
    <echo message="and excluding:" />
    <echo message="${tests.excludes.text}" />

    <coverage destfile="${tests.coverage.destfile}">
      <junit fork="yes" forkmode="once" maxmemory="256m" dir="${basedir}/buildconf">
        <sysproperty key="rhn-home" value="." />
        <sysproperty key="java.awt.headless" value="true" />
        <sysproperty key="log4j.threshold" value="warn" />
        <sysproperty key="rhn.config.dir" value="${tests.configuration.path}" />

        <jvmarg value="-ea" />
        <classpath refid="managertestjars" />
        <formatter type="xml" usefile="true" />
        <formatter type="brief" usefile="false" />
        <batchtest todir="${tests.results.dir}">
          <zipfileset src="${build.dir}/rhn.jar" includesfile="${tests.includes}" excludesfile="${tests.excludes}" />
        </batchtest>
      </junit>
    </coverage>
  </target>

  <target name="test-coverage-report" description="Generate the unit test coverage report in html">
    <taskdef resource="org/jacoco/ant/antlib.xml" classpathref="libjars" />
    <report>
      <executiondata>
        <file file="${tests.coverage.destfile}"/>
      </executiondata>
      <structure name="Suse Manager">
        <classfiles>
          <fileset dir="${build.dir}/classes">
            <exclude name="**/*Test*.class" />
            <exclude name="**/test/*.class" />
          </fileset>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="code/src"/>
        </sourcefiles>
      </structure>
      <html destdir="${tests.coverage.results.dir}"/>
    </report>
  </target>

</project>
