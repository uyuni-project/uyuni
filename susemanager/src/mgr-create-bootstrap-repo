#! /usr/bin/python
from __future__ import print_function
import sys
import os
import shutil
from spacewalk.server import rhnSQL
from spacewalk.common import usix
from spacewalk.common.rhnConfig import CFG, initCFG
from optparse import OptionParser
import textwrap

msg_wrapper = textwrap.TextWrapper()
msg_wrapper.initial_indent = '- '
msg_wrapper.width = 75
msg_wrapper.subsequent_indent = '  '

sys.path.append("/usr/share/susemanager")

initCFG('server.susemanager')
rhnSQL.initDB()

basepath = CFG.MOUNT_POINT or '/var/spacewalk'

_sql_synced_proucts = rhnSQL.Statement("""
SELECT distinct sp.product_id as id
FROM suseProducts sp
JOIN suseProductChannel spc ON sp.id = spc.product_id
WHERE spc.channel_id IS NOT NULL
""")

_sql_find_pkgs = """
SELECT distinct
        pkg.id AS id,
        PN.name || '-' || evr_t_as_vre_simple(full_list.evr) || '.' || full_list.arch_label AS nvrea,
        full_list.arch_label AS arch,
        pkg.path
  FROM  (
         SELECT  p.name_id name_id,
                 max(pe.evr) evr,
                 pa.id as arch_id,
                 pa.label as arch_label
           FROM  rhnPackageArch PA, rhnPackageEVR PE, rhnPackage P,
                 rhnChannelNewestPackage CNP, suseProductChannel PC,
                 suseProducts sp
          WHERE  sp.product_id in ( %s )
            AND  sp.id = pc.product_id
            AND  pc.channel_id = cnp.channel_id
            AND  cnp.package_id = p.id
            AND  p.evr_id = pe.id
            AND  p.package_arch_id = pa.id
       GROUP BY  p.name_id, pa.label, pa.id
       ) full_list,
       rhnPackage pkg
       join rhnPackageName pn on pkg.name_id = pn.id
       join rhnPackageEVR pevr on pkg.evr_id = pevr.id
       join rhnChannelPackage CP on CP.package_id = pkg.id
       join suseProductChannel PC on PC.channel_id = CP.channel_id
       join suseProducts SP on SP.id = PC.product_id
 WHERE full_list.name_id = pkg.name_id
   AND full_list.evr = pevr.evr
   AND full_list.arch_id = pkg.package_arch_id
   AND SP.product_id in ( %s )
   AND pn.name = :pkgname
order by pkg.id
""";

_sql_find_pkgs_with_custom_channels = """
SELECT  distinct
        pkg.id AS id,
        PN.name || '-' || evr_t_as_vre_simple(full_list.evr) || '.' || full_list.arch_label AS nvrea,
        full_list.arch_label AS arch,
        pkg.path
  FROM  (
         SELECT  I_P.name_id name_id,
                 max(I_PE.evr) evr,
                 I_PA.id as arch_id,
                 I_PA.label as arch_label
           FROM  suseProducts I_SP
           JOIN  suseProductChannel I_PC ON I_SP.id = I_PC.product_id
           JOIN  rhnChannel I_C ON I_PC.channel_id = I_C.id or I_PC.channel_id = I_C.parent_channel
           JOIN  rhnChannelNewestPackage I_CNP ON I_C.id = I_CNP.channel_id
           JOIN  rhnPackage I_P ON I_CNP.package_id = I_P.id
           JOIN  rhnPackageEVR I_PE ON I_P.evr_id = I_PE.id
           JOIN  rhnPackageArch I_PA ON I_P.package_arch_id = I_PA.id
          WHERE  I_SP.product_id in ( %s )
       GROUP BY  I_P.name_id, I_PA.label, I_PA.id
       ) full_list,
       suseProducts SP
  join suseProductChannel PC ON sp.id = pc.product_id
  join rhnChannel C ON pc.channel_id = c.id or pc.channel_id = c.parent_channel
  join rhnChannelPackage CP ON CP.channel_id = C.id
  join rhnPackage pkg ON CP.package_id = pkg.id
  join rhnPackageEVR pevr on pkg.evr_id = pevr.id
  join rhnPackageName pn on pkg.name_id = pn.id
 WHERE full_list.name_id = pkg.name_id
   AND full_list.evr = pevr.evr
   AND full_list.arch_id = pkg.package_arch_id
   AND SP.product_id in ( %s )
   AND pn.name = :pkgname
order by pkg.id
""";

def check_bootstrap_packages():
    """ Check, if bootstrap repo packages are installed """
    if (os.system("rpm -q spacewalk-client-repository-sle-10-4 >/dev/null") == 0 or
        os.system("rpm -q spacewalk-client-repository-sle-10-3 >/dev/null") == 0 or
        os.system("rpm -q spacewalk-client-repository-sle-11-1 >/dev/null") == 0 or
        os.system("rpm -q spacewalk-client-repository >/dev/null") == 0):
            print("Using this script requires to de-install the bootstrap repository packages.")
            print("Take care the the following packages are not on your system:")
            print("* spacewalk-client-repository-sle-10-4")
            print("* spacewalk-client-repository-sle-10-3")
            print("* spacewalk-client-repository-sle-11-1")
            print("* spacewalk-client-repository")
            print("Aborted.")
            sys.exit(1)

def list_labels():
    """
    Create list of labels and return a structure of them for the menu.

    :return:
    """
    label_map = {}
    synced_products = map(lambda x: x['id'], rhnSQL.fetchall_dict(_sql_synced_proucts) or [])
    label_index = 1
    for label in sorted(mgr_bootstrap_data.DATA.iterkeys()):
        if int(mgr_bootstrap_data.DATA[label]['PDID'][0]) in synced_products:
            print("{0}. {1}".format(label_index, label))
            label_map[label_index] = label
            label_index += 1
    return label_map

def create_repo(label, flush, additional=[]):
    pdids = ', '.join(mgr_bootstrap_data.DATA[label]['PDID'])
    destdir = mgr_bootstrap_data.DATA[label]['DEST']
    errors = 0
    messages = []
    suggestions = {
        'no-packages': None
    }

    if flush:
        print("Removing directory:", destdir)
        try:
            shutil.rmtree(destdir)
        except OSError as err:
            print('Error while deleting {0}: {1}'.format(destdir, err))

    if not os.path.exists(destdir):
        if dryrun:
            print("Create directory:", destdir)
        else:
            os.makedirs(destdir)

    if label.startswith('RES'):
        print("Creating bootstrap repo for latest Service Pack of {0}".format(label))
    else:
        print("Creating bootstrap repo for {0}".format(label))
    print

    if options.usecustomchannels:
        h = rhnSQL.prepare(rhnSQL.Statement(_sql_find_pkgs_with_custom_channels % (pdids, pdids)))
    else:
        h = rhnSQL.prepare(rhnSQL.Statement(_sql_find_pkgs % (pdids, pdids)))
    packagelist = mgr_bootstrap_data.DATA[label]['PKGLIST']
    packagelist.extend(additional)
    for pkgname in packagelist:
        h.execute(pkgname=pkgname)
        pkgs = h.fetchall_dict() or []
        if len(pkgs) == 0:
            messages.append("ERROR: package '%s' not found" % pkgname)
            errors += 1
            if not suggestions['no-packages']:
                suggestions['no-packages'] = ('mgr-create-bootstrap-repo uses the locally synchronized ' +
                                              'versions of files from the SUSE Manager Tools repository, ' +
                                              'and uses the locally synchronized pool channel for dependency resolution. ' +
                                              'Both should be fully synched before running the mgr-create-bootstrap script.')
            continue
        for p in pkgs:
            rpmdir = os.path.join(destdir, p['arch'])
            if not os.path.exists(rpmdir):
                os.makedirs(rpmdir)
            print("copy '%s'" % p['nvrea'])
            if not dryrun:
                shutil.copy2(os.path.join(basepath, p['path']), rpmdir)

    if dryrun:
        print("createrepo -s sha %s" % destdir)
    else:
        os.system("createrepo -s sha %s" % destdir)
    if errors:
        for m in messages:
            print(m)
        if label.startswith('RES') and not options.usecustomchannels:
            print("If the installation media was imported into a custom channel, try to run again with --with-custom-channels option")
        suggestions = list(filter(None, suggestions.values()))
        if suggestions:
            print("\nSuggestions:")
            for suggestion in suggestions:
                print(msg_wrapper.fill(suggestion) + "\n")
        sys.exit(1)

usage = "usage: %prog [options] [additional_pkg1 additional_pkg2 ...]"
parser = OptionParser(usage=usage)
parser.add_option('-n', '--dryrun', action='store_true', dest='dryrun',
                  help='Dry run. Show only changes - do not execute them')
parser.add_option('-i', '--interactive', action='store_true', dest='interactive',
                  help='Interactive mode (default)')
parser.add_option('-l', '--list', action='store_true', dest='list',
                  help='list available distributions')
parser.add_option('-c', '--create', action='store', dest='create',
                  help='create bootstrap repo for given distribution label')
parser.add_option('-f', '--flush', action='store_true', dest='flush',
                  help='when used in conjuction with --create, deletes the target repository before creating it')
parser.add_option('', '--datamodule', action="store", dest='datamodule',
                  help='Use an own datamodule (Default: mgr_bootstrap_data)')
parser.add_option('', '--with-custom-channels', action='store_true', dest='usecustomchannels',
                  help='Take custom channels into account when searching for newest package versions')

(options, args) = parser.parse_args()

modulename = "mgr_bootstrap_data"
if options.datamodule and options.datamodule != '':
    modulename = options.datamodule

try:
    mgr_bootstrap_data = __import__(modulename)
    for label in mgr_bootstrap_data.DATA:
        if not isinstance(mgr_bootstrap_data.DATA[label]['PDID'], usix.ListType):
            mgr_bootstrap_data.DATA[label]['PDID'] = map(str, [int(mgr_bootstrap_data.DATA[label]['PDID'])])
        else:
            mgr_bootstrap_data.DATA[label]['PDID'] = map(str, [int(pdid) for pdid in mgr_bootstrap_data.DATA[label]['PDID']])
except ImportError, e:
    sys.stderr.write("Unable to load module '%s'\n" % modulename)
    sys.stderr.write(str(e) + "\n")
    sys.exit(1)

dryrun = options.dryrun

check_bootstrap_packages()

if not options.list and not options.create:
    options.interactive = True

if options.interactive:
    label_map = list_labels()

    elabel = None
    while True:
        try:
            elabel = label_map.get(int(raw_input("Enter a number of a product label: ")), '')
            break
        except Exception:
            print("Please enter a number.")

    if elabel not in mgr_bootstrap_data.DATA:
        print("'%s' not found" % elabel)
        sys.exit(1)

    create_repo(elabel, options.flush, additional=args)
elif options.list:
    list_labels()
elif options.create:
    if options.create not in mgr_bootstrap_data.DATA:
        print("'%s' not found" % options.create)
        sys.exit(1)
    create_repo(options.create, options.flush, additional=args)
