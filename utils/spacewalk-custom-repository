#!/usr/bin/python
#
# Copyright (c) 2010--2012 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#
# dyordano@redhat.com

import sys
import xmlrpclib
import fnmatch
import ConfigParser
from optparse import OptionParser, Option
import re
from spacewalk.common.cli import getUsernamePassword, xmlrpc_login, xmlrpc_logout

DEFAULT_SERVER = "localhost"
DEFAULT_USER = "admin"
DEFAULT_PASSWORD = "nimda"

exit_code=0

#mmraka
CHANNEL_ARCH = {
        'i386':         'channel-ia32',
        'ia64':         'channel-ia64',
        'sparc':        'channel-sparc',
        'sparc64':      'channel-sparc64',
        'alpha':        'channel-alpha',
        's390':         'channel-s390',
        's390x':        'channel-s390x',
        'iSeries':      'channel-iSeries',
        'pSeries':      'channel-pSeries',
        'x86_64':       'channel-x86_64',
        'ppc':          'channel-ppc',
        'ppc64':        'channel-ppc64',
        'sparc-sun-solaris': 'channel-sparc-sun-solaris',
        'i386-sun-solaris':  'channel-i386-sun-solaris',
        }

class ExtOptionParser(OptionParser):

    """extend OptionParser to print examples"""
    def __init__(self, examples=None, **kwargs):
        self.examples = examples
        OptionParser.__init__(self, **kwargs)
    def print_help(self):
        OptionParser.print_help(self)
        print "\n\n" + self.examples

def connect(user, password, server):
    server_url = "http://%s/rpc/api" % server

    if options.verbose > 2:
        client_verbose = options.verbose - 2
    else:
        client_verbose = 0
    if options.verbose:
        sys.stdout.write("Connecting to %s\n" % server_url)
    client   = xmlrpclib.Server(server_url, verbose=client_verbose, allow_none=1)
    user, password = getUsernamePassword(user, password)
    key      = xmlrpc_login(client, user, password)
    return client, key

def f_print_error(msg):
        global exit_code
        print "ERROR: %s\n" % msg
        exit_code+=1
        
def f_print_info(msg):
        print "INFO: %s\n" % msg
         
if __name__ == "__main__":
    # options parsing
    usage = "usage: %prog --action [params]"
    examples = """Examples:

    List all available repositoies:
        %(prog)s --list-repos

    Create software channel:
         %(prog)s --create-channel --channel-label example_channel --channel-name example_name --channel-summary example_summary --channel-arch x86_64 --channel-parent example_parent

         %(prog)s --create-channel --channel-label example_channel --channel-name example_name --channel-summary example_summary --channel-arch x86_64  --channel-parent example_parent --channel-checksum sha256

         %(prog)s --create-channel --channel-label example_channel --channel-name example_name --channel-summary example_summary --channel-arch x86_64  --channel-parent example_parent --channel-checksum sha256 --channel-gpgKey-url http://example.com/gpg_key --channel-gpgKey-id 069C8460  --channel-gpgKey-fingerprint "25DB B54B DED7 0987 F4C1  0042 B4EB F579 069C 8460"

    Create repository:
        %(prog)s --create-repo --repo-label example_repo --repo-url http://example.redhat.com/example_repo

    Update Repository Url:
        %(prog)s --update-repourl --repo-label example_repo --repo-url http://example.redhat.com/example_repo_updated    

    Delete repository:
        %(prog)s --delete-repo --repo-label example_repo

    Associate repository to a custom software channel:
        %(prog)s --associate-repo --repo-label example_repo --channel-label example_channel

    Disassociate repository to a custom software channel:
        %(prog)s --disassociate-repo --repo-label example_repo --channel-label example_channel

    Add filter to a repository:
        %(prog)s --add-filter --repo-label example_repo --filter-string example_filter_string* --filter-flag +

    Remove filter from a repository:
        %(prog)s --remove-filter --repo-label example_repo --filter-string example_filter_string* --filter-flag +

    Clear filters for a repository:
        %(prog)s --clear-filters --repo-label example_repo

    List all filter for a repository:
        %(prog)s --list-filters --repo-label example_repo

    List all associated repositories for a custom software channel:
        %(prog)s --list-channels-repos --channel-label example_channel

    List all available custom sofware channels:
        %(prog)s --list-channels

    Sync custom sofware channel with all associated repositories:
        %(prog)s --sync-now --channel-label example_channel

\n""" % {'prog': sys.argv[0]}

    option_list = [
        Option("-u", "--user", help="Spacewalk username", default=DEFAULT_USER),
        Option("-p", "--password", help="Spacewalk password", default=DEFAULT_PASSWORD),
        Option("-s", "--server", help="Spacewalk server Url", default=DEFAULT_SERVER),
        Option("-v", "--verbose", help="verbose", action="count"),
        Option("", "--channel-label", help="Software channel label"),
        Option("", "--channel-name", help="Software channel name"),
        Option("", "--channel-summary", help="Software channel summary"),
        Option("", "--channel-arch", help="Software channel architecture"),
        Option("", "--channel-parent", help="Software channel parent"),
        Option("", "--channel-checksum", help="Software channel checksum sha1,sha256"),
        Option("", "--channel-gpgKey-url", help="Software channel gpgKey url"),
        Option("", "--channel-gpgKey-id", help="Software channel gpgKey id"),
        Option("", "--channel-gpgKey-fingerprint", help="Software channel gpgKey fingerprint"),
        Option("", "--repo-label", help="Repository Label"),
        Option("", "--repo-url", help="Repository Url"),
        Option("", "--filter-string", help="filter string"),
        Option("", "--filter-flag", help="filter flag"),
        Option("", "--list-repos", help="Action: List available repositories", action="store_true"),
        Option("", "--list-channels", help="Action: List available software channels", action="store_true"),
        Option("", "--list-channels-repos", help="Action: List repositories associated with a channel. Requites --channel-label", action="store_true"),
        Option("", "--list-filters", help="Action: List filtes for repository. Requites --repo-label", action="store_true"),
        Option("", "--create-channel", help="Action: Create software channel. Requites label, name, summary, arch", action="store_true"),
        Option("", "--create-repo", help="Action: Create repository. Requites --repo-label --repo-url", action="store_true"),
        Option("", "--delete-repo", help="Action: Delete repository. Requites --repo-label", action="store_true"),
        Option("", "--associate-repo", help="Action: Associate repository. Requites --repo-label --channel-label", action="store_true"),
        Option("", "--disassociate-repo", help="Action: Associate repository. Requites --repo-label --channel-label", action="store_true"),
        Option("", "--add-filter", help="Action: Add filter to repository. Requites --filter-string --filter-flag --repo-label", action="store_true"),
        Option("", "--remove-filter", help="Action: Remove filter from repository. Requites --filter-string --filter-flag --repo-label", action="store_true"),
        Option("", "--clear-filters", help="Action: Clear filters for repository. Requites --repo-label", action="store_true"),
        Option("", "--sync-now", help="Action: Sync software channel with all associated repositories. Requites --channel-label", action="store_true"),
        Option("", "--update-repourl", help="Action: Update repsitory Url. Requites --repo-label --repo-url", action="store_true"),
        Option("", "--list_arch", help="Action: List available architectures.", action="store_true"),

        ]

    parser = ExtOptionParser(usage=usage, option_list=option_list, examples=examples)
    (options, args) = parser.parse_args()

    try:
        client, key = connect(options.user, options.password, options.server)
    except xmlrpclib.Fault, e:
        if e.faultCode == 2950:
            sys.stderr.write("Either the password or username is incorrect.\n")
            sys.exit(2)
        else:
            raise

    try:
        # List Repos              
        if options.list_repos:
            l_repo=client.channel.software.listUserRepos(key)
            for repo in l_repo:
                print "| %s | %s | id: %d" % (repo['label'],repo['sourceUrl'],repo['id']) 

        # List Channel
        if options.list_channels:
            d_parents={}
            l_ch=client.channel.listSoftwareChannels(key)
            for ch in l_ch:
                 if ch['parent_label'] == '':
                     if ch['label'] not in d_parents.keys():
                         d_parents[ch['label']]=[]
                     continue
                     
                 if ch['parent_label'] not in d_parents.keys():
                    d_parents[ch['parent_label']]=[]     
                    
                 d_parents[ch['parent_label']].append(ch['label'])
                         

            keys = d_parents.keys()
            keys.sort()
            for ch in keys:
                print ch
                for sub in d_parents[ch]:
                    print "\t" + sub

        # List Channels Repos
        if options.list_channels_repos:
            if options.channel_label != None:
                l_repos=client.channel.software.listChannelRepos(key, options.channel_label)
                for repo in l_repos:
                    print "| %s | %s | id: %d" % (repo['label'],repo['sourceUrl'],repo['id'])
            else:
                f_print_error("Obligatory param --channel-label is missing.")

        # List arch
        if options.list_arch:
            for arch in CHANNEL_ARCH.keys():
               print arch

        # Create Channel
        if options.create_channel:
            if options.channel_label != None and \
               options.channel_name != None  and \
               options.channel_summary != None and \
               options.channel_arch != None :
                client.channel.software.create(key,options.channel_label,
                                               options.channel_name,
                                               options.channel_summary,
                                               CHANNEL_ARCH[options.channel_arch],
                                               options.channel_parent,
                                               options.channel_checksum,
                {'url':options.channel_gpgKey_url,'id':options.channel_gpgKey_id,'fingerprint':options.channel_gpgKey_fingerprint} )
            else:
               f_print_error("One or more obligatory params are missing - Label, Name, Summary or Arch.")

        # Create Repo
        if options.create_repo:
            client.channel.software.createRepo(key,
                             options.repo_label, 'yum',
                             options.repo_url)

        # Delete Repo
        if options.delete_repo:
            if options.repo_label != None:
                client.channel.software.removeRepo(key, options.repo_label)
            else:
                f_print_error("Obligatory param --repo_label is missing.")

        # Associate Repo to Channel
        if options.associate_repo:
            if options.channel_label != None and  options.repo_label != None:
                # check if not alredy associated
                flag=0
                l_repos=client.channel.software.listChannelRepos(key, options.channel_label)
                for repo in l_repos:
                    if repo['label'] == options.repo_label:
                        flag=1;break
                if flag == 0:         
                    client.channel.software.associateRepo(key,
                             options.channel_label, options.repo_label)
                else:
                  f_print_info("Repo: %s already is associated with the channel: %s. Nothing to do." % (options.repo_label,options.channel_label))               
            else:
                f_print_error("One or more obligatory params are missing: --channel-label --repo-label.")

        # Disassociate Repo to Channel
        if options.disassociate_repo:
           if options.channel_label != None and  options.repo_label != None:
                client.channel.software.disassociateRepo(key,
                             options.channel_label, options.repo_label)
           else:
                f_print_error("One or more obligatory params are missing: --channel-label --repo-label.")

        # List Filters for Repo
        if options.list_filters:
            if options.repo_label != None:
                l_filters=client.channel.software.listRepoFilters(key,options.repo_label)
                for filter in l_filters:
                    print "| %s | %s | sortOrder: %d" % (filter['filter'],filter['flag'],filter['sortOrder'])
            else:
                f_print_error("Obligatory param --repo-label is missing.")

        # Add Filter to Repo 
        if options.add_filter:
            if options.repo_label != None and options.filter_string != None and \
              (options.filter_flag == '-' or options.filter_flag == '+'):
                client.channel.software.addRepoFilter(key,options.repo_label,{'filter':options.filter_string,'flag':options.filter_flag})
            else:
                if options.filter_flag == '-' and options.filter_flag == '+':
                    f_print_error("One or more obligatory params are missing: --repo-label --filter-string --filter-flag")
                else:
                    f_print_error("Parameter flag accept only values + or -.")

        # Remove Filter from Repo
        if options.remove_filter:
            if options.repo_label != None and options.filter_string != None and \
              (options.filter_flag == '-' or options.filter_flag == '+'):
                 client.channel.software.removeRepoFilter(key,options.repo_label,{'filter':options.filter_string,'flag':options.filter_flag})
            else:
                if options.filter_flag == '-' and options.filter_flag == '+':
                    f_print_error("One or more obligatory params are missing: --repo-label --filter-string --filter-flag")
                else:
                    f_print_error("Parameter flag accept only values + or -.")

        # Clear Filtes for Repo
        if options.clear_filters:
            if options.repo_label != None:
                client.channel.software.clearRepoFilters(key,options.repo_label)
            else:
                f_print_error("Obligatory param --repo-label is missing.")

        # Sync channel with all repos
        if options.sync_now:
            if options.channel_label != None:
                client.channel.software.syncRepo(key,options.channel_label)
            else:
                f_print_error("Obligatory param --channel-label is missing.")

        #Update Repo Url
        if options.update_repourl:
            if  options.repo_url != None:
                client.channel.software.updateRepoUrl(key,options.repo_label,options.repo_url)
            else:
                f_print_error("Obligatory param --repo-url is missing.")
                
    except xmlrpclib.Fault, e:
       f_print_error(e.faultString)
       
     
    if client is not None:
        # logout
        xmlrpc_logout(client, key)
        
    sys.exit(exit_code)    
