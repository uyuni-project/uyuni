#!/opt/redhat/rhn/solaris/bin/python
#
# Copyright (c) 2004 Conectiva, Inc.
# Copyright (c) 2005--2013 Red Hat, Inc.
#
# From code written by Gustavo Niemeyer <niemeyer@conectiva.com>
# Modified by Joel Martin <jmartin@redhat.com>
#
# This file is part of Smart Package Manager.
#
# Smart Package Manager is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# Smart Package Manager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Smart Package Manager; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
import sys
from smart.const import DEBUG, DATADIR
from smart.option import OptionParser
from smart import init, initPlugins
from smart import *
from spacewalk.common.rhnConfig import CFG, initCFG

initCFG('web')

if sys.version_info < (2, 3):
    sys.exit(_("error: Python 2.3 or later required"))

up2date_version = "5.0.0"

import pwd
import os

# Avoid segfault due to strange linkage order. Remove this ASAP.
if sys.platform[:5] != "sunos":
    import pyexpat

USAGE=_("usage: up2date [OPTIONS] [<packages>]")

DESCRIPTION=_("""
When operating in command line mode, specifying package names as
arguments to the program will attempt to retrieve (and possibly
install, based on your configuration) those packages.  Version,
release, and architecture details will be determined by the Update
Agent automatically.
""")

EXAMPLES = _("""
up2date --help
up2date -p
up2date --show-available
up2date pkgname
""")

def parse_options(argv):
    parser = OptionParser(usage=USAGE,
                          description=DESCRIPTION,
                          examples=EXAMPLES,
                          version="up2date %s" % up2date_version)
    #parser.disable_interspersed_args()

    parser.add_option("-a", "--admin", action="store", dest="admin",
                      help=_("specify the admin file to use instead of the default"))
    parser.add_option("--channel", action="append", metavar=_("<channel>"),
                      help=_("Specify which channels to use by channel label"))
    parser.add_option("--get", action="store_true",
                      help=_("Fetch the package specified without resolving dependencies"))
    parser.add_option("--global-zone", action="store_true",
                      metavar=_("<global-zone>"),
                      help=_("Installs all packages in the global zone only. (Solaris 10 only; this overrides the default behavior of installing in all zones)."))
    parser.add_option("--hardware", action="store_true",
                      help=_("up2date hardware profile associated with this System Profile on " + CFG.PRODUCT_NAME))
    parser.add_option("--installall", action="store_true",
                      help=_("Install all available packages. Used with --channel"))
    parser.add_option("-l", "--list", action="store_true",
                      help=_("List packages available for retrieval"))
    parser.add_option("-n", "--act-native", action="store_true",
                      help=_("Act like native up2date by pulling in packages greedily without preferance to smaller installs"))
    parser.add_option("-p", "--packages", action="store_true",
                      help=_("update packages associated with this System Profile on " + CFG.PRODUCT_NAME))
    parser.add_option("--proxy", action="store", metavar=_("<proxyurl>"),
                      help=_("Specify an http proxy to use"))
    parser.add_option("--proxyPassword", action="store", metavar=_("<proxy password>"),
                      help=_("Specify a password to use with an authenticated http proxy"))
    parser.add_option("--proxyUser", action="store", metavar=_("<proxy userid>"),
                      help=_("Specify a username to use with an authenticated http proxy"))
    parser.add_option("-r", "--response", action="store", dest="response",
                      help=_("specify the response file to use, allowing non-interactive installation of packages"))
#    parser.add_option("--serverUrl", action="store", metavar=_("<url>"),
#                      help=_("Specify what server url to use"))
    parser.add_option("--showall", action="store_true",
                      help=_("List all packages available for download"))
    parser.add_option("--show-available", action="store_true",
                      help=_("List all packages available that are not currently installed"))
    parser.add_option("--show-channels", action="store_true",
                      help=_("Show the channel names along with the package name where approriate"))
    parser.add_option("--show-orphans", action="store_true",
                      help=_("List all packages currently installed that are not in channels the system is subscribed to"))
    parser.add_option("-v", "--verbose", action="count",
                      help=_("Show additional output"))

    opts, args = parser.parse_args()

    # Set some defaults to fake the up2date interface
    opts.interface = "up2date"
    opts.config_file = None
    opts.data_dir = None
    opts.ignore_locks = None
    opts.option = []

    # Set log-level based on verbose option
    opts.log_level = None
    if getattr(opts, "verbose", None):
        if opts.verbose == 1: opts.log_level = "error"
        if opts.verbose == 2: opts.log_level = "warning"
        if opts.verbose == 3: opts.log_level = "info"
        if opts.verbose == 4: opts.log_level = "debug"

    # Set the command action
    opts.command = {"action": ""}
    for param in ("list", "packages", "hardware", "showall",
                  "show_available", "show_orphans",
                  "show_channels", "installall", "get"):
        if getattr(opts, param, None):
            if param == "show_channels" and \
                (opts.command["action"] == "showall" or opts.command["action"] == "show_available"):
                opts.command["action"] += "_with_channels"
                continue
            if opts.command["action"] != "":
                print "Invalid option combination"
                sys.exit(-1)
            opts.command["action"] = param

    # Set the command run-time options
    for param in ("act_native", "show_channels", "channel", "global_zone",
                  "proxy", "proxyUser", "proxyPassword", "admin",
                  "response"):
        if getattr(opts, param, None):
            opts.command[param] = getattr(opts, param)

    # Make sure filenames are valid
    if (opts.admin):
        if (not os.path.exists(opts.admin)):
            print "Error: The admin file", opts.admin, "doesn't exist."
            sys.exit(1)

    if (opts.response):
        if (not os.path.exists(opts.response)):
            print "Error: The response file", opts.response, "doesn't exist."
            sys.exit(1)


    # Set the package list (if any)
    if args:
        opts.argv = args
    else:
        opts.argv = []

    return opts

def set_config_options(options):
    import re, copy

    globals = {}
    globals["__builtins__"] = {}
    globals["True"] = True
    globals["true"] = True
    globals["yes"] = True
    globals["False"] = False
    globals["false"] = False
    globals["no"] = False

    SETRE = re.compile(r"^(\S+?)(\+?=)(.*)$")

    for opt in options:
        m = SETRE.match(opt)
        if not m:
            raise Error, _("Invalid option: %s") % opt
        path, assign, value = m.groups()
        try:
            value = int(value)
        except ValueError:
            try:
                value = eval(value, globals)
            except:
                pass
        if assign == "+=":
            sysconf.add(path, value, soft=True)
        else:
            sysconf.set(path, value, soft=True)

def main(argv):
    # Get the right $HOME, even when using sudo.
    if os.getuid() == 0:
        os.environ["HOME"] = pwd.getpwuid(0)[5]
    opts = None
    ctrl = None
    exitcode = 1
    try:
        opts = parse_options(argv)
        ctrl = init(command=opts.command, argv=opts.argv,
                    datadir=opts.data_dir, configfile=opts.config_file,
                    interface=opts.interface,
                    forcelocks=opts.ignore_locks, loglevel=opts.log_level)
        if opts.option:
            set_config_options(opts.option)
        initPlugins()
        exitcode = iface.run(opts.command, opts.argv)
        if exitcode is None:
            exitcode = 0
        ctrl.saveSysConf()
        ctrl.restoreMediaState()
    except Error, e:
        if opts and opts.log_level == "debug":
            import traceback
            traceback.print_exc()
        if iface.object:
            iface.error(unicode(e))
        else:
            sys.stderr.write(_("error: %s\n") % e)
        if ctrl:
            ctrl.saveSysConf()
            ctrl.restoreMediaState()
    except KeyboardInterrupt:
        if opts and opts.log_level == "debug":
            import traceback
            traceback.print_exc()
            sys.exit(1)
        sys.stderr.write(_("\nInterrupted\n"))
    print
    if exitcode != 0:
        sys.exit(exitcode)

if __name__ == "__main__":
    main(sys.argv[1:])
