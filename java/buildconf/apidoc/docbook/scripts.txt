<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd">

<preface>
<title>Sample Scripts</title>
<section>
<title>JSON over HTTP API scripts</title>

<example>
    <title>HTTP login with Curl</title>
    <para>Below is an example of the login process using an authentication token with the JSON over HTTP API.</para>
    <para>The JSON over HTTP API uses authentication tokens for access. The token is sent
    in a cookie called <function>pxt-session-cookie</function> in a response to a call to
    the <function>auth.login</function> endpoint. The <function>auth.login</function> endpoint
    accepts a POST request with a JSON body that has <function>login</function> and
    <function>password</function> properties in a top-level object.</para>
    <programlisting>
<![CDATA[
$ API=https://manager.example.com/rhn/manager/api
$ curl -H "Content-Type: application/json" -d '{"login": "myusername", "password": "mypass"}' -i $API/auth/login

HTTP/1.1 200 200
...
Set-Cookie: pxt-session-cookie=&lt;tokenhash&gt;; ...
...
{"success":true,"messages":[]}
]]>
    </programlisting>
    <para>Once the login is successful, the retrieved cookie must be added to each subsequent request for authenticated access.</para>
</example>

<example>
    <title>HTTP GET example</title>
    <para>Below is an example of an HTTP GET call to the <function>contentmanagement.lookupProject</function> API. In a GET request, method parameters must be sent as query
    string key-value pairs.</para>
    <para><emphasis>The JSON output is pretty-printed for clarity.</emphasis></para>
    <programlisting>
<![CDATA[
$ API=https://manager.example.com/rhn/manager/api
$ curl -H "Content-Type: application/json" --cookie "pxt-session-cookie&lt;tokenhash&gt;;" \
> $API/contentmanagement/lookupProject?projectLabel=myproject
{
  "success": true,
  "result": {
    "name": "My Project",
    "description": "My CLM project",
    "id": 1,
    "label": "myproject",
    "orgId": 1
  }
}
]]>
    </programlisting>
</example>

<example>
    <title>HTTP POST example</title>
    <para>Below is an example of an HTTP POST call to the <function>contentmanagement.createProject</function> API. In a POST request, method parameters can be sent as query
    string key-value pairs, as a JSON object in the request body, or a mix of both.
    <function>object</function> type parameters cannot be represented as a query string
    element and therefore must be sent in the request body. The following examples show
    both approaches.</para>
    <para><emphasis>The JSON output is pretty-printed for clarity.</emphasis></para>
    <programlisting>
<![CDATA[
$ API=https://manager.example.com/rhn/manager/api
$ curl -H "Content-Type: application/json" --cookie "pxt-session-cookie&lt;tokenhash&gt;;" -X POST \
> "$API/contentmanagement/createProject?projectLabel=myproject&name=My%20Project&description="
{
  "success": true,
  "result": {
    "name": "My Project",
    "id": 1,
    "label": "myproject",
    "orgId": 1
  }
}
]]>
    </programlisting>
    <para>The request body must be a top-level JSON object that contains all the parameters as its properties.</para>
    <programlisting>
<![CDATA[
$ API=https://manager.example.com/rhn/manager/api
$ curl -H "Content-Type: application/json" --cookie "pxt-session-cookie&lt;tokenhash&gt;;" \
> -d '{"projectLabel":"myproject","name":"My Project","description":""}' \
> $API/contentmanagement/createProject
{
  "success": true,
  "result": {
    "name": "My Project",
    "id": 1,
    "label": "myproject",
    "orgId": 1
  }
}
]]>
    </programlisting>
</example>
<example>
    <title>Python 3 example</title>
    <para>Below is an example of the <function>system.listActiveSystems</function> call being used.</para>
    <programlisting>
<![CDATA[
#!/usr/bin/env python3
import requests
import pprint

MANAGER_URL = "https://manager.example.com/rhn/manager/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"
SSLVERIFY = "/path/to/CA" # or False to disable verify;

data = {"login": MANAGER_LOGIN, "password": MANAGER_PASSWORD}
response = requests.post(MANAGER_URL + '/auth/login', json=data, verify=SSLVERIFY)
print("LOGIN: {}:{}".format(response.status_code, response.json()))

cookies = response.cookies
res2 = requests.get(MANAGER_URL + '/system/listActiveSystems', cookies=cookies, verify=SSLVERIFY)
print("RETCODE: {}".format(res2.status_code))
pprint.pprint(res2.json())

sysinfo = res2.json()['result'][0]

note = {"sid": sysinfo['id'], "subject": "Title", "body": "Content of the Note"}
res2 = requests.post(MANAGER_URL + '/system/addNote', json=note, cookies=cookies, verify=SSLVERIFY)
print("RETCODE: {}".format(res2.status_code))
pprint.pprint(res2.json())

res2 = requests.get(MANAGER_URL + '/system/listNotes?sid={}'.format(sysinfo['id']), cookies=cookies, verify=SSLVERIFY)
print("RETCODE: {}".format(res2.status_code))
pprint.pprint(res2.json())

res2 = requests.post(MANAGER_URL + '/auth/logout', cookies=cookies, verify=SSLVERIFY)
print("RETCODE: {}".format(res2.status_code))
pprint.pprint(res2.json())
]]>
    </programlisting>
</example>
</section>

<section>
<title>XMLRPC Scripts</title>
<example>
    <title>Perl Example</title>
    <para>This Perl example shows the <function>system.listUserSystems</function> call being used to get a
list of systems a user has access to. In the example below, the name of each system will be printed.</para>
    <programlisting>#!/usr/bin/perl
use Frontier::Client;

my $HOST = 'manager.example.com';
my $user = 'username';
my $pass = 'password';

my $client = new Frontier::Client(url => "http://$HOST/rpc/api");
my $session = $client->call('auth.login',$user, $pass);

my $systems = $client->call('system.listUserSystems', $session);
foreach my $system (@$systems) {
   print $system->{'name'}."\n";
}
$client->call('auth.logout', $session);</programlisting>
</example>

<example>
    <title>Python 2 Example</title>
    <para>Below is an example of the <function>user.listUsers</function> call being used. Only the login of each
user is printed.</para>
    <programlisting>#!/usr/bin/python
import xmlrpclib

MANAGER_URL = "http://manager.example.com/rpc/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"

client = xmlrpclib.Server(MANAGER_URL, verbose=0)

key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)
list = client.user.list_users(key)
for user in list:
  print user.get('login')

client.auth.logout(key)</programlisting>
    <para>The following code shows how to use date-time parameters. This code will schedule immediate installation of package rhnlib-2.5.22.9.el6.noarch to system with id 1000000001.</para>
    <programlisting>#!/usr/bin/python
from datetime import datetime
import time
import xmlrpclib

MANAGER_URL = "http://manager.example.com/rpc/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"

client = xmlrpclib.Server(MANAGER_URL, verbose=0)

key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)
package_list = client.packages.findByNvrea(key, 'rhnlib', '2.5.22', '9.el6', '', 'noarch')
today = datetime.today()
earliest_occurrence = xmlrpclib.DateTime(today)
client.system.schedulePackageInstall(key, 1000000001, package_list[0]['id'], earliest_occurrence)

client.auth.logout(key)</programlisting>
</example>

<example>
    <title>Python 3 with SSL Example</title>
    <para>Below is an example of the <function>user.listUsers</function> call being called.</para>
    <programlisting>#!/usr/bin/env python3
from xmlrpc.client import ServerProxy
import ssl

MANAGER_URL = "https://manager.example.com/rpc/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"

# You might need to set to set other options depending on your
# server SSL configuartion and your local SSL configuration
context = ssl.create_default_context()
client = ServerProxy(MANAGER_URL, context=context)
key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)

print(client.user.list_users(key))

client.auth.logout(key)</programlisting>
</example>

<example>
    <title>Python 3 Example</title>
    <para>Below is an example of the <function>user.listUsers</function> call being called.</para>
    <programlisting>#!/usr/bin/env python3
from xmlrpc.client import ServerProxy

MANAGER_URL = "http://manager.example.com/rpc/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"

client = ServerProxy(MANAGER_URL)
key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)

print(client.user.list_users(key))

client.auth.logout(key)</programlisting>
    <para>The following code shows how to use date-time parameters. This code will schedule immediate installation of package rhnlib-2.5.22.9.el6.noarch to system with id 1000000001.</para>
    <programlisting>#!/usr/bin/env python3
from datetime import datetime
from xmlrpc.client import ServerProxy

MANAGER_URL = "http://manager.example.com/rpc/api"
MANAGER_LOGIN = "username"
MANAGER_PASSWORD = "password"

client = ServerProxy(MANAGER_URL)

key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)
package_list = client.packages.findByNvrea(key, 'rhnlib', '2.5.22', '9.el6', '', 'noarch')
earliest_occurrence = datetime.today()
client.system.schedulePackageInstall(key, 1000000001, [package_list[0]['id']], earliest_occurrence)

client.auth.logout(key)</programlisting>
</example>

<example>
    <title>Ruby Example</title>
    <para>Below is an example of the <function>channel.listAllChannels</function> API call. List of channel labels is printed.</para>
    <programlisting>#!/usr/bin/ruby
require "xmlrpc/client"

@MANAGER_URL = "http://manager.example.com/rpc/api"
@MANAGER_LOGIN = "username"
@MANAGER_PASSWORD = "password"

@client = XMLRPC::Client.new2(@MANAGER_URL)

@key = @client.call('auth.login', @MANAGER_LOGIN, @MANAGER_PASSWORD)
channels = @client.call('channel.listAllChannels', @key)
for channel in channels do
   p channel["label"]
end

@client.call('auth.logout', @key)</programlisting>
</example>
</section>
</preface>
