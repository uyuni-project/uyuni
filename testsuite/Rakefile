require 'rake'
require 'rubygems'
require 'yaml'
require 'cucumber/rake/task'
require 'rake/task'
require 'parallel'

junit_results = '-f junit -o results_junit'

namespace :cucumber do
  Dir.glob(File.join(Dir.pwd, 'run_sets', '*.yml')).each do |entry|
    Cucumber::Rake::Task.new(File.basename(entry, '.yml').to_sym) do |t|
      filename = File.basename(entry, '.yml').to_sym
      json_results = "-f json -o output_#{filename}.json"
      html_results = "-f html -o output_#{filename}.html"
      cucumber_opts = %W[#{html_results} #{json_results} #{junit_results} -f rerun --out failed.txt -f pretty -r features]
      features = YAML.safe_load(File.read(entry))
      t.cucumber_opts = cucumber_opts + features
    end
  end
  at_exit { post_nodejs_report }
end

def post_nodejs_report
  sh 'rm -rf ./cucumber_report && mkdir cucumber_report', verbose: false
  sh 'timeout 60 bash -c -- "while find output*.json -type f -size 0 | grep json; do sleep 1;done"', verbose: false
  sh 'node index.js'
end

task :cucumber do
  Rake::Task['cucumber:testsuite'].invoke
end

task default: [:cucumber]

namespace :parallel do
  desc 'Run Cucumber init_clients features in parallel'
  task :init_clients do
    features = YAML.safe_load(File.read(File.join(Dir.pwd, 'run_sets', 'init_clients.yml'))).join(' ')
    cucumber_opts = "-f html -o output_init_clients-$TEST_ENV_NUMBER.html -f json -o output_init_clients-$TEST_ENV_NUMBER.json #{junit_results} -f rerun --out failed.txt -f CustomFormatter::PrettyFormatter -r features "
    sh "bundle exec parallel_cucumber -n 5 -o '#{cucumber_opts}' #{features}"
  end

  desc 'Run Cucumber secondary features in parallel'
  task :secondary_parallelizable do
    features = YAML.safe_load(File.read(File.join(Dir.pwd, 'run_sets', 'secondary_parallelizable.yml'))).join(' ')
    cucumber_opts = "-f html -o output_secondary-$TEST_ENV_NUMBER.html -f json -o output_secondary-$TEST_ENV_NUMBER.json #{junit_results} -f CustomFormatter::PrettyFormatter -r features "
    sh "bundle exec parallel_cucumber -n 4 -o '#{cucumber_opts}' #{features}"
  end
  at_exit { post_nodejs_report }
end

namespace :utils do
  desc 'Generate feature file for a client from a template and include it in a yaml file'
  task :generate_feature, [:template_path, :client_name, :output_path, :yaml_path] do |t, args|
    output_filepath = "#{args[:output_path]}/#{args[:client_name]}_#{File.basename(args[:template_path], '.*')}.feature"
    sh "sed 's/<client>/#{args[:client_name]}/g' #{args[:template_path]} > #{output_filepath}", verbose: false
    sh "sed -i 's/<type>/#{get_client_type(args[:client_name])}/g' #{output_filepath}", verbose: false
    sh "echo '- #{output_filepath}' >> #{args[:yaml_path]}", verbose: false
  end

  desc 'Generate smoke tests for all the clients'
  task :generate_smoke_tests do
    features = Rake::FileList['features/qam/init_clients/*.feature']
    features.each do |feature|
      Rake::Task['utils:generate_feature'].invoke('features/qam/smoke_tests/smoke_tests.template',
                                           File.basename(feature,'.feature'),
                                           'features/qam/smoke_tests',
                                           'run_sets/qam_smoke_tests.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to add MU Custom Channels and repositories for all the clients'
  task :generate_add_mu_repository_features do
    features = Rake::FileList['features/qam/init_clients/*.feature']
    features.each do |feature|
      Rake::Task['utils:generate_feature'].invoke('features/qam/add_mu_repositories/add_mu_repository.template',
                                           File.basename(feature,'.feature'),
                                           'features/qam/add_mu_repositories',
                                           'run_sets/qam_add_mu_repositories.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate all the features need for QAM from templates'
  task :generate_features do
    Rake::Task['utils:generate_smoke_tests'].invoke
    Rake::Task['utils:generate_smoke_tests'].reenable
    Rake::Task['utils:generate_add_mu_repository_features'].invoke
    Rake::Task['utils:generate_smoke_tests'].reenable
  end

  def get_client_type(name)
    if name.include? '_client'
      'traditional'
    else
      'salt'
    end
  end
end
