{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "GetInstArgs";
    import "Popup";
    import "Stage";
    import "Wizard";

    map args = GetInstArgs::argmap ();

    // 2GB
    integer enough_memory = 2000000;

    integer free_disk_space = 0;
    string message = "";

    map meminfo = (map) SCR::Read (.proc.meminfo);
    //integer totalmem = meminfo["memtotal"]:0 + meminfo["swaptotal"]:0;
    integer totalmem = meminfo["memtotal"]:0;

    y2milestone ("Memory: %1, Swap: %2, Total: %3",
      meminfo["memtotal"]:0, meminfo["swaptotal"]:0, totalmem
    );

    // something is wrong
    if (totalmem == nil) {
      // using only RAM if possible
      if (meminfo["memtotal"]:nil != nil) {
        totalmem = meminfo["memtotal"]:0;
        // can't do anything, just assume we enough
      } else {
        totalmem = enough_memory;
      }
    }

    // test if we did a setup already
    if (SCR::Read(.target.size, "/root/.MANAGER_SETUP_COMPLETE") >= 0 ) {
        if ( !Popup::AnyQuestionRichText(_("already setup"), _("SUSE Manager is already setup. A second attempt to run the setup will fail."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }

    // do we have less memory than needed?
    if (totalmem < enough_memory) {
        if ( !Popup::AnyQuestionRichText(_("Not enough memory"), _("SUSE Manager requires 2G of memory to be installed and 8G for good perfomance. If you continue the product will not function correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    map m = (map) SCR::Execute( .target.bash_output, "/usr/lib/susemanager/bin/check_disk_space.sh /var/spacewalk" );
    y2milestone ("check_disk_space.sh call: %1", m);
    free_disk_space = tointeger (m["stdout"]:"0");
    if (free_disk_space < 100 * 1024 * 1024) {
        message = sformat (_("    Not enough disk space (only %1G free)"), free_disk_space / (1024 * 1024));
        if ( !Popup::AnyQuestionRichText(message, _("SUSE Manager requires 100G of free disk space in /var/spacewalk to be installed. If you continue the product will not function correctly."), 46, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    m = (map) SCR::Execute( .target.bash_output, "/usr/lib/susemanager/bin/check_disk_space.sh /var/lib/pgsql" );
    y2milestone ("check_disk_space.sh call: %1", m);
    free_disk_space = tointeger (m["stdout"]:"0");
    if (free_disk_space < 30 * 1024 * 1024) {
        message = sformat (_("    Not enough disk space (only %1G free)"), free_disk_space / (1024 * 1024));
        if ( !Popup::AnyQuestionRichText(message, _("SUSE Manager requires 30G of free disk space in /var/lib/pgsql to be installed. If you continue the product will not function correctly."), 46, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    map f_out = (map) SCR::Execute (.target.bash_output, "hostname -f", $[]);
    if( f_out["exit"]:-1 != 0 ) {
        if ( !Popup::AnyQuestionRichText(_("hostname command failed"), _("the execution of 'hostname -f' failed. The product will not install correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    if( size(filterchars(f_out["stdout"]:"", ".")) < 2 ) {
        if ( !Popup::AnyQuestionRichText(_("illegal FQHN"), _("the FQHN must contain at least 2 dots. The product will not function correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    if( size(filterchars(f_out["stdout"]:"", "_")) > 0 ) {
        if ( !Popup::AnyQuestionRichText(_("illegal FQHN"), _("the FQHN must not contain the '_' (undersorce) character. The product will not function correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    map h_out = (map) SCR::Execute (.target.bash_output, "hostname", $[]);
    map d_out = (map) SCR::Execute (.target.bash_output, "hostname -d", $[]);
    y2milestone("%1 == %2", sformat("%1.%2", h_out["stdout"]:"h", d_out["stdout"]:"d"), f_out["stdout"]:"x");
    h_out["stdout"] = deletechars(h_out["stdout"]:"", "\n");
    if( sformat("%1.%2", h_out["stdout"]:"h", d_out["stdout"]:"d") != f_out["stdout"]:"x" ) {
        if ( !Popup::AnyQuestionRichText(_("illegal FQHN"), _("the output of 'hostname -f' does not match the real hostname. The product will not install correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    if( f_out["stdout"]:"x" != tolower(f_out["stdout"]:"y") ) {
        if ( !Popup::AnyQuestionRichText(_("Illegal Hostname"), _("Your hostname contains upper case characters. The product will not function correctly."), 40, 10, _("Continue anyway"), _("Exit installation"), `focus_no) )
        {
            if (Popup::ConfirmAbort(`incomplete)) {
                return `abort;
            }
        }
    }
    return `auto;
}
