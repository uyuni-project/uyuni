/*
 * Copyright (c) 2024 SUSE LLC
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */

package com.suse.cloud;

import com.google.gson.annotations.SerializedName;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;

import java.time.Instant;

/**
 * Simple POJO with the compliance information as parsed from the JSON generated by the external PAYG data extractor.
 */
public class PaygComplainceInfo {

    @SerializedName("isPaygInstance")
    private boolean paygInstance;

    private boolean compliant;

    private CloudProvider cloudProvider;

    @SerializedName("hasModifiedPackages")
    private boolean anyPackageModified;

    private boolean billingServiceRunning;

    private long timestamp;

    /**
     * Creates the compliance info for a BYOS instace.
     */
    public PaygComplainceInfo() {
        // By default, assume it's a compliant BYOS instance
        this(CloudProvider.None, false, false, true);
    }

    /**
     * Creates the compliance info for a BYOS instace.
     * @param provider the cloud provider
     * @param hasModifiedPackages if some packages are modified
     * @param isServiceRunning if the required billing service is running
     */
    public PaygComplainceInfo(CloudProvider provider, boolean hasModifiedPackages, boolean isServiceRunning) {
        this(provider, true, hasModifiedPackages, isServiceRunning);
    }

    /**
     * Creates the compliance info for a BYOS instace.
     * @param provider the cloud provider
     * @param isPayg if the instance is PAYG
     * @param hasModifiedPackages if some packages are modified
     * @param isServiceRunning if the required billing service is running
     */
    public PaygComplainceInfo(CloudProvider provider, boolean isPayg, boolean hasModifiedPackages,
                              boolean isServiceRunning) {
        paygInstance = isPayg;
        compliant = isServiceRunning && !hasModifiedPackages;

        cloudProvider = provider;
        anyPackageModified = hasModifiedPackages;
        billingServiceRunning = isServiceRunning;

        timestamp = Instant.now().getEpochSecond();
    }

    public boolean isPaygInstance() {
        return paygInstance;
    }

    public void setPaygInstance(boolean paygInstanceIn) {
        this.paygInstance = paygInstanceIn;
    }

    public boolean isCompliant() {
        return compliant;
    }

    public void setCompliant(boolean compliantIn) {
        this.compliant = compliantIn;
    }

    public CloudProvider getCloudProvider() {
        return cloudProvider;
    }

    public void setCloudProvider(CloudProvider cloudProviderIn) {
        this.cloudProvider = cloudProviderIn;
    }

    public boolean isAnyPackageModified() {
        return anyPackageModified;
    }

    public void setAnyPackageModified(boolean hasModifiedPackagesIn) {
        this.anyPackageModified = hasModifiedPackagesIn;
    }

    public boolean isBillingServiceRunning() {
        return billingServiceRunning;
    }

    public void setBillingServiceRunning(boolean billingServiceRunningIn) {
        this.billingServiceRunning = billingServiceRunningIn;
    }

    public Instant getTimestamp() {
        return Instant.ofEpochSecond(timestamp);
    }

    public void setTimestamp(Instant timestampIn) {
        this.timestamp = timestampIn.getEpochSecond();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }

        if (!(o instanceof PaygComplainceInfo that)) {
            return false;
        }

        return new EqualsBuilder()
            .append(paygInstance, that.paygInstance)
            .append(compliant, that.compliant)
            .append(anyPackageModified, that.anyPackageModified)
            .append(billingServiceRunning, that.billingServiceRunning)
            .append(timestamp, that.timestamp)
            .append(cloudProvider, that.cloudProvider)
            .isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 37)
            .append(paygInstance)
            .append(compliant)
            .append(cloudProvider)
            .append(anyPackageModified)
            .append(billingServiceRunning)
            .append(timestamp)
            .toHashCode();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this)
            .append("paygInstance", isPaygInstance())
            .append("compliant", isCompliant())
            .append("cloudProvider", getCloudProvider())
            .append("anyPackageModified", isAnyPackageModified())
            .append("billingServiceRunning", isBillingServiceRunning())
            .append("timestamp", getTimestamp())
            .toString();
    }
}
