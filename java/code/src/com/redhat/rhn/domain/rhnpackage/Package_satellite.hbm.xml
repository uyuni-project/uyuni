<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.rhnpackage.Package"
           table="rhnPackage">

        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="org.hibernate.id.enhanced.SequenceStyleGenerator">
                <param name="sequence_name">RHN_PACKAGE_ID_SEQ</param>
                <param name="increment_size">1</param>
            </generator>
        </id>

        <property name="rpmVersion"      type="string" column="rpm_version"/>
        <property name="description"     type="string" column="description"/>
        <property name="summary"         type="string" column="summary"/>
        <property name="packageSize"     type="long"   column="package_size"/>
        <property name="payloadSize"     type="long"   column="payload_size"/>
        <property name="installedSize"   type="long"   column="installed_size"/>
        <property name="buildHost"       type="string" column="build_host"/>
        <property name="buildTime"       type="timestamp"   column="build_time"/>
        <property name="vendor"          type="string" column="vendor"/>
        <property name="payloadFormat"   type="string" column="payload_format"/>
        <property name="compat"          type="long"   column="compat"/>
        <property name="path"            type="string" column="path"/>
        <property name="headerSignature" type="string" column="header_sig"/>
        <property name="copyright"       type="string" column="copyright"/>
        <property name="cookie"          type="string" column="cookie"/>
        <property name="lastModified"    type="timestamp"   column="last_modified"/>
        <property name="created"         type="timestamp"   column="created"/>
        <property name="modified"        type="timestamp"   column="modified"/>

       <set name="packageKeys" lazy="true" table="rhnPackageKeyAssociation"
            cascade="save-update" >
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageKey"
                column="key_id"/>
        </set>


       <set name="channels" lazy="true" table="rhnChannelPackage"
            cascade="save-update">
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.channel.Channel"
                column="channel_id"/>
        </set>

       <set name="errata" lazy="true" table="rhnErrataPackage"
            cascade="save-update" >
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.errata.Errata"
                column="errata_id"/>
        </set>

       <set name="packageFiles" lazy="true" table="rhnPackageFile"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageFile" />
        </set>

       <set name="provides" lazy="true" table="rhnPackageProvides"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageProvides" />
        </set>

     <set name="requires" lazy="true" table="rhnPackageRequires"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageRequires" />
        </set>

     <set name="conflicts" lazy="true" table="rhnPackageConflicts"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageConflicts" />
        </set>


     <set name="obsoletes" lazy="true" table="rhnPackageObsoletes"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageObsoletes" />
        </set>

        <set name="recommends" lazy="true" table="rhnPackageRecommends"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackageRecommends" />
        </set>

        <set name="suggests" lazy="true" table="rhnPackageSuggests"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackageSuggests" />
        </set>

        <set name="supplements" lazy="true" table="rhnPackageSupplements"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackageSupplements" />
        </set>

        <set name="enhances" lazy="true" table="rhnPackageEnhances"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackageEnhances" />
        </set>

        <set name="preDepends" lazy="true" table="rhnPackagePreDepends"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackagePreDepends" />
        </set>

        <set name="breaks" lazy="true" table="rhnPackageBreaks"
             cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                    class="com.redhat.rhn.domain.rhnpackage.PackageBreaks" />
        </set>

        <map name="extraTags"
             table="rhnPackageExtraTag" lazy="true">
            <key column="package_id"/>
            <map-key-many-to-many column="key_id" class="com.redhat.rhn.domain.rhnpackage.PackageExtraTagsKeys"/>
            <element column="value" type="string" not-null="true"/>
        </map>

        <many-to-one name="checksum" class="com.redhat.rhn.domain.common.Checksum"
                     column="checksum_id" />
        <many-to-one name="org"
                     class="com.redhat.rhn.domain.org.Org"
                     column="org_id"
                     cascade="none"/>
        <many-to-one name="packageName"
                     class="com.redhat.rhn.domain.rhnpackage.PackageName"
                     column="name_id"
                     cascade="save-update"/>
        <many-to-one name="packageEvr"
                     class="com.redhat.rhn.domain.rhnpackage.PackageEvr"
                     column="evr_id"
                     cascade="save-update"/>
        <many-to-one name="packageGroup"
                     class="com.redhat.rhn.domain.rhnpackage.PackageGroup"
                     column="package_group"
                     cascade="save-update"/>
        <many-to-one name="sourceRpm"
                     class="com.redhat.rhn.domain.rpm.SourceRpm"
                     column="source_rpm_id"
                     cascade="save-update"/>
        <many-to-one name="packageArch"
                     class="com.redhat.rhn.domain.rhnpackage.PackageArch"
                     column="package_arch_id"
                         cascade="none"/>



    </class>

   <query name="Package.findOtherArches">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p
                where p.packageName = :name and p.org = :org and
                  p.packageEvr = :evr and p.packageArch != :arch]]>
    </query>



    <query name="Package.findById">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p where p.id = :id]]>
    </query>

    <query name="Package.findByIds">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p where p.id in (:pids)]]>
    </query>

    <query name="Package.findByPackageName">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p where p.packageName = :packageName]]>
    </query>

    <query name="Package.listOrphans">
        <![CDATA[ select p
                from com.redhat.rhn.domain.rhnpackage.Package as p
                where p.org = :org and p.channels is empty
        ]]>
    </query>

    <query name="Package.lookupByNevra">
        <![CDATA[ select p
                from com.redhat.rhn.domain.rhnpackage.Package as p
                where p.packageArch = :arch and
                p.packageName.name = :name and
                        p.packageEvr.release = :release and
                        p.packageEvr.version = :version and
                        (p.org is null or p.org = :org)
        ]]>
    </query>

    <query name="Package.lookupByNevraIds">
        <![CDATA[ select p
                from com.redhat.rhn.domain.rhnpackage.Package as p
                where p.packageArch.id = :archId and
                        p.packageName.id = :nameId and
                        p.packageEvr.id = :evrId and
                        (p.org is null or p.org = :org)
        ]]>
    </query>

    <sql-query name="Package.lookupByChannelLabelNevraCs">
        <![CDATA[ select {p.*}
                from
                  rhnPackageArch pa,
                  rhnChannelPackage cp,
                  rhnPackage p,
                  rhnChecksum cs,
                  rhnPackageEVR pe,
                  rhnPackageName pn,
                  rhnChannel c
        where 1=1
            and c.label = :channel
            and pn.name = :name
            and pe.version = :version
            and pe.release = :release
            and c.id = cp.channel_id
            and pa.label = :arch
            and pn.id = p.name_id
            and p.id = cp.package_id
            and p.evr_id = pe.id
            and p.package_arch_id = pa.id
            and p.checksum_id = cs.id
            and (:checksum is null or cs.checksum = :checksum)
        ]]>
        <return alias="p" class="com.redhat.rhn.domain.rhnpackage.Package" />
    </sql-query>

    <sql-query name="Package.findMissingProductPackagesOnServer">
        <![CDATA[
        select {rp.*}
          from
            (
              select pn.name,
                     latest.name_id,
                     lookup_evr((latest.evr).epoch, (latest.evr).version, (latest.evr).release, (latest.evr).type) AS evr_id,
                     latest.arch_label AS ARCH,
                     latest.arch_id
                from
                   (
                    SELECT p.name_id AS name_id,
                           max(pe.evr) AS evr,
                           pa.label AS arch_label,
                           pa.id AS arch_id
                      FROM
                           rhnPackageEVR pe
                      JOIN rhnPackage p ON p.evr_id = pe.id
                      JOIN rhnChannelPackage cp ON cp.package_id = p.id
                      JOIN rhnPackageArch pa ON pa.id = p.package_arch_id
                      JOIN rhnPackageProvides pv on p.id = pv.package_id
                      JOIN rhnPackageCapability c on pv.capability_id = c.id
                      JOIN rhnServerChannel sc on cp.channel_id = sc.channel_id
                     WHERE
                           sc.server_id = :sid
                       and c.name = 'product()'
                  GROUP BY p.name_id, pa.label, pa.id
             ) latest
             JOIN rhnPackageName pn ON pn.id = latest.name_id
            where pn.name not like '%-migration'
              and EXISTS (
                     SELECT 1
                       FROM rhnServerPackage SP
                      WHERE SP.server_id = :sid
              )
              and NOT EXISTS (
                     SELECT 1
                       FROM rhnServerPackage SP
                      WHERE SP.server_id = :sid
                        AND SP.name_id = latest.name_id
                        AND (SP.package_arch_id = latest.arch_id OR SP.package_arch_id IS NULL)
              )
              and NOT EXISTS (
                     select 1
                       FROM rhnServerPackage SP
                       JOIN rhnPackage p_p ON SP.name_id = p_p.name_id and SP.evr_id = p_p.evr_id and SP.package_arch_id = p_p.package_arch_id
                       JOIN rhnPackageProvides p_pv on p_p.id = p_pv.package_id
                       JOIN rhnPackageCapability p_c on p_pv.capability_id = p_c.id
                      WHERE SP.server_id = :sid
                        and p_c.name = pn.name
              )
            ) X
            JOIN rhnPackage rp ON rp.name_id = X.name_id
                 AND rp.evr_id = X.evr_id
                 AND rp.package_arch_id = X.arch_id
        ]]>
        <return alias="rp" class="com.redhat.rhn.domain.rhnpackage.Package" />
    </sql-query>
</hibernate-mapping>
