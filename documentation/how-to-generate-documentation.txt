Generated documentation is available to users at this url:

http://spacewalk.redhat.com/documentation/

The documentation available here used to be stored in SVN, not our
spacewalk.github repo, and auto-pulled into whatever serves content
at the above url.  The SVN repo was this one:
svn checkout svn+ssh://svn.rhndev.redhat.com/svn/rhn-svn/branches/spacewalk_web/LIVE/documentation

As of Spacewalk 2.7, the documentation is now stored in a separate
git repo and pulled into whatever servers content at the documentation
url.  This github repo is:
git clone git@github.com:spacewalkproject/spacewalkproject.github.io.git


To generate the docs, one needs to:

Setup
=====
    * Have available a SW-nightly/PostgreSQL machine, we'll call it 'SW-PGSQL'.  This
      is only needed for the generation of the schema docs
    * Checkout docs from the spacewalkproject.github.io.git repo
    * export DOCS_GIT=<wherever you spacewalkproject.github.io.git checkout is>
    * export SW_GIT=<wherever your spacewalk.github checkout is>
    * export VERS=2.7 # SW-version you're generating docs for
    * export PREV_VERS=2.6 # SW-version prior to $VERS
    * yum install epydoc graphviz # for python
    * javadoc needs to be installed, it needs java-1.x.0-openjdk-devel # for java
          NOTE: the original instructions said it needed java-1.6.0, but I used
	        the default 1.8.0 already installed on my RHEL 6 system.

Javadoc
=======
    # Build
    cd $SW_GIT/documentation; make java
    # Move to DOCS_GIT repo
    rm -rf $DOCS_GIT/documentation/javadoc; cp -r $SW_GIT/documentation/javadoc $DOCS_GIT/documentation
    # Check your work
    cd $DOCS_GIT; git status
    # if sane file list, like a few additions, few deletions, and several modifications,
    # check the content
    git diff
    # if all looks good, commit it.
    git add --all; git commit -m "Updating java documentation for $VERS"


Python
======
    # Note: in last version of epydoc (epydoc-3.0.1-15) is missing fix introduced in upstream r1728,
    # if it's not applied next step will probably end up with exception
    # Build
    cd $SW_GIT/documentation; make python
    # Move to DOCS_GIT repo
    rm -rf $DOCS_GIT/documentation/python-doc; cp -r $SW_GIT/documentation/python-doc $DOCS_GIT/documentation
    # Check your work
    cd $DOCS_GIT; git status
    # if sane file list, like a few additions, few deletions, and several modifications,
    # check the content
    git diff
    # if all looks good, commit it.
    git add --all; git commit -m "Updating python documentation for $VERS"


API docs
========
  * The following, unless you're already on a dev-workstation setup:
    # remove apache-ivy :-(
    # install ivy from http://mirrors.dotsrc.org/jpackage/5.0/generic/free/
    # install ant and ant-junit

  * Then:
    # Build
    cd $SW_GIT/java; ant apidoc-html
    # Move to DOCS_GIT repo
    rm -rf $DOCS_GIT/documentation/api/$VERS; cp -r $SW_GIT/java/build/reports/apidocs/html $DOCS_GIT/documentation/api/$VERS
    # Check your work
    cd $DOCS_GIT; git status
    # if sane file list, like a few additions, few deletions, and several modifications,
    # check the content
    git diff
    # if all looks good, commit it.
    git add --all; git commit -m "Updating API documentation for $VERS"


schema-docs
===========
  Get schema-visualization tools:
  ------------------------------
    Download SchemaSpy from https://sourceforge.net/projects/schemaspy/files/latest/download?source=files and copy
    to the SW-PGSQL system in /tmp directory

  Log into SW-PGSQL and :
  ----------------------
    # Get required tools
    yum install -y graphviz
    # Run the schema-visualization tool
    # NOTE: user/pass/db from /etc/rhn/rhn.conf db_user, db_password, db_name
    java -jar /tmp/schemaSpy_5.0.0.jar -t pgsql -db <db_name> -s public -host localhost -u <db_user> -p <db_password> -o db-schema -dp /usr/share/java/postgresql-jdbc.jar  
    # Send the results home
    scp -r db-schema <YOU>@<MACHINE-WITH-YOUR-DOCS_GIT-CHECKOUT>:/tmp

  Back to <MACHINE-WITH-YOUR-DOCS_GIT-CHECKOUT>:
  ---------------------------------------------
    # Move to DOCS_GIT repo
    rm -rf $DOCS_GIT/documentation/schema-doc; cp -r /tmp/db-schema $DOCS_GIT/documentation/schema-doc
    # Check your work
    cd $DOCS_GIT; git status
    # if sane file list, like a few additions, few deletions, and several modifications,
    # check the content
    git diff
    # if all looks good, commit it.
    git add --all; git commit -m "Updating Schema documentation for $VERS"


push all commits
================
    cd $DOC_GIT; git push
