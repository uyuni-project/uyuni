<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.server.Server" table="rhnServer">
        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="sequence">
                <param name="sequence">rhn_server_id_seq</param>
            </generator>
        </id>

        <property name="digitalServerId" column="digital_server_id" type="string"
            length="1024"/>
        <property name="os" column="os" type="string" length="64"/>
        <property name="release" column="release" type="string" length="64"/>
        <property name="name" column="name" type="string" length="128"/>
        <property name="description" column="description" type="string"
            length="256"/>
        <property name="info" column="info" type="string" length="128"/>
        <property name="secret" column="secret" type="string" length="64"/>
        <property name="created" column="created" type="timestamp"
            insert="false" update="false"/>
        <property name="modified" column="modified" type="timestamp"
            insert="false" update="false"/>
        <property name="autoUpdate" column="auto_update" type="string" length="1"/>
        <property name="runningKernel" column="running_kernel" type="string"
            length="64"/>
        <property name="lastBoot" column="last_boot" type="long"/>
        <property name="channelsChanged" column="channels_changed" type="date"/>
        <property name="cobblerId" column="cobbler_id"  type="string" length="64" />
        <property name="machineId" column="machine_id"  type="string" length="256" />
        <property name="hostname" column="hostname" type="string" length="128" />
        <property name="payg" column="PAYG" type="yes_no"/>

        <set name="notes" cascade="all-delete-orphan" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.Note"/>
        </set>

        <set name="devices" cascade="all" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.Device"/>
        </set>

        <set name="networkInterfaces" cascade="all-delete-orphan" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.NetworkInterface"/>
        </set>

        <set name="customDataValues" cascade="all" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.CustomDataValue"/>
        </set>

        <set name="channels" lazy="true" table="rhnServerChannel" cascade="all">
            <key column="server_id"/>
            <many-to-many class="com.redhat.rhn.domain.channel.Channel"
                column="channel_id"/>
        </set>

        <set name="fqdns" cascade="all-delete-orphan" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.ServerFQDN"/>
        </set>

        <list  name="configChannelsHibernate" lazy="true" table="rhnServerConfigChannel"
             cascade="all" where="(position > 0)"
         collection-type="com.redhat.rhn.common.hibernate.ForceRecreationListType">
             <key column="server_id"/>
            <list-index column="position" base="1"/>
            <many-to-many class="com.redhat.rhn.domain.config.ConfigChannel"
                column="config_channel_id"/>
        </list>

        <set  name="localChannels" lazy="true" table="rhnServerConfigChannel"
             cascade="all" where="(position is null)">
             <key column="server_id"/>
             <many-to-many class="com.redhat.rhn.domain.config.ConfigChannel"
                column="config_channel_id"/>
        </set>

        <set name="virtualGuests" inverse="true" lazy="true" outer-join="true"
            cascade="all">
                <key column="host_system_id"/>
                <one-to-many class="com.redhat.rhn.domain.server.VirtualInstance"/>
        </set>

        <set name="groups" table="rhnServerGroupMembers" inverse="true" lazy="true">
            <key column="server_id"/>
            <many-to-many column="server_group_id" class="com.redhat.rhn.domain.server.ServerGroup"/>
        </set>

        <set name="capabilities" lazy="true" inverse="true" table="rhnClientCapability" cascade="all-delete-orphan">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.ClientCapability"/>
        </set>

        <many-to-one name="org" class="com.redhat.rhn.domain.org.Org"
            column="org_id" lazy="proxy"/>

        <many-to-one name="creator" class="com.redhat.rhn.domain.user.legacy.UserImpl"
            column="creator_id" lazy="proxy"/>

        <many-to-one name="serverArch"
            class="com.redhat.rhn.domain.server.ServerArch"
            column="server_arch_id" lazy="proxy"/>

        <many-to-one name="contactMethod"
            class="com.redhat.rhn.domain.server.ContactMethod"
            column="contact_method_id" lazy="proxy"/>

        <many-to-one name="provisionState"
            class="com.redhat.rhn.domain.common.ProvisionState"
            column="provision_state_id" cascade="save-update" lazy="proxy"/>

        <many-to-one name="maintenanceSchedule"
            class="com.suse.manager.model.maintenance.MaintenanceSchedule"
            column="maintenance_schedule_id" lazy="proxy"/>

        <one-to-one name="serverInfo"
            class="com.redhat.rhn.domain.server.ServerInfo" cascade="all" lazy="proxy"/>

        <set name="serverPaths" cascade="all-delete-orphan" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.ServerPath"/>
        </set>

        <one-to-one name="cpu" class="com.redhat.rhn.domain.server.CPU"
            property-ref="server" cascade="all" lazy="proxy"/>

        <one-to-one name="crashCount" class="com.redhat.rhn.domain.server.CrashCount"
            cascade="all" lazy="proxy"/>

        <set name="crashes" cascade="all-delete-orphan" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.Crash"/>
        </set>

        <one-to-one name="lock" class="com.redhat.rhn.domain.server.ServerLock"
                    cascade="all" lazy="proxy"/>

        <one-to-one name="serverUuid" class="com.redhat.rhn.domain.server.ServerUuid"
                    cascade="all" lazy="proxy"/>

        <one-to-one name="proxyInfo" class="com.redhat.rhn.domain.server.ProxyInfo"
                    cascade="all" lazy="proxy"/>

        <one-to-one name="pushClient" class="com.redhat.rhn.domain.server.PushClient"
                    property-ref="server" lazy="proxy" />

        <!--
        we want to access the ram object via the field directly.
        The setRam method is used to set the total amount of ram on
        a server with a long.  I don't want th users to have to
        create a RAM object on a server.
        -->
        <one-to-one name="ram" class="com.redhat.rhn.domain.server.Ram"
            property-ref="server" cascade="all" access="field" lazy="proxy"/>
        <one-to-one name="dmi" class="com.redhat.rhn.domain.server.Dmi"
            property-ref="server" cascade="all" lazy="proxy"/>
        <one-to-one name="location" class="com.redhat.rhn.domain.server.Location"
            property-ref="server" cascade="all" lazy="proxy" />

        <one-to-one name="virtualInstance"
                    class="com.redhat.rhn.domain.server.VirtualInstance"
                    property-ref="guestSystem"
                    cascade="save-update" lazy="proxy"/>

        <set name="history" cascade="all" lazy="true" inverse="true">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.ServerHistoryEvent" />
        </set>

        <set name="packages" inverse="true" cascade="all-delete-orphan">
            <key column="server_id"/>
            <one-to-many class="com.redhat.rhn.domain.server.InstalledPackage"/>
        </set>

        <set name="installedProducts" table="suseServerInstalledProduct"
             lazy="true" cascade="save-update">
            <key column="rhn_server_id"/>
            <many-to-many column="suse_installed_product_id" class="com.redhat.rhn.domain.server.InstalledProduct"/>
        </set>

        <joined-subclass name="com.redhat.rhn.domain.server.SatelliteServer"
            table="rhnSatelliteInfo">
            <key column="server_id"/>
            <property name="product" />
            <property name="owner" />
            <property name="issued" column="issued_string" />
            <property name="expiration" column="expiration_string" />
                <many-to-one name="version" class="com.redhat.rhn.domain.rhnpackage.PackageEvr"
                column="evr_id" cascade="none" access="field"/>
        </joined-subclass>

        <joined-subclass name="com.redhat.rhn.domain.server.MinionServer"
                         table="suseMinionInfo">
            <key column="server_id"/>
            <property name="minionId" column="minion_id" />
            <property name="osFamily" column="os_family"  type="string" length="32" />
            <property name="kernelLiveVersion" column="kernel_live_version"  type="string" length="255" />
            <set name="accessTokens" lazy="true" inverse="true">
                <key column="minion_id"/>
                <one-to-many class="com.redhat.rhn.domain.channel.AccessToken"/>
            </set>
        </joined-subclass>
    </class>

    <query name="Server.findByIdandOrgId">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where s.id = :sid and ORG_ID = :orgId]]>
    </query>

    <query name="Server.findByIdsAndOrgId">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where ORG_ID = :orgId and s.id in (:serverIds)]]>
    </query>

    <query name="Server.findByIds">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where s.id in (:serverIds)]]>
    </query>

    <query name="Server.findMinionsByServerIds">
        <![CDATA[from com.redhat.rhn.domain.server.MinionServer as s where s.id in (:serverIds)]]>
    </query>
    
     <query name="Server.listRedHatSystems">
        <![CDATA[ select s.id
                                        from com.redhat.rhn.domain.server.Server as s
                                        where s.id in (:sids) and s.serverArch.archType.label != 'sysv-solaris']]>
    </query>

    <query name="Server.listOrgSystems">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where ORG_ID = :orgId]]>
    </query>

     <query name="Server.listConfigEnabledSystems">
        <![CDATA[ select s
                                 from com.redhat.rhn.domain.server.Server as s
                                         inner join s.groups as sg
                                         inner join sg.groupType.features as f
                                         inner join s.capabilities as c
                                        where (sg.groupType is not null) and f.label='ftr_config' and c.id.capability.name like 'configfiles%']]>
    </query>

    <query name="Server.listMinionsByChannel">
        <![CDATA[ select ms
                                 from com.redhat.rhn.domain.server.MinionServer as ms
                                         inner join ms.channels as c
                                        where c.id = :cid]]>
    </query>

    <query name="Server.listFqdns">
        <![CDATA[ select name
                  from com.redhat.rhn.domain.server.ServerFQDN as fqdn
                  where fqdn.server.id = :sid]]>
    </query>

    <query name="Server.findByFqdn">
        <![CDATA[ select s
                  from com.redhat.rhn.domain.server.Server as s
                  join s.fqdns as fqdn
                  where fqdn.name = :name
        ]]>
    </query>

     <query name="Server.listConfigDiffEnabledSystems">
        <![CDATA[ select s
                      from com.redhat.rhn.domain.server.Server as s
                          inner join s.groups as sg
                          inner join sg.groupType.features as f
                          inner join s.capabilities as c
                      where (sg.groupType is not null) and f.label='ftr_config' and c.id.capability.name = 'configfiles.diff'
                      order by s.id asc
        ]]>
    </query>

    <query name="Server.listProxySystemsHierarchy">
        <![CDATA[ select
                new com.redhat.rhn.manager.visualization.json.System(
                    s.id,
                    CASE
                      WHEN (pi is not null and sp is null)
                    THEN 'root'
                    ELSE cast(sp.id.proxyServer.id as string)
                    END AS parentId,
                    s.name,
                    s.contactMethod.label,
                    c.name,
                    g.groupType.label,
                    s.serverInfo.checkin,
                    CASE
                      WHEN (pi is not null)
                    THEN 'proxy'
                    ELSE 'system'
                    END AS type
                )
                from Server s
                    left join s.serverPaths sp
                    left join s.proxyInfo pi
                    left join s.channels c
                    left join s.groups g
                where c.parentChannel is NULL and
                    g.groupType.isBaseChar = 'Y' and
                    s.org = :org and
                    ((pi is not null and sp is null) or sp.position = 0)]]>
    </query>

    <query name="Server.listSystems">
        <![CDATA[ select
                new com.redhat.rhn.manager.visualization.json.System(s.id, s.name, s.contactMethod.label, c.name, g.groupType.label, s.serverInfo.checkin)
                from Server s
                    left join s.channels c
                    left join s.groups g
                where c.parentChannel is NULL and
                    g.groupType.isBaseChar = 'Y' and
                    s.org = :org]]>
    </query>

    <query name="Server.systemIdManagedGroupName">
        <![CDATA[ select
                s.id, g.name
                from Server s
                    left join s.groups g
                where s.org = :org and
                    g.org = :org and
                    (g.groupType is null)]]>
    </query>

    <query name="Server.listHostSystems">
        <![CDATA[ select
                new com.redhat.rhn.manager.visualization.json.System(s.id, s.name, s.contactMethod.label, c.name, g.groupType.label, s.serverInfo.checkin)
                from Server s
                    left join s.channels c
                    left join s.groups g
                where c.parentChannel is NULL and
                    g.groupType.isBaseChar = 'Y' and
                    s.org = :org and
                    exists (select 1 from VirtualInstance vi where vi.hostSystem = s)
    ]]>
    </query>

    <query name="Server.serverInstalledProductNames">
        <![CDATA[ select
                s.id, ip.name
                from Server s
                    left join s.installedProducts ip
                where
                    s.org = :org
    ]]>
    </query>

    <query name="Server.findNonZypperTradClientsIds">
        <![CDATA[SELECT s.id
                 FROM Server s
                 WHERE s.class != com.redhat.rhn.domain.server.MinionServer
                     AND s.id in (:serverIds)
                     AND NOT EXISTS (SELECT 1
                                     FROM com.redhat.rhn.domain.server.InstalledPackage as p
                                     JOIN p.name as n 
                                     JOIN p.server as s2
                                     WHERE s.id = s2.id
                                         AND n.name = 'zypper')
        ]]>
    </query>
    
    <sql-query name="Server.findUnscheduledErrataByServerIds">
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="errataId" type="long"/>
        <![CDATA[SELECT SNPC.server_id as serverId, E.id as errataId
                 FROM rhnErrata E, rhnServerNeededErrataCache SNPC
                 WHERE EXISTS (SELECT 1
                               FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id AND USP.server_id = SNPC.server_id)
                     AND SNPC.server_id in (:serverIds)
                     AND SNPC.errata_id = E.id
                     AND NOT EXISTS (SELECT 1
                                     FROM rhnActionErrataUpdate AEU, rhnServerAction SA, rhnActionStatus AST
                                     WHERE SA.server_id = SNPC.server_id
                                         AND SA.status = AST.id
                                         AND AST.name IN('Queued', 'Picked Up')
                                         AND AEU.action_id = SA.action_id
                                         AND AEU.errata_id = E.id )
                 ORDER BY E.id
        ]]>
    </sql-query>
    
    <sql-query name="Server.serverIdVirtualHostManagerId">
        <return-scalar column="server_id" type="long"/>
        <return-scalar column="vhmserver_id" type="long"/>
        <![CDATA[select server_id, vhmserver_id
            from suseServerVirtualHostManager
        ]]>
    </sql-query>

    <query name="Server.listGuestSystems">
        <![CDATA[ select
                new com.redhat.rhn.manager.visualization.json.System(s.id, vi.hostSystem.id, s.name, s.contactMethod.label, c.name, g.groupType.label, s.serverInfo.checkin)
                from Server s, VirtualInstance vi
                    left join s.channels c
                    left join s.groups g
                where c.parentChannel is NULL and
                    g.groupType.isBaseChar = 'Y' and
                    s.org = :org and
                    vi.guestSystem = s and
                    vi.hostSystem is not null and
                    vi.uuid is not null
    ]]>
    </query>

    <query name="MinionServer.listSSHMinionsIdsAndContactMethods">
        <![CDATA[ select s.minionId, m.label
           from com.redhat.rhn.domain.server.MinionServer as s
           inner join s.contactMethod as m
           where m.label in ('ssh-push', 'ssh-push-tunnel')
        ]]>
    </query>

    <query name="Server.findServerIdsByMinionIds">
    <![CDATA[
        SELECT s.minionId, s.id
            FROM Server AS s
            WHERE s.class = com.redhat.rhn.domain.server.MinionServer
                AND s.minionId IN (:minionIds)
    ]]>
    </query>

    <sql-query name="Server.listMinionIdMappings">
        <return-scalar column="minion_id" type="string"/>
        <return-scalar column="server_id" type="long"/>
        <![CDATA[
         SELECT m.minion_id AS minion_id, s.id AS server_id
             FROM rhnServer s
                 JOIN suseMinionInfo m ON s.id = m.server_id
                 WHERE EXISTS (SELECT 1
                               FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id AND USP.server_id = s.id)
        ]]>
    </sql-query>


    <sql-query name="Server.lookupAdministrators">
        <![CDATA[select {wc.*}
                                                from WEB_CONTACT wc
                                                inner join rhnUserServerPerms usp on wc.id = usp.user_id
                                                inner join rhnServer S on S.id = usp.server_id
                  where
                                s.id = :sid
                                and s.org_id = :org_id
                                ]]>
                <return alias="wc" class="com.redhat.rhn.domain.user.legacy.UserImpl"/>
    </sql-query>

    <sql-query name="Server.listProxies">
        <![CDATA[select S.id
                                        from rhnServer S
                                        inner join rhnUserServerPerms USP on USP.server_id = S.id
                                        inner join rhnProxyInfo rpi on rpi.server_id = S.id
                                        where S.org_id = :orgId
                                        and USP.user_id = :userId
                                ]]>
    </sql-query>

     <sql-query name="Server.findInSet">
     <![CDATA[
         select S.*,
           case when ss.server_id is not null then 2
                when proxy.server_id is not null then 3
                when S.id is not null then 0 end as clazz_
             from rhnServer S
                     left outer join  rhnSatelliteInfo SS on S.id = SS.server_id
                     left outer join  rhnProxyInfo proxy on S.id = proxy.server_id
                     inner join rhnSet ST on S.id = st.element
             where
                 ST.user_id = :userId
                 and ST.label = :label
                 and S.id not in (SELECT server_id FROM rhnProxyInfo)
           ]]>
        <return alias="S" class="com.redhat.rhn.domain.server.Server" />
    </sql-query>

    <sql-query name="Server.listErrataNamesForServers">
        <return-scalar column="errataId" type="long"/>
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="advisoryName" type="string"/>
        <return-scalar column="updateTag" type="string"/>
        <return-scalar column="updateStack" type="boolean"/>
        <return-scalar column="includeSalt" type="boolean"/>
        <![CDATA[
          SELECT DISTINCT
            e.id AS errataId,
            sc.server_id AS serverId,
            e.advisory_name AS advisoryName,
            c.update_tag AS updateTag,
            CASE
              WHEN (SELECT COUNT(*) FROM rhnErrataKeyword k WHERE e.id = k.errata_id AND k.keyword = 'restart_suggested') > 0
            THEN 1
            ELSE 0
            END AS updateStack,
            CASE
              WHEN (SELECT COUNT(*) FROM rhnErrataPackage k WHERE e.id = k.errata_id AND k.package_id IN
                (SELECT id FROM rhnPackage p WHERE p.name_id IN
                  (SELECT id FROM rhnPackageName pn WHERE pn.name = 'salt'))) > 0
            THEN 1
            ELSE 0
            END AS includeSalt
          FROM rhnErrata e
              JOIN rhnChannelErrata ce ON e.id = ce.errata_id
              JOIN rhnChannel c ON ce.channel_id = c.id
              JOIN rhnServerChannel sc ON c.id = sc.channel_id
          WHERE e.id in (:errataIds) AND
              sc.server_id in (:serverIds)
        ]]>
    </sql-query>

    <!--Lists all patch counts per server, grouped by advisory type-->
    <sql-query name="Server.listPatchCountsForAllServers">
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="advisoryType" type="string"/>
        <return-scalar column="patchCount" type="integer"/>
        <![CDATA[select s.id as serverId, e.advisory_type as advisoryType, count(e.id) as patchCount
                 FROM
                      rhnServerNeededErrataCache cache,
                      rhnServer s,
                      rhnErrata e
                 WHERE
                       s.org_id = :orgId AND
                       cache.server_id = s.id AND
                       cache.errata_id = e.id
                 GROUP BY
                       s.id, e.advisory_type
        ]]>
    </sql-query>

    <sql-query name="Server.listNewestPkgsForServerErrata">
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="packageName" type="string"/>
        <return-scalar column="packageVersion" type="string"/>
        <![CDATA[select X.server_id as serverId, X.name as packageName,
            case when (X.evr).epoch is null
                then (X.evr).version || '-' || (X.evr).release
                else (X.evr).epoch || ':' || (X.evr).version || '-' || (X.evr).release
            end  as packageVersion
            FROM ( select distinct sc.server_id, pn.name, max(pevr.evr) evr
                 FROM rhnErrata e,
                      rhnServerChannel sc,
                      rhnChannelErrata ce,
                      rhnErrataPackage ep,
                      rhnServerPackage sp,
                      rhnPackage p,
                      rhnPackageEVR pevr,
                      rhnPackageEVR spevr,
                      rhnPackageName pn
                 WHERE e.id in (:errataIds) AND
                      sc.server_id in (:serverIds) AND
                      e.id = ce.errata_id AND
                      sc.channel_id = ce.channel_id AND
                      e.id = ep.errata_id AND
                      ep.package_id = p.id AND
                      p.name_id = sp.name_id AND
                      p.evr_id = pevr.id AND
                      sp.evr_id = spevr.id AND
                      pevr.evr > spevr.evr AND
                      p.package_arch_id = sp.package_arch_id AND
                      p.name_id = pn.id
                 GROUP BY sc.server_id, pn.name) X]]>
    </sql-query>

    <sql-query name="Server.findServerInSSMByChannel">
        <return-scalar column="serverId" type="long"/>
        <![CDATA[
            SELECT s.id AS serverId
            FROM rhnServer s
                JOIN rhnServerChannel sc ON s.id=sc.server_id AND sc.channel_id=:channel_id
                JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
        ]]>
    </sql-query>

</hibernate-mapping>
