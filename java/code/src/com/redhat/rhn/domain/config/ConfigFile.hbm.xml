<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
        <class name="com.redhat.rhn.domain.config.ConfigFile" table="rhnConfigFile"
                >
                <id name="id" type="long" column="id">
                        <meta attribute="scope-set">protected</meta>
                        <generator class="assigned" />
                </id>
                <property name="created" column="created" type="timestamp" />
                <property name="modified" column="modified" type="timestamp" />
                <many-to-one name="latestConfigRevision"
                    class="com.redhat.rhn.domain.config.ConfigRevision"
                    column="latest_config_revision_id" cascade="none" />
<!-- "cascade=none??" you say?  Config Revisions, Config Channels
     and Config Files all use stored procedures for insertions
     meaning that hibernate doesn't do it intelligently -->
                <many-to-one name="configChannel"
                        class="com.redhat.rhn.domain.config.ConfigChannel"
                        column="config_channel_id" cascade="none" />
                <many-to-one name="configFileName"
                        class="com.redhat.rhn.domain.config.ConfigFileName"
                        column="config_file_name_id" cascade="none" />
                <many-to-one name="configFileState"
                        class="com.redhat.rhn.domain.config.ConfigFileState"
                        column="state_id"/>

        </class>

        <query name="ConfigFile.findByChannelAndName">
        <![CDATA[from com.redhat.rhn.domain.config.ConfigFile as c
                        where c.configChannel.id = :channel_id
                          and c.configFileName.id = :name_id
                          and c.configFileState.id = :state_id]]>
    </query>
</hibernate-mapping>
