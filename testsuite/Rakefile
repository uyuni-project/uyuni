require 'rake'
require 'rubygems'
require 'yaml'
require 'cucumber/rake/task'
require 'rake/task'
require 'parallel'

junit_results = '-f junit -o results_junit'

namespace :cucumber do
  Dir.glob(File.join(Dir.pwd, 'run_sets', '*.yml')).each do |entry|
    Cucumber::Rake::Task.new(File.basename(entry, '.yml').to_sym) do |t|
      filename = File.basename(entry, '.yml').to_sym
      timestamp = Time.now.strftime('%Y%m%d%H%M%S')
      json_results = "-f json -o output_#{timestamp}-#{filename}.json"
      html_results = "-f html -o output_#{timestamp}-#{filename}.html"
      profiles = ENV['PROFILE']
      # Our profiles include a --tags keyword in all of them, if we have multiple profiles in the list
      # it will act as an intersection of tags, not as an union of them.
      include_profiles = profiles.nil? ? '--profile default' : '--profile ' + profiles.gsub(',', ' --profile ')
      tags = ENV['TAGS']
      # We provide the list of tags including the '@', so if necessary we can provide a negative tag '~@' on this list.
      # We generate the tags list as an union of tags, not as an intersection of them (that would be using multiple times `--tags`)
      # WARNING: When we upgrade Cucumber 2.0.0 to a higher version, we need to use the new Tags expression implementation
      include_tags =  tags.nil? ? [] : ['--tags', tags]
      cucumber_opts = %W[#{include_profiles} #{html_results} #{json_results} #{junit_results} -f pretty --out failed.txt -r features] + include_tags
      features = YAML.safe_load(File.read(entry))
      t.cucumber_opts = cucumber_opts + features unless features.nil?
    end
  end
end

namespace :parallel do
  Dir.glob(File.join(Dir.pwd, 'run_sets', '*.yml')).each do |entry|
    run_set = File.basename(entry, '.yml').to_sym
    desc "Run Cucumber #{run_set} features in parallel"
    task "#{run_set}" do
      timestamp = Time.now.strftime('%Y%m%d%H%M%S')
      features = YAML.safe_load(File.read(File.join(Dir.pwd, 'run_sets', "#{run_set}.yml"))).join(' ')
      profiles = ENV['PROFILE']
      include_profiles = profiles.nil? ? '--profile default' : '--profile ' + profiles.gsub(',', ' --profile ')
      tags = ENV['TAGS']
      include_tags =  tags.nil? ? '' : "--tags #{tags}"
      cucumber_opts = "#{include_profiles} #{include_tags} -f html -o output_#{timestamp}-#{run_set}-$TEST_ENV_NUMBER.html -f json -o output_#{timestamp}-#{run_set}-$TEST_ENV_NUMBER.json #{junit_results} -f CustomFormatter::PrettyFormatter -r features "
      sh "bundle exec parallel_cucumber -n 6 -o '#{cucumber_opts}' #{features}"
    end
  end
end

namespace :utils do
  desc 'Generate feature file for a client from a template and include it in a yaml file'
  task :generate_feature, [:template_path, :client_name, :output_path, :yaml_path] do |t, args|
    # TODO: We want to use English language in our Cucumber .feature files, so we need a map here to don't use `ceos7_minion` but `CENTOS 7 Minion`
    output_filepath = "#{args[:output_path]}/#{args[:client_name]}_#{File.basename(args[:template_path], '.*')}.feature"
    sh "sed 's/<client>/#{args[:client_name]}/g' #{args[:template_path]} > #{output_filepath}", verbose: false
    sh "sed -i 's/<type>/#{get_client_type(args[:client_name])}/g' #{output_filepath}", verbose: false
    sh "echo '- #{output_filepath}' >> #{args[:yaml_path]}", verbose: false
  end

  desc 'Generate smoke tests for all the clients'
  task :generate_smoke_tests do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.reject! { |client| client.include? 'proxy' }
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke('features/build_validation/smoke_tests/smoke_tests.template',
                                           File.basename(client,'.feature'),
                                           'features/build_validation/smoke_tests',
                                           'run_sets/build_validation_smoke_tests.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to add Maintenance Update Channels and repositories for all the clients'
  task :generate_add_maintenance_update_repository_features do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.reject! { |client| client.include? 'ssh'}
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke('features/build_validation/add_custom_repositories/add_maintenance_update_repository.template',
                                           File.basename(client,'.feature'),
                                           'features/build_validation/add_custom_repositories',
                                           'run_sets/build_validation_add_custom_repositories.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to add Activation Keys for all the clients'
  task :generate_add_activation_keys_features do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke('features/build_validation/add_activation_keys/add_activation_key.template',
                                                  File.basename(client,'.feature'),
                                                  'features/build_validation/add_activation_keys',
                                                  'run_sets/build_validation_add_activation_keys.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate all the features we need for a Build Validation from templates'
  task :generate_build_validation_features do
    Rake::Task['utils:generate_smoke_tests'].invoke
    Rake::Task['utils:generate_smoke_tests'].reenable
    Rake::Task['utils:generate_add_maintenance_update_repository_features'].invoke
    Rake::Task['utils:generate_add_maintenance_update_repository_features'].reenable
    Rake::Task['utils:generate_add_activation_keys_features'].invoke
    Rake::Task['utils:generate_add_activation_keys_features'].reenable
  end

  desc 'Generate test report'
  task :generate_test_report do
    sh 'rm -rf ./cucumber_report && mkdir cucumber_report', verbose: false
    sh 'timeout 180 bash -c -- "while find output*.json -type f -size 0 | grep json; do sleep 10;done"', verbose: false
    sh 'node index.js &> cucumber_reporter.log', verbose: false
  end

  def get_client_type(name)
    if name.include? '_client'
      'traditional'
    else
      'salt'
    end
  end
end
