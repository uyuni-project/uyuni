/*
 * Copyright (c) 2024 SUSE LLC
 *
 * This software is licensed to you under the GNU General Public License,
 * version 2 (GPLv2). There is NO WARRANTY for this software, express or
 * implied, including the implied warranties of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
 * along with this software; if not, see
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
 *
 * Red Hat trademarks are not licensed under GPLv2. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */

CREATE TABLE IF NOT EXISTS suseOVALOsProduct
(
    id          NUMERIC NOT NULL
        CONSTRAINT suse_oval_os_product_id_pk PRIMARY KEY,
    os_family   VARCHAR NOT NULL,
    version     VARCHAR NOT NULL
);

CREATE SEQUENCE IF NOT EXISTS suse_oval_os_product_id_seq;

CREATE UNIQUE INDEX IF NOT EXISTS suse_oval_os_family_version_uq
    ON suseOVALOsProduct(os_family, version);

/*
* This block checks if the 'product_os_id' column exists in the suseOVALPlatformVulnerablePackage table.
* If the column does not exist, it truncates the table, restarts the identity sequence,
* and adds the product_os_id column as a NOT NULL type.
*/
DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1
            FROM information_schema.columns
            WHERE table_name = 'suseovalplatformvulnerablepackage' AND column_name = 'product_os_id'
        ) THEN
            TRUNCATE suseOVALPlatformVulnerablePackage RESTART IDENTITY;
            -- noinspection SqlAddNotNullColumn
            ALTER TABLE suseOVALPlatformVulnerablePackage
                ADD COLUMN product_os_id NUMERIC NOT NULL;
        END IF;
    END $$;

ALTER TABLE suseOVALPlatformVulnerablePackage
    DROP CONSTRAINT suse_oval_platform_vulnerable_pkg_id_pk;
ALTER TABLE suseOVALPlatformVulnerablePackage
    ADD CONSTRAINT suse_oval_platform_vulnerable_pkg_id_pk PRIMARY KEY (product_os_id, platform_id, cve_id, vulnerable_pkg_id);

ALTER TABLE suseOVALPlatformVulnerablePackage ADD CONSTRAINT suse_oval_platform_vulnerable_pkg_os_product_id_fkey
    FOREIGN KEY (product_os_id) REFERENCES suseOVALOsProduct(id) ON DELETE CASCADE;

DROP PROCEDURE IF exists insert_product_vulnerable_packages(package_name_in varchar,fix_version_in varchar,product_cpe_in varchar,cve_name_in varchar);
CREATE OR REPLACE PROCEDURE
    insert_product_vulnerable_packages(product_os_family_in varchar, product_os_version_in varchar, package_name_in varchar,fix_version_in varchar,platform_cpe_in varchar,cve_name_in varchar)
AS
$$
DECLARE
    cve_id_val numeric;
    platform_cpe_id_val numeric;
    vulnerable_pkg_id_val numeric;
    product_os_id_val numeric;
begin

    cve_id_val := lookup_cve(cve_name_in);

    platform_cpe_id_val := lookup_oval_platform(platform_cpe_in);

    -- Check if the suseOVALOsProduct exists, if not insert it.
    IF NOT EXISTS (
        SELECT 1
        FROM suseOVALOsProduct
        WHERE os_family = product_os_family_in
          AND version = product_os_version_in
    ) THEN
        INSERT INTO suseOVALOsProduct(id, os_family, version)
        VALUES (nextval('suse_oval_os_product_id_seq'), product_os_family_in, product_os_version_in);
    END IF;

    SELECT id INTO product_os_id_val
    FROM suseOVALOsProduct
    WHERE os_family = product_os_family_in AND version = product_os_version_in;

    IF NOT EXISTS(SELECT 1
                  FROM suseovalvulnerablepackage
                  WHERE name = package_name_in
                    AND ((fix_version IS NOT NULL AND fix_version = fix_version_in) OR
                         (fix_version IS NULL AND fix_version_in IS NULL))) THEN
        INSERT INTO suseovalvulnerablepackage(id, name, fix_version)
        VALUES (nextval('suse_oval_vulnerable_pkg_id_seq'), package_name_in, fix_version_in);
    END IF;

    SELECT id
    INTO vulnerable_pkg_id_val
    FROM suseovalvulnerablepackage
    WHERE name = package_name_in
      AND ((fix_version IS NOT NULL AND fix_version = fix_version_in) OR
           (fix_version IS NULL AND fix_version_in IS NULL));

    INSERT INTO suseOVALPlatformVulnerablePackage(product_os_id, platform_id, cve_id, vulnerable_pkg_id)
    VALUES (product_os_id_val, platform_cpe_id_val, cve_id_val, vulnerable_pkg_id_val)
    ON CONFLICT(product_os_id, platform_id, cve_id, vulnerable_pkg_id) DO UPDATE
        SET platform_id       = EXCLUDED.platform_id,
            cve_id            = EXCLUDED.cve_id,
            vulnerable_pkg_id = EXCLUDED.vulnerable_pkg_id,
            product_os_id     = EXCLUDED.product_os_id;
end;
$$ language plpgsql;