<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
	<class name="com.redhat.rhn.domain.user.legacy.UserImpl"
           table="WEB_CONTACT">
        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="sequence">
                <param name="sequence">WEB_CONTACT_ID_SEQ</param>
            </generator>
        </id>
        <property name="login" column="login" type="string" length="64" />
        <property name="loginUc" column="login_uc" type="string" length="64" />
        <!-- Make sure we set access=field on password, since the setPassword method of
             UserImpl encodes the password every time -->
        <property name="password" column="password" type="string" length="110" access="field" />

        <property name="created" column="created" type="timestamp"
                  insert="false" update="false"/>
        <property name="modified" column="modified" type="timestamp"
                  insert="false" update="false"/>
        <property name="readOnly" column="read_only" type="string"/>
        <one-to-one name="personalInfo"
                    class="com.redhat.rhn.domain.user.legacy.PersonalInfo"
                    outer-join="true"
                    cascade="all"
                    constrained="true" />
        <one-to-one name="userInfo"
                    class="com.redhat.rhn.domain.user.legacy.UserInfo"
                    outer-join="true"
                    cascade="all"
                    constrained="true" />
        <many-to-one name="org"
                     column="org_id"
                     class="com.redhat.rhn.domain.org.Org"
                     outer-join="true"
                     not-null="true" />
        <set name="addresses" cascade="all">
            <key column="web_user_id"/>
            <one-to-many class="com.redhat.rhn.domain.user.AddressImpl" />
        </set>
        <set name="groupMembers" lazy="true" inverse="true" cascade="delete">
            <key column="user_id"/>
            <one-to-many class="com.redhat.rhn.domain.org.usergroup.UserGroupMembers"/>
        </set>
        <set name="notificationMethods" table="rhn_contact_methods" lazy="true"
			inverse="true" cascade="none">
            <key column="contact_id" />
            <one-to-many class="com.redhat.rhn.domain.monitoring.notification.Method"/>
        </set>
        <set name="stateChanges" lazy="true"
            cascade="save-update" sort="natural">
            <key column="web_contact_id"/>
            <one-to-many class="com.redhat.rhn.domain.user.StateChange" />
        </set>
        <set name = "hiddenPanes"
		table="RHNUSERINFOPANE"
		lazy="true"
		cascade="all">
		<key column="user_id"/>
		<many-to-many class ="com.redhat.rhn.domain.user.Pane" column="pane_id"/>
        </set>
        <set name="associatedServerGroups" lazy="true" table="rhnUserServerGroupPerms"
            cascade="save-update" inverse="true">
            <key column="user_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.server.ServerGroup"
                column="server_group_id"
                />
        </set>

        <set name="servers" lazy="true" table="rhnUserServerPerms" cascade="all">
            <key column="user_id"/>
            <many-to-many class="com.redhat.rhn.domain.server.Server" column="server_id"/>
        </set>

    </class>

    <query name="User.findByLogin">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where u.loginUc = :loginUc]]>
    </query>
   <query name="User.findByLoginAndOrgId">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where u.loginUc = :loginUc and org_id = :orgId]]>
    </query>
    <query name="User.findByIdandOrgId">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where u.id = :uid and org_id = :orgId]]>
    </query>
    <query name="User.findByIds">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where u.id in (:userIds)]]>
    </query>

    <query name="User.findByEmail">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where upper(u.personalInfo.email) = upper(:userEmail)]]>
    </query>

    <query name="User.findAllUsersByOrg">
        <![CDATA[from com.redhat.rhn.domain.user.legacy.UserImpl as u where org_id = :org_id]]>
    </query>

    <query name="User.findAllOrgAdmins">
        <![CDATA[
            select u
            from com.redhat.rhn.domain.user.legacy.UserImpl as u
            where exists (
                from com.redhat.rhn.domain.org.usergroup.UserGroupMembers ugm
                    where ugm.userGroup.orgId = :org_id and
                        ugm.userGroup.role.label = 'org_admin' and
                        ugm in elements(u.groupMembers))
        ]]>
    </query>
    <sql-query name="User.findRandomOrgAdmin">
        <return-scalar type="long" column="user_id"/>
        SELECT ugm.user_id as user_id
        FROM rhnUserGroupMembers ugm, web_contact wc
        WHERE ugm.user_group_id = (SELECT id
                                   FROM rhnUserGroup
                                   WHERE org_id = :org_id
                                   AND group_type = :type_id)
        AND wc.id = ugm.user_id
        ORDER BY wc.id
    </sql-query>

    <sql-query name="User.findResponsibleUser">
        <return-scalar type="long" column="user_id"/>
        <return-scalar type="string" column="login"/>
        SELECT ugm.user_id as user_id, wc.login as login
  FROM rhnUserGroupMembers ugm,
       web_contact wc
 WHERE ugm.user_group_id = (SELECT id
                              FROM rhnUserGroup
                             WHERE org_id = :org_id
                               AND group_type = :type_id)
   AND wc.id = ugm.user_id
ORDER BY wc.id
    </sql-query>
</hibernate-mapping>
