--
-- drop tables that are no longer used
--
drop table qrtz_job_listeners;
drop table qrtz_trigger_listeners;
--
-- drop columns that are no longer used
--
alter table qrtz_job_details drop column is_volatile;
alter table qrtz_triggers drop column is_volatile;
alter table qrtz_fired_triggers drop column is_volatile;
--
-- add new columns that replace the 'is_stateful' column
--
alter table qrtz_job_details add (is_nonconcurrent CHAR(1) DEFAULT ('N') NOT NULL);
alter table qrtz_job_details add (is_update_data CHAR(1) DEFAULT ('N') NOT NULL);
update qrtz_job_details set is_nonconcurrent = is_stateful;
update qrtz_job_details set is_update_data = is_stateful;
alter table qrtz_job_details drop column is_stateful;
alter table qrtz_fired_triggers add (is_nonconcurrent CHAR(1) DEFAULT ('N') NOT NULL);
update qrtz_fired_triggers set is_nonconcurrent = is_stateful;
alter table qrtz_fired_triggers drop column is_stateful;
--
-- add new 'sched_name' column to all tables --- replace "TestScheduler" with your scheduler's configured name
--
alter table qrtz_blob_triggers add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_calendars add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_cron_triggers add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_fired_triggers add (sched_name varchar(120) DEFAULT 'TestScheduler' not null );
alter table qrtz_job_details add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_locks add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_paused_trigger_grps add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_scheduler_state add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_simple_triggers add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
alter table qrtz_triggers add (sched_name varchar(120) DEFAULT 'TestScheduler' not null);
--
-- add new 'sched_time' column to qrtz_fired_triggers
--
alter table qrtz_fired_triggers add (sched_time NUMBER(13) NOT NULL);
--
-- drop all primary and foreign key constraints, so that we can define new ones
--
begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'R' and table_name = 'QRTZ_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type IN ('P', 'R') and table_name = 'QRTZ_BLOB_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type IN ('P', 'R') and table_name = 'QRTZ_SIMPLE_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type IN ('P', 'R') and table_name = 'QRTZ_CRON_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_JOB_DETAILS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

alter table qrtz_job_details add primary key (sched_name, job_name, job_group);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

--
-- add all primary and foreign key constraints, based on new columns
--
alter table qrtz_triggers add CONSTRAINT qrtz_triggers_pkey primary key (sched_name, trigger_name, trigger_group);
alter table qrtz_triggers add CONSTRAINT qrtz_triggers_fkey foreign key (sched_name, job_name, job_group) references qrtz_job_details(sched_name, job_name, job_group);
alter table qrtz_blob_triggers add CONSTRAINT qrtz_blob_triggers_pkey primary key (sched_name, trigger_name, trigger_group);
alter table qrtz_blob_triggers add CONSTRAINT qrtz_blob_triggers_fkey foreign key (sched_name, trigger_name, trigger_group) references qrtz_triggers(sched_name, trigger_name, trigger_group);
alter table qrtz_cron_triggers add CONSTRAINT qrtz_cron_triggers_pkey primary key (sched_name, trigger_name, trigger_group);
alter table qrtz_cron_triggers add CONSTRAINT qrtz_cron_triggers_fkey foreign key (sched_name, trigger_name, trigger_group) references qrtz_triggers(sched_name, trigger_name, trigger_group);
alter table qrtz_simple_triggers add CONSTRAINT qrtz_simple_triggers_pkey primary key (sched_name, trigger_name, trigger_group);
alter table qrtz_simple_triggers add CONSTRAINT qrtz_simple_triggers_fkey foreign key (sched_name, trigger_name, trigger_group) references qrtz_triggers(sched_name, trigger_name, trigger_group);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_FIRED_TRIGGERS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

alter table qrtz_fired_triggers add CONSTRAINT qrtz_fired_triggers_pkey primary key (sched_name, entry_id);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_CALENDARS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

alter table qrtz_calendars add CONSTRAINT qrtz_calendars_pkey primary key (sched_name, calendar_name);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_LOCKS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/
alter table qrtz_locks add CONSTRAINT qrtz_locks_pkey primary key (sched_name, lock_name);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_PAUSED_TRIGGER_GRPS' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

alter table qrtz_paused_trigger_grps add CONSTRAINT qrtz_paused_trigger_grps_pkey primary key (sched_name, trigger_group);

begin
    for r in ( select table_name, constraint_name
               from user_constraints
               where constraint_type = 'P' and table_name = 'QRTZ_SCHEDULER_STATE' )
    loop
        execute immediate 'alter table '||r.table_name
                          ||' drop constraint '||r.constraint_name;
    end loop;
end loop;
/

alter table qrtz_scheduler_state add CONSTRAINT qrtz_scheduler_state_pkey primary key (sched_name, instance_name);
--
-- add new simprop_triggers table
--
CREATE TABLE qrtz_simprop_triggers
 (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 NUMBER(12) NULL,
    INT_PROP_2 NUMBER(12) NULL,
    LONG_PROP_1 NUMBER(12) NULL,
    LONG_PROP_2 NUMBER(12) NULL,
    DEC_PROP_1 NUMBER(13,4) NULL,
    DEC_PROP_2 NUMBER(13,4) NULL,
    BOOL_PROP_1 CHAR(1) DEFAULT ('N') NULL,
    BOOL_PROP_2 CHAR(1) DEFAULT ('N') NULL,
    CONSTRAINT qrtz_simprop_triggers_pkey PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT qrtz_simprop_triggers_fkey FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
--
-- create indexes for faster queries
--

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_j_req_recovery';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_j_grp';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_j';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_jg';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_c';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_g';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_state';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_n_state';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_n_g_state';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_next_fire_time';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_nft_st';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_nft_misfire';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_nft_st_misfire';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_t_nft_st_misfire_grp';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_trig_inst_name';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_inst_job_req_rcvry';
exception
    when index_not_exists then null;
end;

/
declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_j_g';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_jg';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_t_g';
exception
    when index_not_exists then null;
end;
/

declare
index_not_exists EXCEPTION;
PRAGMA EXCEPTION_INIT(index_not_exists, -1418);
begin

    execute immediate 'drop index idx_qrtz_ft_tg';
exception
    when index_not_exists then null;
end;
/

create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);
