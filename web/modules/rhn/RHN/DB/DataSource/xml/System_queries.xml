<datasource_modes>

<mode name="ssm_remote_commandable">
  <query params="user_id">
select * from (
SELECT DISTINCT S.id,
       S.name AS SERVER_NAME
  FROM rhnServer S,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = ST.element AND SFV.label = 'ftr_remote_command')
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'script.run'
   AND USP.server_id = S.id
) X
ORDER BY UPPER(COALESCE(X.server_name, '(none)')), X.id

  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="provisioning_systems_in_set_with_tag">
  <query params="user_id, tag_id">
SELECT * FROM (
SELECT DISTINCT S.id,
       S.name AS SERVER_NAME,
       SS.id AS SNAPSHOT_ID,
       SS.reason AS SNAPSHOT_REASON,
       TO_CHAR(STag.created, 'YYYY-MM-DD HH24:MI:SS') AS DATE_TAG_APPLIED
  FROM rhnServer S,
       rhnSnapshotTag STag,
       rhnSnapshot SS,
       rhnClientCapabilityName CCN,
       rhnClientCapability CC,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element
   AND rhn_server.system_service_level(USP.server_id, 'provisioning') > 0
   AND USP.server_id = CC.server_id
   AND CC.capability_name_id = CCN.id
   AND CCN.name = 'packages.runTransaction'
   AND USP.server_id = SS.server_id
   AND SS.id = STag.snapshot_id
   AND STag.tag_id = :tag_id
   AND USP.server_id = S.id) X
ORDER BY UPPER(COALESCE(X.SERVER_NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
</mode>


<mode name="taggable_systems_in_set">
  <query params="user_id">
select *
from (
SELECT DISTINCT S.id,
       S.name AS SERVER_NAME
  FROM rhnServer S,
       rhnSnapshot SS,
       rhnSet ST,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND USP.server_id = ST.element 
   AND EXISTS(SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = ST.element AND SFV.label = 'ftr_snapshotting')
   AND USP.server_id = SS.server_id
   AND USP.server_id = S.id
) S
ORDER BY UPPER(coalesce(S.SERVER_NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>


<query name="ssm_package_upgrades_systems" params="user_id">
SELECT  DISTINCT 
        S.id,
        S.name AS SERVER_NAME,
        ActionT.label AS ACTION_TYPE_LABEL,
        ActionT.name AS ACTION_TYPE_NAME
  FROM  rhnChannelPackage CP,
        rhnChannel C,
        rhnServerChannel SC,
        rhnServer S,
        rhnActionType ActionT,
        rhnArchTypeActions ATA,
        rhnPackageArch PA,
        rhnPackage P,
        rhnServerNeededPackageCache SNPC,
        rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = 'system_list'
   AND  ST.element = S.id
   AND  S.id = SNPC.server_id
   AND  SNPC.package_id = P.id
   AND  P.id IN (
  SELECT element
    FROM rhnSet
   WHERE user_id = :user_id 
     AND label = 'package_upgradable_list'
)
   AND  S.id = SC.server_id
   AND  SC.channel_id = C.id
   AND  C.id = CP.channel_id
   AND  CP.package_id = P.id
   AND  P.package_arch_id = PA.id
   AND  PA.arch_type_id = ATA.arch_type_id
   AND  ATA.action_style = 'install'
   AND  ActionT.id = ATA.action_type_id
ORDER BY UPPER(S.name)
</query>

<mode name="ssm_package_upgrades_conf">
  <query name="ssm_package_upgrades_systems" />
  <elaborator params="user_id" multiple="t">
SELECT  DISTINCT
        S.id AS ID,
        S.name AS SERVER_NAME,
        PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
        P.name_id AS NAME_ID,
        P.evr_id AS EVR_ID,
        C.name AS PROVIDING_CHANNEL_NAME
  FROM  rhnChannelPackage CP,
        rhnChannel C,
        rhnServerChannel SC,
        rhnServer S,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnPackage P,
        rhnServerNeededPackageCache SNPC
 WHERE  SNPC.server_id IN (%s)
   AND  SNPC.package_id = P.id
   AND  P.id IN (
  SELECT element
    FROM rhnSet
   WHERE user_id = :user_id
     AND label = 'package_upgradable_list'
)
   AND  SNPC.server_id = S.id
   AND  S.id = SC.server_id
   AND  SC.channel_id = C.id
   AND  C.id = CP.channel_id
   AND  CP.package_id = P.id
   AND  P.name_id = PN.id
   AND  P.evr_id = PE.id
ORDER BY UPPER(S.name), UPPER(PN.name || '-' || PE.evr.as_vre_simple())
  </elaborator>
</mode>


<mode name="ssm_channel_change_conf">
  <query params="user_id">
SELECT  S.id
  FROM  rhnChannel CHANNELS_TO_ADD, rhnServerChannel SC, rhnServer S, rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = 'system_list'
   AND  ST.element = SC.server_id
   AND  ST.element = S.id
   AND  (   (rhn_channel.available_chan_subscriptions(CHANNELS_TO_ADD.id, S.org_id) IS NULL)
         OR (rhn_channel.available_chan_subscriptions(CHANNELS_TO_ADD.id, S.org_id) > 0))
   AND  CHANNELS_TO_ADD.id IN (SELECT ST2.element FROM rhnSet ST2 WHERE user_id = :user_id AND label = 'channel_list' AND ST2.element_two = 1)
   AND  CHANNELS_TO_ADD.id NOT IN (SELECT SC.channel_id FROM rhnServerChannel SC WHERE SC.server_id = S.id)
   AND  CHANNELS_TO_ADD.parent_channel = SC.channel_id
UNION
SELECT  S.id
  FROM  rhnChannel CHANNELS_TO_REMOVE, rhnServer S, rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = 'system_list'
   AND  ST.element = S.id
   AND  CHANNELS_TO_REMOVE.id IN (SELECT ST2.element FROM rhnSet ST2 WHERE user_id = :user_id AND label = 'channel_list' AND ST2.element_two = 2)
   AND  CHANNELS_TO_REMOVE.id IN (SELECT SC.channel_id FROM rhnServerChannel SC WHERE SC.server_id = S.id)
  </query>
  <elaborator params="user_id" multiple="t">
SELECT  S.id AS ID,
        S.name AS SERVER_NAME,
        C.id AS CHANNEL_ID,
        C.name AS CHANNEL_NAME,
	(SELECT  'subscribe'
           FROM  rhnAvailableChannels AC,
                 rhnServerChannel SC
          WHERE  SC.server_id = S.id
            AND  AC.org_id = S.org_id
            AND  ((AC.available_members > 0) OR (AC.available_members IS NULL))
            AND  AC.channel_id = C.id
            AND  NOT EXISTS (SELECT channel_id FROM rhnServerChannel WHERE server_id = S.id AND channel_id = C.id)
            AND  EXISTS (SELECT channel_id FROM rhnServerChannel WHERE server_id = S.id AND channel_id = C.parent_channel)
            AND  EXISTS(SELECT 1 FROM rhnSet ST2 WHERE user_id = :user_id AND label = 'channel_list' AND ST2.element_two = 1 AND ST2.element = C.id)
	 UNION
	 SELECT  'unsubscribe'
	   FROM  DUAL
          WHERE  EXISTS(SELECT channel_id FROM rhnServerChannel WHERE server_id = S.id AND channel_id = C.id)
            AND  EXISTS(SELECT 1 FROM rhnSet ST2 WHERE user_id = :user_id AND label = 'channel_list' AND ST2.element_two = 2 AND ST2.element = C.id)
	) AS ACTION
  FROM  rhnChannel C,
        rhnServer S
 WHERE  S.id in (%s)
   AND  C.id IN (
	SELECT ST.element
	  FROM rhnSet ST
	 WHERE ST.user_id = :user_id
	   AND label = 'channel_list'
	)
ORDER BY UPPER(S.name)
  </elaborator>
</mode>

<mode name="systems_subscribed_to_channel">
  <query params="org_id, cid, user_id">
SELECT S.id, S.name
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_subscribed_to_channel_in_set">
  <query params="org_id, cid, user_id, set_label">
SELECT S.id, S.name
  FROM rhnServerChannel SC,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = :cid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND EXISTS (SELECT 1 FROM rhnSet WHERE user_id = :user_id AND label = :set_label AND element = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>


<mode name="systems_in_group">
  <query params="sgid">
SELECT SGM.server_id AS ID, S.name AS NAME
  FROM rhnServer S, rhnServerGroupMembers SGM
 WHERE SGM.server_group_id = :sgid
   AND SGM.server_id = S.id
   AND EXISTS (SELECT 1 FROM rhnServerFeaturesView SFV
               WHERE SFV.server_id = S.id
                 AND SFV.label = 'ftr_system_grouping')
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="potential_systems_for_package">
  <query params="org_id, pid, user_id">
SELECT	S.id
  FROM  rhnPackage P, rhnChannelPackage CP, rhnServerChannel SC, rhnServer S
 WHERE  S.org_id = :org_id
   AND  SC.server_id = S.id
   AND  SC.channel_id = CP.channel_id
   AND  CP.package_id = :pid
   AND  CP.package_id = P.id
   AND  COALESCE((SELECT MAX(PE.evr)
           FROM rhnServerPackage SP, rhnPackageEvr PE
          WHERE SP.name_id = P.name_id
            AND SP.server_id = S.id
            AND SP.evr_id = PE.id), (EVR_T(NULL, '0', '0'))
            )
        &lt;
        (SELECT EVR FROM rhnPackageEVR PE WHERE PE.id = P.evr_id)
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_with_package">
  <query params="pid, user_id">
 SELECT  SP.server_id AS id
  FROM  rhnServerPackage SP,
        rhnPackage P
 WHERE P.id = :pid
   AND  P.name_id = SP.name_id
   AND  P.evr_id = SP.evr_id
   AND  P.package_arch_id = SP.package_arch_id
   AND  EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = SP.server_id)
 </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>



<mode name="systems_with_package_nvre_in_set">
  <query params="org_id, user_id, name_id, evr_id, set_label">
SELECT	S.ID AS ID, S.name AS SERVER_NAME
  FROM  rhnServerPackage SP, rhnServer S, rhnSet ST
 WHERE  S.org_id = :org_id
-- no need to check perms because it's in your set, and sets are trusted
--   AND  EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND  S.id = SP.server_id
   AND  SP.name_id = :name_id
   AND  SP.evr_id = :evr_id
   AND  ST.label = :set_label
   AND  ST.element = S.id
   AND  ST.user_id = :user_id
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>


<mode name="target_systems_for_channel">
  <query params="org_id, cid, user_id">
SELECT ES.id
  FROM rhnChannel C,
       rhnServerChannel SC,
       rhnEntitledServers ES
 WHERE ES.org_id = :org_id
   AND ES.id = SC.server_id
   AND C.id = :cid
   AND SC.channel_id = C.parent_channel
   AND NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = ES.id AND channel_id = C.id)
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = ES.id)
ORDER BY UPPER(COALESCE(ES.NAME, '(none)')), ES.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="target_systems_for_channel_in_set">
  <query params="org_id, cid, user_id">
SELECT ES.id
  FROM rhnChannel C,
       rhnServerChannel SC,
       rhnEntitledServers ES,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = 'system_list'
   AND ES.org_id = :org_id
   AND ES.id = ST.element
   AND ES.id = SC.server_id
   AND C.id = :cid
   AND SC.channel_id = C.parent_channel
   AND NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = ES.id AND channel_id = C.id)
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = ES.id)
ORDER BY UPPER(COALESCE(ES.NAME, '(none)')), ES.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="visible_to_user">
  <query name="available_to_user" />
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<query name="available_to_uid" params="formvar_uid">
  SELECT  DISTINCT S.id AS ID,
          S.name AS SERVER_NAME
    FROM  rhnServer S, rhnUserServerPerms USP
   WHERE  USP.user_id = :formvar_uid
     AND  S.id = USP.server_id
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.id
</query>


<mode name="visible_to_uid">
  <query name="available_to_uid" />
  <elaborator params="some_user_id" multiple="t">
select  a.server_id             id,
        s.name                  server_name,
        COALESCE(sg.name,'Org Admin access')     group_name
from    rhnServer               s,
        (
        select  usg.user_id, sgm.server_id, sgm.server_group_id
        from    rhnServerGroupMembers sgm,
                rhnUserServerGroupPerms usg
        where   usg.server_group_id = sgm.server_group_id
        union all
        select  ugm.user_id, s.id server_id, TO_NUMBER(null,null) server_group_id
        from    rhnUserGroup ug,
                rhnUserGroupMembers ugm,
                rhnServer s,
                web_contact u
        where   ugm.user_group_id = ug.id
            and u.id = ugm.user_id
            and ug.group_type = (
                    select id
                    from rhnUserGroupType
                    where label = 'org_admin')
            and s.org_id = u.org_id
        )                       a
left join rhnServerGroup sg
on a.server_group_id = sg.id
where a.user_id = :some_user_id
    and a.server_id in (%s)
    and a.server_id = s.id
  </elaborator>
  <elaborator name="system_overview" />
</mode>

<mode name="system_entitlement_list">
  <query name="available_to_user" />
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="in_group_and_affected_by_errata">
  <query params="eid, user_id, sgid">
  SELECT S.ID, S.name
    FROM rhnServer S, rhnServerGroupMembers SGM
   WHERE EXISTS (SELECT 1
                   FROM rhnServerNeededErrataCache SNEC, rhnUserServerPerms USP
                  WHERE SNEC.errata_id = :eid
                    AND USP.user_id = :user_id
                    AND SNEC.server_id = USP.server_id
                    AND USP.server_id = S.id)
    AND SGM.server_group_id = :sgid
    AND SGM.server_id = S.id
    AND EXISTS (SELECT 1 FROM rhnServerFeaturesView SFV
                 WHERE SFV.server_id = S.id
                   AND SFV.label = 'ftr_system_grouping')
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="in_set_and_affected_by_errata">
  <query params="eid, user_id">
  SELECT S.ID, S.name
    FROM rhnServer S, rhnSet ST
   WHERE EXISTS (SELECT 1
                   FROM rhnServerNeededErrataCache SNEC, rhnUserServerPerms USP
                  WHERE SNEC.errata_id = :eid
                    AND USP.user_id = :user_id
                    AND SNEC.server_id = USP.server_id
                    AND USP.server_id = S.id)
    AND ST.user_id = :user_id
    AND ST.label = 'system_list'
    AND ST.element = S.id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="in_set">
  <query name="in_set" />
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="entitlement_changes_in_set">
  <query name="in_set" />
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="selected_systems_installed_package">
  <query name="selected_systems_installed_package" />
  <elaborator params="name_id, evr_id" multiple="t">
SELECT    DISTINCT S.ID AS ID,
          S.NAME AS SERVER_NAME,
          SPN.name || '-' || SPEVR.evr.as_vre_simple() AS INSTALLED_VERSION
  FROM    rhnChannelPackage CP,
          rhnChannel C,
          rhnServerChannel SC,
          rhnPackageName SPN,
          rhnPackageEVR SPEVR,
          rhnServerPackage SP,
          rhnPackage P,
          rhnServerNeededPackageCache SNPC,
          rhnServer S
 WHERE    S.id IN (%s)
   AND    S.id = SNPC.server_id
   AND    SNPC.package_id = P.id
   AND    P.name_id = :name_id
   AND    P.evr_id = :evr_id
   AND    S.id = SP.server_id
   AND    SP.name_id = :name_id
   AND    SPN.id = :name_id
   AND    SP.evr_id = SPEVR.id
   AND  S.id = SC.server_id
   AND  SC.channel_id = C.id
   AND  C.id = CP.channel_id
   AND  CP.package_id = P.id
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </elaborator>
</mode>


<mode name="system_set_remove_packages_versions">
  <query params="user_id, set_label, name_id">
SELECT  S.id, S.name, PN.name || '-' || PE.evr.as_vre_simple() AS INSTALLED_PACKAGE
  FROM  rhnPackageEVR PE, rhnPackageName PN, rhnServer S, rhnServerPackage SP, rhnSet ST
 WHERE  ST.user_id = :user_id
   AND  ST.label = :set_label
   AND  ST.element = SP.server_id
   AND  ST.element = S.id
   AND  PN.id = :name_id
   AND  PN.id = SP.name_id
   AND  SP.evr_id = PE.id
ORDER BY S.name
  </query>
</mode>

<mode name="system_set_remove_patches_conf">
  <query params="user_id, set_label, package_set_label">
SELECT  DISTINCT S.id, S.name SYSTEM_NAME
  FROM  rhnServer S,
        rhnServerPackage SP,
        rhnSet ST2,
        rhnSet St
 WHERE  St.user_id = :user_id
   AND  St.label = :set_label
   AND  ST2.user_id = :user_id
   AND  ST2.label= :package_set_label
   AND  St.element = SP.server_id
   AND  SP.name_id = ST2.element
   AND  SP.evr_id = ST2.element_two
   AND  SP.server_id = S.id
ORDER BY UPPER(S.name), S.id
  </query>
  <elaborator params="user_id, package_set_label" multiple="t">
SELECT  DISTINCT SP.server_id id, PN.name || '-' || PE.evr.as_vre_simple() NVRE
  FROM  rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP,
        rhnSet RS
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  SP.evr_id = PE.id
   AND  RS.user_id = :user_id
   AND  RS.label = :package_set_label
   AND  RS.element_two = PE.id
   AND  RS.element = PN.id
  </elaborator>
</mode>

<mode name="system_set_remove_packages_conf">
  <query params="user_id, set_label, package_set_label">
SELECT  DISTINCT S.id, S.name SYSTEM_NAME
  FROM  rhnServer S,
        rhnServerPackage SP,
        rhnSet ST2,
        rhnSet St
 WHERE  St.user_id = :user_id
   AND  St.label = :set_label
   AND  ST2.user_id = :user_id
   AND  ST2.label= :package_set_label
   AND  St.element = SP.server_id
   AND  SP.name_id = ST2.element
   AND  SP.evr_id = ST2.element_two
   AND  SP.server_id = S.id
ORDER BY UPPER(S.name), S.id
  </query>
  <elaborator params="user_id, package_set_label" multiple="t">
SELECT  DISTINCT SP.server_id id, PN.name || '-' || PE.evr.as_vre_simple() NVRE
  FROM  rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP,
        rhnSet RS
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  SP.evr_id = PE.id
   AND  RS.user_id = :user_id
   AND  RS.label = :package_set_label
   AND  RS.element_two = PE.id
   AND  RS.element = PN.id
  </elaborator>
</mode>

<mode name="system_set_verify_packages_conf">
  <query params="user_id, set_label, package_set_label">
SELECT  DISTINCT S.id, S.name SYSTEM_NAME
  FROM  rhnServer S,
        rhnServerPackage SP,
        rhnSet ST2,
        rhnSet St,
        rhnClientCapabilityName CCN,
        rhnClientCapability CC
 WHERE  St.user_id = :user_id
   AND  St.label = :set_label
   AND  ST2.user_id = :user_id
   AND  ST2.label= :package_set_label
   AND  St.element = SP.server_id
   AND  SP.name_id = ST2.element
   AND  SP.evr_id = ST2.element_two
   AND  SP.server_id = S.id
   AND  SP.server_id = CC.server_id
   AND  CC.capability_name_id = CCN.id
   AND  CCN.name = 'packages.verify'
ORDER BY UPPER(S.name), S.id
  </query>
  <elaborator params="user_id, package_set_label" multiple="t">
SELECT  DISTINCT SP.server_id id, PN.name || '-' || PE.evr.as_vre_simple() NVRE
  FROM  rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP,
        rhnSet RS
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  SP.evr_id = PE.id
   AND  RS.user_id = :user_id
   AND  RS.label = :package_set_label
   AND  RS.element_two = PE.id
   AND  RS.element = PN.id
  </elaborator>
</mode>

<mode name="system_set_supports_reboot_expanded">
  <query name="system_set_supports_reboot" />
  <elaborator name="system_overview" />
</mode>

<mode name="system_set_supports_reboot">
  <query name="system_set_supports_reboot" />
</mode>
  <query name="system_set_supports_reboot" params="user_id, set_label">
SELECT *
from (
SELECT  DISTINCT S.id, S.name
  FROM  rhnArchType AT,
        rhnServerArch SA,
        rhnServer S,
        rhnSet St
 WHERE  St.user_id = :user_id
   AND  St.label = :set_label
   AND  S.id = St.element
   AND  SA.id = S.server_arch_id
   AND  SA.arch_type_id = AT.id
   AND  AT.label = 'rpm'
   AND  EXISTS (SELECT 1
                  FROM rhnPackageEVR PE2,
                       rhnServerPackage SP,
                       rhnPackageName PN,
                       rhnPackageEVR PE
                 WHERE SP.server_id = S.id
                   AND SP.name_id = PN.id
                   AND SP.evr_id = PE.id
                   AND ((PN.name = 'rhn-check' AND PE2.id = PE.id)
                   OR (PN.name = 'up2date'
                     AND PE2.id = lookup_evr(NULL, '2.9.3', '2.2.1AS')
                     AND PE.evr &gt;= PE2.evr)
		   OR (PN.name = 'spacewalk-check' AND PE2.id = PE.id))
	)
) S
ORDER BY UPPER(S.name), S.id
  </query>


<mode name="systems_registered_with_key">
  <query params="org_id, tid">
SELECT  distinct(STR.server_id) ID
  FROM  rhnServerTokenRegs STR,
        rhnServer S
 WHERE  STR.token_id = :tid
   AND  S.id = STR.server_id
   AND  S.org_id = :org_id
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="out_of_date">
  <query params="org_id, user_id">
SELECT    DISTINCT S.ID, S.NAME
  FROM    rhnServer S, rhnUserServerPerms USP, rhnServerNeededPackageCache SNPC
 WHERE    S.ORG_ID = :org_id AND S.ID = USP.server_id AND USP.user_id = :user_id AND S.id = SNPC.server_id
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="unentitled">
  <query params="org_id, user_id">
SELECT    S.ID, S.NAME
  FROM    rhnServer S
 WHERE    S.ORG_ID = :org_id
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND    NOT EXISTS (SELECT 1 FROM rhnEntitledServers ES where ES.id = S.id)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="ungrouped">
  <query params="org_id, user_id">
SELECT S.ID, S.NAME
  FROM rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND NOT EXISTS (SELECT 1
                     FROM rhnServerGroup SG, rhnServerGroupMembers SGM
                    WHERE SGM.server_id = S.id
                      AND SG.id = SGM.server_group_id
                      AND SG.group_type IS NULL)
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="inactive">
  <query params="org_id, user_id, checkin_threshold">
SELECT S.id, S.NAME
  FROM rhnServerInfo SI,
       rhnServer S
 WHERE S.org_id = :org_id
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
   AND SI.server_id = S.id
   AND SI.checkin &lt; current_timestamp - :checkin_threshold
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="proxy_servers">
  <query params="user_id">
SELECT PI.server_id ID, S.name
  FROM rhnServer S, rhnProxyInfo PI
 WHERE EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = PI.server_id)
   AND S.id = PI.server_id
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="entitlements"/>
</mode>

<mode name="org_proxy_servers">
  <query params="org_id">
SELECT PI.server_id ID, S.name
  FROM rhnServer S, rhnProxyInfo PI
 WHERE S.org_id = :org_id
   AND PI.server_id = S.id
  </query>
</mode>

<mode name="clients_through_proxy">
  <query params="sid">
SELECT SP.server_id ID, S.name
  FROM rhnServer S, rhnServerPath SP
 WHERE SP.proxy_server_id = :sid
   AND S.id = SP.server_id
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="entitlements"/>
</mode>

<mode name="proxy_path_for_server">
  <query params="sid">
SELECT SP.proxy_server_id ID, S.name, (SP.position + 1) AS POSITION, SP.hostname
  FROM rhnServer S, rhnServerPath SP
 WHERE SP.server_id = :sid
   AND S.id = SP.proxy_server_id
ORDER BY SP.position
  </query>
  <elaborator name="system_overview"/>
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_in_channel_family">
  <query params="org_id, cfam_id, user_id">
select * from (
SELECT distinct S.id, S.name
  FROM rhnServer S,
       rhnServerChannel SC,
       rhnChannelFamilyMembers CFM
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = CFM.channel_id
   AND CFM.channel_family_id = :cfam_id
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
) X
ORDER BY UPPER(COALESCE(X.NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="regular_systems_in_channel_family">
  <query params="org_id, cfam_id, user_id">
select * from (
SELECT distinct S.id, S.name
  FROM rhnServer S,
       rhnServerChannel SC,
       rhnChannelFamilyMembers CFM
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = CFM.channel_id
   AND SC.is_fve = 'N'
   AND CFM.channel_family_id = :cfam_id
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
) X
ORDER BY UPPER(COALESCE(X.NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="flex_systems_in_channel_family">
  <query params="org_id, cfam_id, user_id">
SELECT * FROM (
  SELECT distinct S.id, S.name
  FROM rhnServer S,
       rhnServerChannel SC,
       rhnChannelFamilyMembers CFM
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = CFM.channel_id
   AND SC.is_fve = 'Y'
   AND CFM.channel_family_id = :cfam_id
   AND    EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)) X
ORDER BY UPPER(NVL(X.NAME, '(none)')), X.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_potentially_in_channel_family">
  <query params="org_id, cfam_id, user_id">
SELECT S.id, S.name
  FROM rhnServerChannel SC,
       rhnChannel C,
       rhnChannelFamilyMembers CFM,
       rhnServer S
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = C.parent_channel
   AND C.id = CFM.channel_id
   AND CFM.channel_family_id = :cfam_id
   AND NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = S.id AND channel_id = CFM.channel_id)
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="systems_in_progress_action">
  <query params="org_id, aid, user_id">
  SELECT  S.id,
          S.name,
          AStat.name AS ACTION_STATUS,
          A.prerequisite,
	  TO_CHAR(A.earliest_action, 'YYYY-MM-DD HH24:MI:SS') AS EARLIEST_EXECUTION_TIME
    FROM  rhnAction A,
          rhnServer S, 
          rhnActionStatus AStat,
          rhnServerAction SA
   WHERE  S.org_id = :org_id 
     AND  S.ID = SA.server_id 
     AND  SA.action_id = :aid
     AND  SA.status IN (0,1)
     AND  EXISTS (
          SELECT  1 
            FROM  rhnUserServerPerms USP 
           WHERE  USP.user_id = :user_id 
             AND  USP.server_id = S.id
          )
     AND  SA.status = AStat.id
     AND  SA.action_id = A.id
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="systems_failed_action">
  <query params="org_id, aid, user_id">
  SELECT  S.id AS ID, S.name AS NAME, SA.result_msg AS FAILURE_MESSAGE,
          TO_CHAR(SA.COMPLETION_TIME, 'YYYY-MM-DD HH24:MI:SS') AS FAILED_TIME
    FROM  rhnServer S, rhnServerAction SA
   WHERE  S.org_id = :org_id 
     AND  S.ID = SA.server_id 
     AND  SA.action_id = :aid
     AND  SA.status = 3
     AND  EXISTS (
          SELECT  1 
            FROM  rhnUserServerPerms USP 
           WHERE  USP.user_id = :user_id 
             AND  USP.server_id = S.id
          )
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="systems_completed_action">
  <query params="org_id, aid, user_id">
  SELECT  S.id, S.name,
          TO_CHAR(SA.completion_time, 'YYYY-MM-DD HH24:MI:SS') AS COMPLETION_TIME
    FROM  rhnServer S, rhnServerAction SA
   WHERE  S.org_id = :org_id 
     AND  S.ID = SA.server_id 
     AND  SA.action_id = :aid
     AND  SA.status = 2
     AND  EXISTS (
          SELECT  1 
            FROM  rhnUserServerPerms USP 
           WHERE  USP.user_id = :user_id 
             AND  USP.server_id = S.id
          )
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.ID
  </query>
  <elaborator name="system_overview" />
</mode>

<mode name="org_systems">
  <query params="support_org_id">
  SELECT  S.id, S.name
    FROM  rhnServer S
   WHERE  S.org_id = :support_org_id
ORDER BY  UPPER(COALESCE(S.name, '(none)')), S.id
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="support_find_system">
  <query params="search_str">
SELECT  DISTINCT S.id, S.name, O.id as ORG_ID, O.name ORG_NAME
  FROM  web_customer O, rhnServer S
 WHERE  upper(S.name) LIKE upper(:search_str)
   AND  S.org_id = O.id
  </query>
</mode>

<query name="available_to_user" params="user_id">
select * from (
  SELECT  DISTINCT S.id,
                   S.name,
                   SI.server_id AS IS_RHN_SATELLITE,
                   PI.server_id AS IS_RHN_PROXY,
                   TO_CHAR(Sinfo.checkin, 'YYYY-MM-DD HH24:MI:SS') AS LAST_CHECKIN
    FROM rhnServer S
    LEFT JOIN rhnSatelliteInfo SI
      ON S.id = SI.server_id
    LEFT JOIN rhnProxyInfo PI
      ON S.id = PI.server_id,
         rhnServerInfo SInfo, rhnUserServerPerms USP
   WHERE  USP.user_id = :user_id
     AND  S.id = USP.server_id
     AND  Sinfo.server_id = S.id ) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
</query>


<query name="system_overview" params="">
  SELECT  SERVER_ID AS ID, SECURITY_ERRATA, BUG_ERRATA, ENHANCEMENT_ERRATA, OUTDATED_PACKAGES, SERVER_NAME,
          SERVER_ADMINS, GROUP_COUNT, MODIFIED, CHANNEL_LABELS, CHANNEL_ID, HISTORY_COUNT,
          LAST_CHECKIN_DAYS_AGO, PENDING_UPDATES, OS, RELEASE, SERVER_ARCH_NAME, LAST_CHECKIN, LOCKED,
          MONITORING_STATUS.ST AS MONITORING_STATUS,
          COALESCE((SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = OV.server_id AND SFV.label = 'ftr_system_grouping'), 0) AS SELECTABLE
    FROM  rhnServerOverview OV LEFT OUTER JOIN
       ( SELECT  CP.host_id, CASE
                   MAX(CASE PS.state WHEN 'OK' THEN 1 WHEN 'PENDING' THEN 2 WHEN 'UNKNOWN' THEN 3 WHEN 'WARNING' THEN 4 WHEN 'CRITICAL' THEN 5 END)
                         WHEN 1 THEN 'OK' WHEN 2 THEN 'PENDING' WHEN 3 THEN 'UNKNOWN' WHEN 4 THEN 'WARNING' WHEN 5 THEN 'CRITICAL' END ST
           FROM  rhn_check_probe CP, rhn_probe_state PS
          WHERE  PS.probe_id = CP.probe_id
         GROUP BY CP.host_id ) MONITORING_STATUS ON OV.server_id = MONITORING_STATUS.host_id
   WHERE  server_id IN (%s)
ORDER BY  UPPER(COALESCE(SERVER_NAME, '(none)')), SERVER_ID
</query>

<query name="entitlements" params="" multiple="t">
  SELECT SEV.server_id AS ID,
         SEV.label AS ENTITLEMENT,
         SEV.server_group_type_id,
         SEV.permanent,
         SEV.is_base
    FROM rhnServerEntitlementView SEV
   WHERE SEV.server_id IN (%s)
ORDER BY CASE SEV.is_base WHEN 'Y' THEN 1 WHEN 'N' THEN 2 END, SEV.label
</query>

<query name="in_set" params="user_id, set_label">
  SELECT * FROM (
  SELECT  DISTINCT S.id, S.name
    FROM  rhnServer S, rhnSet ST
   WHERE  ST.user_id = :user_id
     AND  ST.label = :set_label
     AND  ST.element = S.id
  ) X
ORDER BY  UPPER(COALESCE(X.name, '(none)')), X.id
</query>

<query name="system_package_data_from_set" params="user_id, package_set_label">
SELECT  DISTINCT S.id SYSTEM_ID, S.name SYSTEM_NAME, PN.name || '-' || PE.evr.as_vre_simple() NVRE
  FROM  rhnServer S,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnServerPackage SP
 WHERE  SP.server_id IN (%s)
   AND  SP.name_id = PN.id
   AND  PN.id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = :package_set_label)
   AND  SP.evr_id = PE.id
   AND  SP.server_id = S.id
ORDER BY UPPER(S.name)
</query>

<query name="selected_systems_installed_package" params="user_id,
  name_id, evr_id">
SELECT    DISTINCT S.ID AS ID,
          S.NAME AS SERVER_NAME
  FROM    rhnChannelPackage CP,
          rhnChannel C,
          rhnServerChannel SC,
          rhnPackageName SPN,
          rhnPackageEVR SPEVR,
          rhnServerPackage SP,
          rhnPackage P,
          rhnServerNeededPackageCache SNPC,
          rhnServer S,
          rhnSet ST
 WHERE    ST.user_id = :user_id
   AND    ST.element = S.id
   AND    S.id = SNPC.server_id
   AND    SNPC.package_id = P.id
   AND    P.name_id = :name_id
   AND    P.evr_id = :evr_id
   AND    S.id = SP.server_id
   AND    SP.name_id = :name_id
   AND    SPN.id = :name_id
   AND    SP.evr_id = SPEVR.id
   AND  S.id = SC.server_id
   AND  SC.channel_id = C.id
   AND  C.id = CP.channel_id
   AND  CP.package_id = P.id
ORDER BY  UPPER(COALESCE(S.NAME, '(none)')), S.ID
</query>

<mode name="target_systems_for_namespace">
  <query params="ccid, user_id">
SELECT USP.server_id AS ID, S.name
  FROM rhnUserServerPerms USP, rhnServer S
 WHERE USP.user_id = :user_id
   AND NOT EXISTS (
  SELECT 1
    FROM rhnServerConfigChannel SCC
   WHERE SCC.server_id = USP.server_id
     AND SCC.config_channel_id = :ccid)
 AND USP.server_id = S.id
 AND rhn_server.system_service_level(USP.server_id, 'provisioning') > 0
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>


<mode name="systems_with_namespace">
  <query params="ccid, user_id">
SELECT SCC.server_id AS ID, SCC.position, S.name
  FROM rhnServer S, rhnServerConfigChannel SCC
 WHERE SCC.config_channel_id = :ccid
   AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = SCC.server_id)
   AND S.id = SCC.server_id
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), SCC.server_id
  </query>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="config_systems_list">
  <query params="user_id">
      SELECT DISTINCT S.id, S.name AS system
        FROM rhnServer S,
             rhnSet ST,
             rhnUserServerPerms USP
       WHERE USP.user_id = :user_id
         AND ST.user_id = :user_id
         AND ST.label = 'system_list'
         AND USP.server_id = ST.element
         AND rhn_server.system_service_level(USP.server_id, 'provisioning') > 0
         AND USP.server_id = S.id
  </query>
  <elaborator params="cfnid" multiple="t">
      SELECT SCC.server_id ID, CC.name AS channels
        FROM rhnConfigChannelType CCT,
             rhnConfigChannel CC,
             rhnConfigContent CCon,
             rhnConfigFileName CFN,
             rhnConfigFile CF,
             rhnConfigRevision CR,
             rhnServerConfigChannel SCC
       WHERE 1=1
         AND SCC.server_id IN ( %s )
         AND CFN.id = :cfnid
         AND SCC.config_channel_id = CF.config_channel_id
         AND CF.id = CR.config_file_id
         AND CF.config_file_name_id = CFN.id
         AND CF.config_channel_id = CC.id
         AND CC.confchan_type_id = CCT.id
         AND CCon.id = CR.config_content_id
         AND CF.latest_config_revision_id = CR.id
         AND CCT.label in ('normal', 'local_override')
  </elaborator>
</mode>

<mode name="systems_with_patch">
  <query params="pid, user_id">
  SELECT 
DISTINCT S.id,
         S.name AS SERVER_NAME,
         COALESCE((SELECT 1
                FROM rhnServerFeaturesView SFV
               WHERE SFV.server_id = S.id
                 AND SFV.label = 'ftr_system_grouping'), 0) AS SELECTABLE
    FROM rhnServer S,
         rhnUserServerPerms USP,
         rhnSolarisPatchedPackage SPP
   WHERE SPP.patch_id = :pid
     AND S.id = SPP.server_id
     AND USP.user_id = :user_id
     AND USP.server_id = S.id
ORDER BY S.name, S.id
  </query>
  <elaborator params="pid" multiple="t">
SELECT SPP.server_id AS ID,
       PN.name AS PACKAGE_NAME,
       PN.name || '-' || evr_t_as_vre_simple(PE.evr) AS PACKAGE_NVRE,
       PN.id || '|' || PE.id AS PACKAGE_ID_COMBO
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageNEVRA PNEVRA,
       rhnSolarisPatchedPackage SPP
 WHERE SPP.patch_id = :pid
   AND SPP.server_id in (%s)
   AND SPP.package_nevra_id = PNEVRA.id
   AND PN.id = PNEVRA.name_id
   AND PE.id = PNEVRA.evr_id
ORDER BY SPP.server_id, PN.name
  </elaborator>
</mode>

<mode name="potential_systems_for_patch">
  <query params="pid, user_id">
SELECT S.id,
       S.name AS SERVER_NAME
  FROM rhnServer S,
       rhnChannelPackage CP,
       rhnServerChannel SC,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND USP.server_id = S.id
   AND  SC.server_id = S.id
   AND  SC.channel_id = CP.channel_id
   AND  CP.package_id = :pid
   AND EXISTS (SELECT 1
                 FROM rhnPackageNEVRA PNEVRA,
                      rhnSolarisPatchPackages SPP,
                      rhnServerPackage SP
                WHERE SP.server_id = S.id
                  AND SPP.patch_id = :pid
                  AND PNEVRA.id = SPP.package_nevra_id
                  AND PNEVRA.name_id = SP.name_id
                  AND NOT EXISTS (SELECT 1
                                    FROM rhnSolarisPatchedPackage SPdP
                                   WHERE SPdP.server_id = S.id
                                     AND SPdP.patch_id = :pid
                                     AND SPdP.package_nevra_id = PNEVRA.id))
ORDER BY S.name, S.id
  </query>
  <elaborator params="pid" multiple="t">
SELECT DISTINCT S.id,
       PN.name AS PACKAGE_NAME,
       PN.name || '-' || evr_t_as_vre_simple(PE.evr) AS PACKAGE_NVRE,
       PN.id || '|' || PE.id AS PACKAGE_ID_COMBO
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnServerPackage SP,
       rhnPackageNEVRA PNEVRA,
       rhnServer S,
       rhnSolarisPatchPackages SPP
 WHERE SPP.patch_id = :pid
   AND S.id in (%s)
   AND PNEVRA.id = SPP.package_nevra_id
   AND NOT EXISTS (SELECT 1
                     FROM rhnSolarisPatchedPackage SPdP
                    WHERE SPdP.server_id = S.id
                      AND SPdP.patch_id = :pid
                      AND SPdP.package_nevra_id = PNEVRA.id)
   AND SP.server_id = S.id
   AND SP.name_id = PNEVRA.name_id
   AND SP.evr_id = PNEVRA.evr_id
   AND PN.id = PNEVRA.name_id
   AND PE.id = PNEVRA.evr_id
ORDER BY S.id, PN.name
  </elaborator>
  <elaborator name="system_overview" />
</mode>

<mode name="systems_with_patchset">
  <query params="org_id, pid, user_id">
SELECT S.ID, S.NAME
  FROM rhnServerPackage SP, rhnPackage P, rhnServer S
 WHERE S.org_id = :org_id
   AND P.id = :pid
   AND P.name_id = SP.name_id
   AND P.evr_id = SP.evr_id
   AND SP.server_id = S.id
   AND EXISTS (SELECT 1
                 FROM rhnUserServerPerms USP
                WHERE USP.user_id = :user_id
                  AND USP.server_id = S.id)
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator params="pid">
SELECT SA.server_id AS id,
       TO_CHAR(SA.completion_time, 'YYYY-MM-DD') AS TIMESTAMP
  FROM rhnActionStatus ACS,
       rhnActionPackage AP,
       rhnPackage P,
       rhnServerAction SA
 WHERE SA.server_id in (%s)
   AND P.id = :pid
   AND AP.action_id = SA.action_id
   AND AP.name_id = P.name_id
   AND AP.evr_id = P.evr_id
   AND ACS.id = SA.status
   AND ACS.name = 'Completed'
ORDER BY SA.completion_time desc
  </elaborator>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

<mode name="potential_systems_for_patchset">
  <query params="pid, user_id">
SELECT S.ID, S.NAME
  FROM rhnServer S,
       rhnChannelPackage CP,
       rhnServerChannel SC,
       rhnUserServerPerms USP
 WHERE USP.user_id = :user_id
   AND USP.server_id = S.id
   AND SC.server_id = S.id
   AND SC.channel_id = CP.channel_id
   AND CP.package_id = :pid
ORDER BY UPPER(COALESCE(S.NAME, '(none)')), S.ID
  </query>
  <elaborator params="pid">
SELECT SA.server_id AS id,
       COALESCE(TO_CHAR(SA.completion_time, 'YYYY-MM-DD'),
           COALESCE(TO_CHAR(SA.pickup_time, 'YYYY-MM-DD'),
               TO_CHAR(SA.created, 'YYYY-MM-DD'))) AS TIMESTAMP,
       ACS.name AS ACTION_STATUS
  FROM rhnActionStatus ACS,
       rhnActionPackage AP,
       rhnPackage P,
       rhnServerAction SA
 WHERE SA.server_id in (%s)
   AND P.id = :pid
   AND AP.action_id = SA.action_id
   AND AP.name_id = P.name_id
   AND AP.evr_id = P.evr_id
   AND ACS.id = SA.status
ORDER BY SA.completion_time desc, SA.pickup_time desc, SA.created desc
  </elaborator>
  <elaborator name="system_overview" />
  <elaborator name="entitlements"/>
</mode>

</datasource_modes>
