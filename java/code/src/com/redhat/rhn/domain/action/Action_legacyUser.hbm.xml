<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

    <query name="Action.findByIdandOrgId">
        <![CDATA[from com.redhat.rhn.domain.action.Action as a where a.id = :aid and org_id = :orgId]]>
    </query>

    <sql-query name="Action.getServerActionCountByStatus">
        <return-scalar type="int" column="count"/>
        <![CDATA[select count(sa.server_id) as count from rhnServerAction sa where sa.action_id = :aid and
                                sa.status = :stid]]>
    </sql-query>



    <query name="Action.findDependentActions"><![CDATA[
                from Action a where a.prerequisite.id in (:action_ids)
    ]]></query>

   <sql-query name="Action.findLastActionByServerIdAndActionTypeIdAndUserId">
        <![CDATA[
select {ra.*}
    from rhnAction {ra}
   where
    ra.id = (SELECT max(rA.id)
                   FROM rhnAction rA
                              inner join rhnServerAction rsa on rsa.action_id = rA.id
                              inner join rhnActionStatus ras on ras.id = rsa.status
                              inner join rhnUserServerPerms usp on usp.server_id = rsa.server_id
                   WHERE
                      usp.user_id = :userId
                      AND rsa.server_id = :serverId
                      AND ras.name IN ('Completed', 'Failed')
                  AND rA.action_type = :actionTypeId
                        )
        ]]>

        <return alias="ra" class="com.redhat.rhn.domain.action.Action" />
    </sql-query>

    <query name="Action.findByServerAndOrgId">
        <![CDATA[from com.redhat.rhn.domain.action.Action as a
            left join fetch a.serverActions as sa
            where org_id = :orgId and
            sa.server = :server]]>
    </query>


     <query name="Action.rescheduleFailedActions">
       <![CDATA[ update  com.redhat.rhn.domain.action.server.ServerAction sa
                                        set sa.status = :queued, sa.remainingTries = :tries,
                                            sa.pickupTime = null, sa.completionTime = null,
                                            resultCode = null, resultMsg = null
                                        where sa.status = :failed and
                                                        sa.parentAction = :action ]]>
    </query>

     <query name="Action.rescheduleAllActions">
       <![CDATA[ update  com.redhat.rhn.domain.action.server.ServerAction sa
                                        set sa.status = :queued, sa.remainingTries = :tries,
                                            sa.pickupTime = null, sa.completionTime = null,
                                            resultCode = null, resultMsg = null
                                        where sa.parentAction = :action ]]>
    </query>
    
    <query name="Action.rescheduleSingleServerAction">
       <![CDATA[ update  com.redhat.rhn.domain.action.server.ServerAction sa
                                        set sa.status = :queued, sa.remainingTries = :tries,
                                            sa.pickupTime = null, sa.completionTime = null,
                                            resultCode = null, resultMsg = null
                                        where sa.parentAction = :action and
                                                              sa.serverId = :server ]]>
    </query>

    <query name="Action.findMinionIds">
    <![CDATA[
    SELECT sa.server.id
        FROM ServerAction sa
        JOIN sa.server s
        WHERE type(s) = com.redhat.rhn.domain.server.MinionServer AND action_id = :id
    ]]>
    </query>
    
    <query name="Action.findTradClientServerActions">
    <![CDATA[
        SELECT sa
            FROM ServerAction AS sa
                JOIN sa.server AS s
            WHERE type(s) != com.redhat.rhn.domain.server.MinionServer
                AND action_id = :id
    ]]>
    </query>

    <query name="Action.findMinionSummaries">
    <![CDATA[
        SELECT new com.redhat.rhn.domain.server.MinionSummary(
                    sa.server.id,
                    s.minionId,
                    s.digitalServerId,
                    s.machineId,
                    c.label,
                    s.os
               )
            FROM ServerAction AS sa
                JOIN sa.server AS s
                JOIN s.contactMethod AS c
            WHERE type(s) = com.redhat.rhn.domain.server.MinionServer
                AND action_id = :id
                AND sa.status IN (:allowedStatues)
    ]]>
    </query>
    
   <sql-query name="Action.findServerIds">
        <![CDATA[
select sa.server_id
        from rhnServerAction sa
        where sa.action_id = :action_id
        ]]>
    </sql-query>

    <sql-query name="Action.lookupPendingMinionActions">
        <![CDATA[select {ra.*}
                     from rhnAction {ra}
                     where ra.id in (select distinct ac.id
                                   from rhnAction ac
                                      inner join rhnServerAction sa on ac.id = sa.action_id
                                      inner join suseMinionInfo mi on sa.server_id = mi.server_id
                                   where sa.status in (0, 1))
        ]]>
        <return alias="ra" class="com.redhat.rhn.domain.action.Action"/>
    </sql-query>

    <sql-query name="Action.updateServerActionsPickedUp">
        <![CDATA[
            UPDATE rhnServerAction
                SET status = :status,
                    pickup_time = current_timestamp
            WHERE action_id  = :action_id
                AND server_id  IN (:server_ids)
                AND status NOT IN(2,3)
        ]]>
    </sql-query>
    <sql-query name="Action.updateServerActions">
        <![CDATA[
            UPDATE rhnServerAction
                SET status = :status
            WHERE action_id  = :action_id
                AND server_id  IN (:server_ids)
                AND status NOT IN(2,3)
        ]]>
    </sql-query>
    <sql-query name="Action.rejectAction">
        <return-scalar column="server_id" type="long"/>
        <![CDATA[
            UPDATE rhnServerAction
                SET status = 3
                        , result_code = -1
                        , result_msg = :rejection_reason
                        , completion_time = :completion_time
                        , remaining_tries = 0
            WHERE action_id IN (:action_ids) AND status = 0
        RETURNING server_id
        ]]>
    </sql-query>
</hibernate-mapping>
