# Copyright (c) 2013-2023 SUSE LLC.
# Licensed under the terms of the MIT license.

require 'rake'
require 'rubygems'
require 'yaml'
require 'cucumber/rake/task'
require 'rake/task'
require 'parallel'

junit_results = '-f junit -o results_junit'
build_number = ENV['BUILD_NUMBER']
result_folder = build_number.nil? ? 'results' : "results/#{build_number}"

namespace :cucumber do
  # Create results folder
  sh "mkdir -p #{result_folder}", verbose: false
  Dir.glob(File.join(Dir.pwd, 'run_sets', '**', '*.yml')).each do |entry|
    Cucumber::Rake::Task.new(File.basename(entry, '.yml').to_sym) do |t|
      filename = File.basename(entry, '.yml').to_sym
      timestamp = Time.now.strftime('%Y%m%d%H%M%S')
      node_name = ENV['NODE']
      node_result_extension = node_name.nil? ? '' : "_#{node_name}"
      json_results = "-f json -o #{result_folder}/output#{node_result_extension}_#{timestamp}-#{filename}.json"
      html_results = "-f html -o #{result_folder}/output#{node_result_extension}_#{timestamp}-#{filename}.html"
      profiles = ENV['PROFILE']
      # Our profiles include a --tags keyword in all of them, if we have multiple profiles in the list
      # it will act as an intersection of tags, not as an union of them.
      include_profiles = profiles.nil? ? '--profile default' : "--profile #{profiles.gsub(',', ' --profile ')}"
      tags = ENV['TAGS']
      # We provide the list of tags including the '@', so if necessary we can provide a negative tag '~@' on this list.
      # We generate the tags list as an union of tags (using 'or' between them),
      # not as an intersection of them (using 'and')
      include_tags =  tags.nil? ? [] : ['--tags', tags]
      cucumber_opts = %W[#{include_profiles} #{html_results} #{json_results} #{junit_results}] +
                      %w[-f pretty -r features] + include_tags
      # Immediately fail core if any feature is failing
      if filename.to_s.include?('core')
        cucumber_opts << '--fail-fast'
      end
      features = YAML.safe_load(File.read(entry))
      t.cucumber_opts = cucumber_opts + features unless features.nil?
    end
  end
end

namespace :parallel do
  Dir.glob(File.join(Dir.pwd, 'run_sets', '*.yml')).each do |entry|
    run_set = File.basename(entry, '.yml').to_sym
    desc "Run Cucumber #{run_set} features in parallel"
    task run_set.to_s do
      timestamp = Time.now.strftime('%Y%m%d%H%M%S')
      json_results = "-f json -o output_#{timestamp}-#{run_set}-$TEST_ENV_NUMBER.json"
      html_results = "-f html -o output_#{timestamp}-#{run_set}-$TEST_ENV_NUMBER.html"
      features = YAML.safe_load(File.read(File.join(Dir.pwd, 'run_sets', "#{run_set}.yml"))).join(' ')
      profiles = ENV['PROFILE']
      include_profiles = profiles.nil? ? '--profile default' : "--profile #{profiles.gsub(',', ' --profile ')}"
      tags = ENV['TAGS']
      include_tags =  tags.nil? ? '' : "--tags #{tags}"
      cucumber_opts = "#{include_profiles} #{include_tags} #{html_results} #{json_results} #{junit_results} " \
                      '-f CustomFormatter::PrettyFormatter -r features '
      sh "bundle exec parallel_cucumber -n 6 -o '#{cucumber_opts}' #{features}"
    end
  end
end

namespace :utils do
  desc 'Split secondary parallelizable tests into separate yaml files'
  task :split_secondary_p, [:sets] do |_t, args|
    sets_n = args[:sets].to_i
    if sets_n < 2
      puts "sets should be 2 or greater"
    else
      all_secondary_p = YAML.load_file('run_sets/secondary_parallelizable.yml')
      if all_secondary_p.length%sets_n != 0
        size = (all_secondary_p.length/sets_n) + 1
      else
        size = all_secondary_p.length/sets_n
      end
      split_sets = all_secondary_p.each_slice(size).to_a
      puts "split_sets.length: #{split_sets.length}"
      for i in 1..split_sets.length
        puts "writing #{i}"
        File.open("run_sets/secondary_parallelizable_#{i}.yml", "w") { |file|
          file.write(split_sets[i-1].to_yaml)
        }
      end
    end
  end

  desc 'Generate feature file for a client from a template and include it in a yaml file'
  task :generate_feature, [:template_path, :client_name, :output_path, :yaml_path] do |_t, args|
    # TODO: We want to use English language in our Cucumber .feature files,
    # so we need a map here to not use `rocky8_minion` but `Rocky 8 minion`
    output_filepath = "#{args[:output_path]}/#{args[:client_name]}_#{File.basename(args[:template_path], '.*')}.feature"
    sh "sed 's/<client>/#{args[:client_name]}/g' #{args[:template_path]} > #{output_filepath}", verbose: false
    sh "sed -i 's/<type>/salt/g' #{output_filepath}", verbose: false
    sh "echo '- #{output_filepath}' >> #{args[:yaml_path]}", verbose: false
  end

  desc 'Generate smoke tests for all the clients'
  task :generate_smoke_tests do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.reject! { |client| client.include?('proxy') }
    clients.reject! { |client| client.include?('monitoring_server') }
    clients.reject! { |client| client.include?('buildhost') || client.include?('terminal') }
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke(
        'features/build_validation/smoke_tests/smoke_tests.template',
        File.basename(client,'.feature'),
        'features/build_validation/smoke_tests',
        'run_sets/build_validation/build_validation_smoke_tests.yml'
      )
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to add Maintenance Update Channels and repositories for all the clients'
  task :generate_add_maintenance_update_repository_features do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.reject! { |client| client.include?('ssh') }
    clients.reject! { |client| client.include?('monitoring_server') }
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke(
        'features/build_validation/add_MU_repositories/add_maintenance_update_repositories.template',
        File.basename(client,'.feature'),
        'features/build_validation/add_MU_repositories',
        'run_sets/build_validation/build_validation_add_MU_repositories.yml'
      )
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to add Activation Keys for all the clients'
  task :generate_add_activation_keys_features do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke(
        'features/build_validation/add_activation_keys/add_activation_key.template',
        File.basename(client,'.feature'),
        'features/build_validation/add_activation_keys',
        'run_sets/build_validation/build_validation_add_activation_keys.yml'
      )
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate feature to create bootstrap repositories for all the clients'
  task :generate_create_bootstrap_repositories_features do
    clients = Rake::FileList['features/build_validation/init_clients/*.feature']
    clients.reject! { |client| client.include? 'ssh'}
    clients.reject! { |client| (client.include? 'buildhost') || (client.include? 'terminal') }
    clients.each do |client|
      Rake::Task['utils:generate_feature'].invoke('features/build_validation/create_bootstrap_repositories/create_bootstrap_repository.template',
                                                  File.basename(client,'.feature'),
                                                  'features/build_validation/create_bootstrap_repositories',
                                                  'run_sets/build_validation/build_validation_create_bootstrap_repositories.yml')
      Rake::Task['utils:generate_feature'].reenable
    end
  end

  desc 'Generate all the features we need for a Build Validation from templates'
  task :generate_build_validation_features do
    Rake::Task['utils:generate_smoke_tests'].invoke
    Rake::Task['utils:generate_smoke_tests'].reenable
    Rake::Task['utils:generate_add_maintenance_update_repository_features'].invoke
    Rake::Task['utils:generate_add_maintenance_update_repository_features'].reenable
    Rake::Task['utils:generate_add_activation_keys_features'].invoke
    Rake::Task['utils:generate_add_activation_keys_features'].reenable
    Rake::Task['utils:generate_create_bootstrap_repositories_features'].invoke
    Rake::Task['utils:generate_create_bootstrap_repositories_features'].reenable
  end

  desc 'Generate test report'
  task :generate_test_report do
    sh 'rm -rf ./cucumber_report && mkdir cucumber_report', verbose: false
    sh "timeout 180 bash -c -- \"while find #{result_folder}/output*.json -type f -size 0 | grep json; do sleep 10;done\" ; exit 0", verbose: false
    sh 'find . -size 0 -delete', verbose: false
    sh "node index.js #{result_folder} &> cucumber_reporter.log", verbose: false
    sh "cp cucumber_report/cucumber_report.html #{result_folder}"
  end
end

namespace :jenkins do

  desc 'Generate Rakefiles runstep'
  task :generate_rake_run_step, [:extension, :client_name, :output_path, :yaml_path] do |_t, args|
    output_filepath = "#{args[:output_path]}/#{args[:client_name]}#{args[:extension]}.feature"
    sh "echo '- #{output_filepath}' >> #{args[:yaml_path]}", verbose: false
  end

  desc 'Generate Rakefiles for create bootstrap repositories'
  task :generate_rake_files_create_bootstrap_repositories, [:instances] do |_t, args|
    minions = args[:instances]
    minions.each do |minion|
      next if minion.include?('ssh')
      Rake::Task['jenkins:generate_rake_run_step'].invoke('_create_bootstrap_repository',
                                                          File.basename(minion,'.feature'),
                                                          'features/build_validation/create_bootstrap_repositories',
                                                          "run_sets/build_validation/build_validation_create_bootstrap_repository_#{minion}.yml")
      Rake::Task['jenkins:generate_rake_run_step'].reenable
    end
  end

  desc 'Generate Rakefiles for init clients'
  task :generate_rake_files_init_clients, [:instances] do |_t, args|
    minions = args[:instances]
    minions.each do |minion|
      next if minion.include?('proxy') or minion.include?('monitoring')
      Rake::Task['jenkins:generate_rake_run_step'].invoke('',
                                                          File.basename(minion,'.feature'),
                                                          'features/build_validation/init_clients',
                                                          "run_sets/build_validation/build_validation_init_client_#{minion}.yml")
      Rake::Task['jenkins:generate_rake_run_step'].reenable
    end
  end

  desc 'Generate Rakefiles for Maintenance Update Channels and repositories'
  task :generate_rake_files_add_maintenance_update_repository, [:instances] do |_t, args|
    minions = args[:instances]
    minions.each do |minion|
      next if minion.include?('ssh')
      Rake::Task['jenkins:generate_rake_run_step'].invoke('_add_maintenance_update_repositories',
                                                          File.basename(minion,'.feature'),
                                                          'features/build_validation/add_MU_repositories',
                                                          "run_sets/build_validation/build_validation_add_maintenance_update_repositories_#{minion}.yml")
      Rake::Task['jenkins:generate_rake_run_step'].reenable
    end
  end

  desc 'Generate Rakefiles for Activation Keys feature'
  task :generate_rake_files_add_activation_keys, [:instances] do |_t, args|
    minions = args[:instances]
    minions.each do |minion|
      Rake::Task['jenkins:generate_rake_run_step'].invoke('_add_activation_key',
                                                          File.basename(minion,'.feature'),
                                                          'features/build_validation/add_activation_keys',
                                                          "run_sets/build_validation/build_validation_add_activation_key_#{minion}.yml")
      Rake::Task['jenkins:generate_rake_run_step'].reenable
    end
  end

  desc 'Generate Rakefiles for smoke tests '
  task :generate_rake_files_smoke_tests, [:instances] do |_t, args|
    minions = args[:instances]
    minions.each do |minion|
      next if minion.include?('proxy') or minion.include?('monitoring')
      Rake::Task['jenkins:generate_rake_run_step'].invoke('_smoke_tests',
                                                          File.basename(minion,'.feature'),
                                                          'features/build_validation/smoke_tests',
                                                          "run_sets/build_validation/build_validation_smoke_tests_#{minion}.yml")
      Rake::Task['jenkins:generate_rake_run_step'].reenable
    end
  end

  desc 'Generate all the Rakefiles needed for Build Validation'
  task :generate_rake_files_build_validation do
    instances = []
    ENV.select { |k, _v| k.include?('MINION') || k.include?('PROXY') || k.include?('CLIENT') || k.include?('MONITORING') }.each do |key, _value|
      # Convert ENV variables into testsuite variables
      instance = "#{key}".downcase
      instances << instance.gsub('sshminion', 'ssh_minion')
    end
    Rake::Task['jenkins:generate_rake_files_smoke_tests'].invoke(instances)
    Rake::Task['jenkins:generate_rake_files_smoke_tests'].reenable
    Rake::Task['jenkins:generate_rake_files_create_bootstrap_repositories'].invoke(instances)
    Rake::Task['jenkins:generate_rake_files_create_bootstrap_repositories'].reenable
    Rake::Task['jenkins:generate_rake_files_init_clients'].invoke(instances)
    Rake::Task['jenkins:generate_rake_files_init_clients'].reenable
    Rake::Task['jenkins:generate_rake_files_add_activation_keys'].invoke(instances)
    Rake::Task['jenkins:generate_rake_files_add_activation_keys'].reenable
    Rake::Task['jenkins:generate_rake_files_add_maintenance_update_repository'].invoke(instances)
    Rake::Task['jenkins:generate_rake_files_add_maintenance_update_repository'].reenable
  end
end
