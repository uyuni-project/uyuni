<project name="search-server" basedir="." default="all">
    <condition property="java_libdir" value="${JAVA_LIBDIR}" else="/usr/share/java">
      <isset property="JAVA_LIBDIR"/>
    </condition>

    <import file="buildconf/build-utils.xml" />
    <import file="buildconf/build-props.xml" />

    <property file="build.properties" />

    <property name="deploy.host" value="deployhost" />
    <property name="deploy.port" value="22" />
    <property name="deploy.dir" value="/usr/share/rhn/search/lib" />
    <property name="deploy.user" value="root" />

    <property name="ssh.socket.file" value="${user.home}/.ssh/manager-build-tunnel-${deploy.host}-${deploy.user}"/>
    <property name="ssh.socket.option" value="-o ControlPath=${ssh.socket.file}"/>
    <property name="ssh.command.args" value="${ssh.socket.option} -p ${deploy.port} ${deploy.user}@${deploy.host}"/>
    <property name="rsync.arg.rsh" value="ssh ${ssh.socket.option} -p ${deploy.port}"/>

    <path id="project.classpath">
        <fileset dir="${java.lib.dir}" includes="**/*.jar" />
    </path>

    <path id="test.classpath">
        <pathelement location="${build.dir}" />
        <path refid="project.classpath" />
        <pathelement location="${basedir}/src/config" />
    </path>

    <target name="init-ivy" unless="installbuild">
        <mkdir dir="${java.lib.dir}" />
        <jpackage-deps jars="ivy" dir="${java.lib.dir}" />
        <taskdef name="ivy-retrieve"
             classname="org.apache.ivy.ant.IvyRetrieve"/>
    </target>

    <target name="make-eclipse-project" depends="resolve-ivy"
            description="Generate eclipse project files">
      <copy file="buildconf/eclipse.project" tofile=".project" />
      <copy file="buildconf/eclipse.classpath" tofile=".classpath" />
      <copy toDir="${basedir}">
        <fileset dir="${basedir}/../../java/conf/eclipse">
          <include name=".checkstyle"/>
          <include name=".settings/*"/>
        </fileset>
      </copy>
    </target>

    <target name="check-testcase-name" if="testcase" depends="">
        <propertyregex property="valid.testcase"
            input="${testcase}"
            regexp="(.*)Test$"
            select="\1"
            casesensitive="true" />
    </target>

    <target name="check-testcase" depends="check-testcase-name" if="testcase"
        unless="valid.testcase">
        <fail message="Invalid testcase name: ${testcase}.  Class name must look like .*Test"/>
    </target>

    <target name="test" depends="compile, check-testcase"
        description="Run the tests (use -Dtestcase=&lt;testcase&gt;)">
        <mkdir dir="${report.dir}" />
        <!-- set testcase to wildcard "*" to test everything, unless
        a specific testcase name was supplied. -->
        <if>
            <not>
                <isset property="${testcase}" />
            </not>
            <then>
                <property name="testcase" value="*Test"/>
            </then>
        </if>
        <junit>
            <sysproperty key="rhn.config.dir" value="/etc/rhn" />
            <sysproperty key="search.config.dir" value="src/config/search" />
            <sysproperty key="log4j2.configuration" value="log4j2.test.xml" />
            <classpath refid="test.classpath" />
            <formatter type="brief" usefile="false" />
            <formatter type="xml" />
            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${build.dir}" includes="**/${testcase}.class" />
            </batchtest>
        </junit>
    </target>

    <target name="resolve-local" description="resolve jars via jpackage" if="installbuild">
        <jpackage-deps jars="${jpackage.jars}" dir="${java.lib.dir}" />
    </target>
    
    <target name="obs-to-maven" description="Updates local maven repository with OBS jars" unless="installbuild">
      <exec failonerror="true" executable="obs-to-maven">
        <arg line="${basedir}/buildconf/obs-maven-config.yaml ${basedir}/buildconf/repository" />
      </exec>
    </target>


    <target name="resolve-ivy" description="retrieve dependencies with ivy"
              depends="init-ivy,obs-to-maven" unless="installbuild">
        <!-- properties set here to show we are overriding default ivy values -->
        <property name="ivy.default.ivy.user.dir" value="${user.home}/.ivy/search-server"/>
        <property name="ivy.local.default.artifact.pattern" value="[artifact]-[revision].[ext]" />
        <property name="ivy.ivyrep.default.ivy.root" value="${ivyserver}/ivy/" />
        <property name="ivy.ivyrep.default.artifact.root" value="${ivyserver}/ivy/" />
        <property name="ivy.ivyrep.default.artifact.pattern" value="[artifact]-[revision].[ext]" />
        <ivy-retrieve/>
    </target>

    <target name="resolve" depends="resolve-ivy,resolve-local" />

    <target name="prep">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${java.lib.dir}" />
    </target>

    <target name="clean">
        <delete dir="${build.dir}" />
        <delete dir="${build.instrument.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${java.lib.dir}" />
        <delete dir="${report.dir}" />
        <delete file="coverage.ec" />
        <delete file="rhn_search_daemon.log" />
    </target>

    <target name="compile" depends="prep, resolve">
        <javac srcdir="${java.src.dir}"
               classpathref="project.classpath"
               destdir="${build.dir}"
               deprecation="on"
               excludesfile="buildconf/exclude"
               debug="on">
            <compilerarg value="-Xlint:unchecked" />
        </javac>
        <copy todir="${build.dir}/com/redhat/satellite/search/db">
            <fileset dir="${config.src.dir}/com/redhat/satellite/search/db/">
                <include name="*.xml" />
            </fileset>
        </copy>
        <copy file="${config.src.dir}/quartz.properties" todir="${build.dir}" />
    </target>

    <target name="package" depends="compile">
        <jar basedir="${build.dir}"
             destfile="${dist.dir}/${jar.file.name}"
             excludes="**/tests/**"
             includes="**/**" />
    </target>

    <target name="create-local-repo" description="Create a local Ivy repo">
        <mkdir dir="${user.home}/.ivy/search-server/local/" />
    </target>

    <target name="clean-cache" description="Removes the Ivy jar cache">
        <delete dir="${lib.dir}" quiet="true" />
        <delete dir="${user.home}/.ivy/search-server/cache/" quiet="true" />
    </target>

    <target name="all" depends="package" />

    <target name="init-install">
        <property name="installbuild" value="true"/>
    </target>

    <target name="install" depends="init-install,package" />

    <target name="check-ssh-socket">
      <available file="${ssh.socket.file}" property="ssh-socket.present"/>
    </target>

    <target name="open-ssh-socket" depends="check-ssh-socket" unless="ssh-socket.present">
      <exec executable="ssh">
        <arg line="-M -f -N -C ${ssh.command.args}" />
      </exec>
    </target>

    <target name="deploy" depends="open-ssh-socket" description="Deploy a new copy of SUSE Manager">
      <echo message="Copying files to remote host..." />
      <exec failonerror="true" executable="rsync">
        <arg line="-a --rsh '${rsync.arg.rsh}' ${dist.dir}/ ${deploy.user}@${deploy.host}:${deploy.dir}/" />
      </exec>

      <exec failonerror="true" executable="ssh">
        <arg line="${ssh.command.args} ln -sf ${deploy.dir}/${jar.file.name} /usr/share/rhn/search/lib/spacewalk-search.jar"/>
      </exec>
    </target>

    <target name="restart-rhn-search" depends="open-ssh-socket" description="Restart the rhn-search process">
      <echo message="Launching rhn-search restart..."/>
      <exec executable="ssh">
        <arg line="${ssh.command.args}  nohup rcrhn-search restart > /dev/null 2>&amp;1 &amp;"/>
      </exec>
    </target>

    <target name="deploy-restart" depends="deploy, restart-rhn-search" />

</project>
