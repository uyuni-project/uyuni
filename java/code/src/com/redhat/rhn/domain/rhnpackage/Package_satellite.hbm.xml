<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"classpath://org/hibernate/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.rhnpackage.Package"
           table="rhnPackage">

        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="sequence">
                <param name="sequence">RHN_PACKAGE_ID_SEQ</param>
            </generator>
        </id>

        <property name="rpmVersion"      type="string" column="rpm_version"/>
        <property name="description"     type="string" column="description"/>
        <property name="summary"         type="string" column="summary"/>
        <property name="packageSize"     type="long"   column="package_size"/>
        <property name="payloadSize"     type="long"   column="payload_size"/>
        <property name="installedSize"   type="long"   column="installed_size"/>
        <property name="buildHost"       type="string" column="build_host"/>
        <property name="buildTime"       type="timestamp"   column="build_time"/>
        <property name="vendor"          type="string" column="vendor"/>
        <property name="payloadFormat"   type="string" column="payload_format"/>
        <property name="compat"          type="long"   column="compat"/>
        <property name="path"            type="string" column="path"/>
        <property name="headerSignature" type="string" column="header_sig"/>
        <property name="copyright"       type="string" column="copyright"/>
        <property name="cookie"          type="string" column="cookie"/>
        <property name="lastModified"    type="timestamp"   column="last_modified"/>
        <property name="created"         type="timestamp"   column="created"/>
        <property name="modified"        type="timestamp"   column="modified"/>

       <set name="packageKeys" lazy="true" table="rhnPackageKeyAssociation"
            cascade="save-update" >
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageKey"
                column="key_id"/>
        </set>


       <set name="channels" lazy="true" table="rhnChannelPackage"
            cascade="save-update">
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.channel.Channel"
                column="channel_id"/>
        </set>

       <set name="publishedErrata" lazy="true" table="rhnErrataPackage"
            cascade="save-update" >
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.errata.impl.PublishedErrata"
                column="errata_id"/>
        </set>

       <set name="unpublishedErrata" lazy="true" table="rhnErrataPackageTmp"
            cascade="save-update" >
            <key column="package_id"/>
            <many-to-many
                class="com.redhat.rhn.domain.errata.impl.UnpublishedErrata"
                column="errata_id"/>
        </set>



       <set name="packageFiles" lazy="true" table="rhnPackageFile"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageFile" />
        </set>

       <set name="provides" lazy="true" table="rhnPackageProvides"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageProvides" />
        </set>

     <set name="requires" lazy="true" table="rhnPackageRequires"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageRequires" />
        </set>

     <set name="conflicts" lazy="true" table="rhnPackageConflicts"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageConflicts" />
        </set>


     <set name="obsoletes" lazy="true" table="rhnPackageObsoletes"
            cascade="save-update,delete" inverse="true">
            <key column="package_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.rhnpackage.PackageObsoletes" />
        </set>



        <many-to-one name="checksum" class="com.redhat.rhn.domain.common.Checksum"
                     column="checksum_id" />
        <many-to-one name="org"
                     class="com.redhat.rhn.domain.org.Org"
                     column="org_id"
                     cascade="none"/>
        <many-to-one name="packageName"
                     class="com.redhat.rhn.domain.rhnpackage.PackageName"
                     column="name_id"
                     cascade="save-update"/>
        <many-to-one name="packageEvr"
                     class="com.redhat.rhn.domain.rhnpackage.PackageEvr"
                     column="evr_id"
                     cascade="save-update"/>
        <many-to-one name="packageGroup"
                     class="com.redhat.rhn.domain.rhnpackage.PackageGroup"
                     column="package_group"
                     cascade="save-update"/>
        <many-to-one name="sourceRpm"
                     class="com.redhat.rhn.domain.rpm.SourceRpm"
                     column="source_rpm_id"
                     cascade="save-update"/>
        <many-to-one name="packageArch"
                     class="com.redhat.rhn.domain.rhnpackage.PackageArch"
                     column="package_arch_id"
            		 cascade="none"/>



        <joined-subclass name="com.redhat.rhn.domain.rhnpackage.Patch" table="rhnSolarisPatch">
		  <key column="package_id"/>
                  <property name="solarisRelease"      type="string" column="solaris_release"/>
                  <property name="sunosRelease"      type="string" column="sunos_release"/>
                  <property name="patchInfo"      type="string" column="patchinfo"/>
                  <property name="readme" column="readme" type="binary" lazy="true" />
		        <many-to-one name="patchType"
		                     class="com.redhat.rhn.domain.solaris.PatchType"
		                     column="patch_type"
		            		 cascade="none"/>

	       <set name="patchSets" lazy="true" table="rhnSolarisPatchSetMembers"
	            cascade="save-update">
	            <key column="patch_id"/>
	            <many-to-many
	                class="com.redhat.rhn.domain.rhnpackage.PatchSet"
	                column="patch_set_id"/>
	        </set>

        </joined-subclass>

        <joined-subclass name="com.redhat.rhn.domain.rhnpackage.PatchSet" table="rhnSolarisPatchSet">
		  <key column="package_id"/>
                  <property name="setDate"     type="date" column="set_date"/>
                  <property name="readme" column="readme" type="binary" lazy="true" />
			        <set name="members" lazy="true" table="rhnSolarisPatchMembers" cascade="all">
			            <key column="patch_set_id"/>
			            <many-to-many class="com.redhat.rhn.domain.rhnpackage.Patch"
			                column="patch_id"/>
			          </set>
        </joined-subclass>



    </class>

   <query name="Package.findOtherArches">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p
        	where p.packageName = :name and
        	  p.packageEvr = :evr and p.packageArch != :arch]]>
    </query>



    <query name="Package.findById">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p where p.id = :id]]>
    </query>

    <query name="Package.findByPackageName">
        <![CDATA[from com.redhat.rhn.domain.rhnpackage.Package as p where p.packageName = :packageName]]>
    </query>

    <query name="Package.listOrphans">
    	<![CDATA[ select p
    		from com.redhat.rhn.domain.rhnpackage.Package as p
		where p.org = :org and p.channels is empty
    	]]>
    </query>

    <query name="Package.lookupByNevra">
    	<![CDATA[ select p
    		from com.redhat.rhn.domain.rhnpackage.Package as p
    		where p.packageArch = :arch and
    		p.packageName.name = :name and
			p.packageEvr.release = :release and
			p.packageEvr.version = :version and
			(p.org is null or p.org = :org)
    	]]>
    </query>

</hibernate-mapping>
