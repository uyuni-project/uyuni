<datasource_modes>

<mode name="system_channels">
  <query params="sid">
SELECT C.id,
       C.label,
       C.name,
       C.parent_channel
  FROM rhnChannel C,
       rhnServerChannel SC
 WHERE SC.server_id = :sid
   AND SC.channel_id = C.id
ORDER BY C.parent_channel NULLS LAST, UPPER(C.name)
  </query>
</mode>


<mode name="system_snapshot_channel_list">
  <query params="sid, ss_id">
SELECT  C.id,
        C.label,
        C.name,
        C.parent_channel
  FROM  rhnChannel C,
        rhnSnapshotChannel SNC,
        rhnSnapshot SN
 WHERE  SN.id = :ss_id
   AND  SN.server_id = :sid
   AND  SN.id = SNC.snapshot_id
   AND  SNC.channel_id = C.id
ORDER BY C.parent_channel NULLS FIRST, UPPER(C.name)
  </query>
</mode>

<mode name="user_subscribe_perms">
  <query params="u_id, org_id">
SELECT AC.channel_id AS ID,
       AC.channel_name AS NAME, 
       rhn_channel.user_role_check(AC.channel_id, :u_id, 'subscribe') AS HAS_PERM,
       case
           when rhn_channel.org_channel_setting(AC.channel_id, :org_id,'not_globally_subscribable') = 0 then 1
	   else null end
       AS GLOBALLY_SUBSCRIBABLE
  FROM rhnAvailableChannels AC
 WHERE AC.org_id = :org_id
ORDER BY UPPER(AC.channel_name)
  </query>
</mode>

<mode name="user_manage_perms">
  <query params="u_id, org_id">
SELECT C.id AS ID,
       C.name AS NAME, 
       rhn_channel.user_role_check(C.id, :u_id, 'manage') AS HAS_PERM
  FROM rhnChannel C
 WHERE C.org_id = :org_id
ORDER BY UPPER(C.name)
  </query>
</mode>

<mode name="channel_entitlements">
  <query params="org_id">
  -- Wish we didn't have to use the GREATEST function here to hide the fact that the view
  -- is returning a -1 on occasion.  Couldn't figure out what was causing that DB value to 
  -- mysteriously be set to -1 for only a few orgs (23 out of 1,139,618 records in
  -- rhnPrivateChannelFamily).  See BZ 170582 for more info.
SELECT CFO.id, CFO.name, GREATEST(0, CFO.current_members) current_members, CFO.max_members, CFO.has_subscription, CFO.url
  FROM rhnChannelFamilyOverview CFO
 WHERE CFO.org_id = :org_id
  </query>
</mode>

<mode name="channel_tree">
  <query params="user_id, org_id">
SELECT  UACh.channel_name AS NAME,
        UACh.channel_id AS ID,
        UACh.channel_depth AS DEPTH,
        UACh.channel_arch_id,
        UACh.current_members,
        UACh.available_members,
       (
SELECT COUNT(DISTINCT CPN.name_id||CPN.package_arch_id)
  FROM rhnChannelNewestPackage CPN
 WHERE CPN.channel_id = UACh.channel_id
        ) AS PACKAGE_COUNT,
        UACh.parent_or_self_label,
        UACh.channel_label
  FROM  rhnUserAvailableChannels UACh
 WHERE  UACh.user_id = :user_id
   AND  (    UACh.channel_arch_id = lookup_channel_arch('channel-ia32')
          OR  EXISTS (SELECT 1
                 FROM rhnServerChannelArchCompat SCAC, rhnServer S
                WHERE S.org_id = :org_id
                  AND S.server_arch_id = SCAC.server_arch_id
                  AND SCAC.channel_arch_id = UACh.channel_arch_id))
   AND  (UACh.end_of_life is NULL OR UACh.end_of_life > current_timestamp)
ORDER BY rhn_channel.channel_priority(UACh.parent_or_self_id), UACh.parent_or_self_id DESC, UACh.channel_depth, 
         UPPER(UACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="channel_tree_ssm_install">
  <query params="org_id, user_id">
SELECT  ACh.channel_name AS NAME, ACh.channel_id AS ID, ACh.channel_depth AS DEPTH, ACh.channel_arch_id, ACh.current_members, ACh.available_members, (SELECT COUNT(DISTINCT CPN.name_id) FROM rhnChannelNewestPackage CPN WHERE CPN.channel_id = ACh.channel_id) AS PACKAGE_COUNT, ACh.parent_or_self_label, ACh.channel_label
  FROM  rhnAvailableChannels ACh
 WHERE  ACh.org_id = :org_id
   AND  (    ACh.channel_arch_id = lookup_channel_arch('channel-ia32')
          OR  EXISTS (SELECT 1
                 FROM rhnServerChannelArchCompat SCAC, rhnServer S
                WHERE S.org_id = :org_id
                  AND S.server_arch_id = SCAC.server_arch_id
                  AND SCAC.channel_arch_id = ACh.channel_arch_id))
   AND  EXISTS (
SELECT SC.channel_id
  FROM rhnServerChannel SC, rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.element = SC.server_id
   AND SC.channel_id = ACh.channel_id
)
ORDER BY  rhn_channel.channel_priority(ACh.parent_or_self_id), ACh.parent_or_self_id, ACh.channel_depth, UPPER(ACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="channel_tree_ssm_solaris_install">
  <query params="org_id, user_id">
SELECT  ACh.channel_name AS NAME,         ACh.channel_id AS ID,         ACh.channel_depth AS DEPTH,         ACh.channel_arch_id,         ACh.current_members,         ACh.available_members,         (  SELECT COUNT(DISTINCT CPN.name_id)              FROM rhnChannelNewestPackage CPN
            WHERE CPN.channel_id = ACh.channel_id) AS PACKAGE_COUNT,
        ACh.parent_or_self_label,
        ACh.channel_label
  FROM  rhnAvailableChannels ACh, rhnChannelArch CA, rhnArchType AT
 WHERE  ACh.org_id = :org_id
   AND  Ach.channel_arch_id = CA.id
   AND  CA.arch_type_id = AT.id
   AND  AT.label = 'sysv-solaris'
   AND  EXISTS (
          SELECT SC.channel_id
            FROM rhnServerChannel SC, rhnSet ST
           WHERE ST.user_id = :user_id
             AND ST.element = SC.server_id
             AND SC.channel_id = ACh.channel_id )
ORDER BY  rhn_channel.channel_priority(ACh.parent_or_self_id), ACh.parent_or_self_id, ACh.channel_depth, UPPER(ACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>


<mode name="non_eol_all_channels_tree">
  <query params="user_id">
SELECT  UACh.channel_name AS NAME,
        UACh.channel_id AS ID,
        UACh.channel_depth AS DEPTH,
        UACh.channel_arch_id,
        UACh.current_members,
        UACh.available_members,
        (
SELECT COUNT(DISTINCT CPN.name_id||CPN.package_arch_id)
  FROM rhnChannelNewestPackage CPN
 WHERE CPN.channel_id = UACh.channel_id
        ) AS PACKAGE_COUNT,
        UACh.parent_or_self_label,
        UACh.channel_label,
	1 show_all_results
  FROM  rhnChannel C,
        rhnUserAvailableChannels UACh
 WHERE  UACh.user_id = :user_id
   AND  (UACh.end_of_life is NULL OR UACh.end_of_life > current_timestamp)
   AND  UACh.channel_id = C.id
   AND  NOT EXISTS (SELECT 1 FROM rhnChannel WHERE id = C.parent_channel AND end_of_life &lt;= current_timestamp)
ORDER BY  rhn_channel.channel_priority(UACh.parent_or_self_id), UACh.parent_or_self_id, UACh.channel_depth, UPPER(UACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="eol_all_channels_tree">
  <query params="user_id">
SELECT  UACh.channel_name AS NAME,
        UACh.channel_id AS ID,
        UACh.channel_depth AS DEPTH,
        UACh.channel_arch_id,
        UACh.current_members,
        UACh.available_members,
        (
SELECT COUNT(DISTINCT CPN.name_id||CPN.package_arch_id)
  FROM rhnChannelNewestPackage CPN
 WHERE CPN.channel_id = UACh.channel_id
        ) AS PACKAGE_COUNT,
        UACh.parent_or_self_label,
        UACh.channel_label,
	1 show_all_results
  FROM  rhnChannel C,
        rhnUserAvailableChannels UACh
 WHERE  UACh.user_id = :user_id
   AND  UACh.channel_id = C.id
   AND  ( UACh.end_of_life &lt;= current_timestamp
          OR
          EXISTS (SELECT 1 FROM rhnChannel WHERE id = C.parent_channel AND end_of_life &lt;= current_timestamp)
        )
ORDER BY  rhn_channel.channel_priority(UACh.parent_or_self_id), UACh.parent_or_self_id, UACh.channel_depth, UPPER(UACh.channel_name)
  </query>
  <elaborator name="visible_server_count"/>
</mode>

<mode name="owned_channels_tree">
  <query params="user_id">
SELECT CTV.name, CTV.id, CTV.depth, CTV.channel_arch_id, C.org_id,
       (SELECT COUNT (cp.package_id)
          FROM rhnchannelpackage cp
         WHERE cp.channel_id = CTV.id) AS package_count,
       CTV.parent_or_self_label, CTV.label AS channel_label
  FROM rhnchannel C, rhnChannelTreeView CTV
 WHERE  CTV.id = C.ID
   AND (   rhn_channel.user_role_check(C.id, :user_id, 'manage') = 1
        OR EXISTS (
              SELECT 1
                FROM rhnChannel C2
               WHERE C2.parent_channel = C.ID
                 AND rhn_channel.user_role_check(C2.id, :user_id, 'manage') = 1))
ORDER BY rhn_channel.channel_priority(CTV.parent_or_self_id), CTV.parent_or_self_id, CTV.depth, UPPER(CTV.name)
  </query>
</mode>

<query name="visible_server_count" params="user_id, org_id">
  SELECT SC.channel_id AS ID, count(SC.server_id) as system_count
    FROM rhnServerChannel SC,
         rhnServer S
   WHERE S.org_id = :org_id
     AND S.id = SC.server_id
     AND SC.channel_id IN(%s)
     AND EXISTS (SELECT 1 FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = S.id)
GROUP BY SC.channel_id
</query>

<mode name="subscribable_channels">
  <query params="server_id, user_id, base_channel_id">
SELECT  DISTINCT C.id,
                 C.label,
                 C.name,
                 C.summary,
                 C.gpg_key_url
  FROM  rhnChannelFamilyMembers CFM,
        rhnChannel C,
	rhnUserChannel UC
 WHERE  UC.user_id = :user_id
   AND  UC.role = 'subscribe'
   AND  UC.channel_id = C.id
   AND  C.parent_channel = :base_channel_id
   AND  C.id = CFM.channel_id
   AND  C.parent_channel IS NOT NULL
   AND  NOT EXISTS (SELECT 1 FROM rhnServerChannel WHERE server_id = :server_id AND channel_id = C.id)
  </query>
</mode>

<mode name="all_rh_channel_families_insecure">
  <query params="">
  select label from rhnChannelFamily
  </query>
</mode>

</datasource_modes>
