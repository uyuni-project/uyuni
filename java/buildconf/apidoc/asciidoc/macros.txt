#set($date="dateTime.iso8601")
#set($listlevel = 1)
#macro(list)#foreach($i in [1..$listlevel])*#end#end
#macro(type $type)[.$type]#$type# #end
#macro(atype $type)[.array]#$type array# #end
#macro(serializer $serializer)
#list() $serializer
#end
#macro(prop $type $value)
#list() #type($type) "$value"
#end
#macro(prop_desc $type $value $desc)
#list() #type($type) "$value" - $desc
#end
#macro(prop_array $key $type $desc)
#list() #atype($type) "$key" - $desc
#end
#macro(prop_array_begin $key)
#list() #type("array") "$key"
#set($listlevel = $listlevel + 1)
#end
#macro(prop_array_begin_desc $key $desc)
#list() #type("array") "$key" - $desc
#set($listlevel = $listlevel + 1)
#end
#macro(prop_array_end)
#set($listlevel = $listlevel - 1)
#end
#macro(struct_begin $value)
#list() #type("struct") $value
#set($listlevel = $listlevel + 1)
#end
#macro(struct_end)
#set($listlevel = $listlevel - 1)
#end
#macro(struct_desc $value $desc)
#list() #type("struct") $value - $desc
#set($listlevel = $listlevel + 1)
#end
#macro(struct_desc_end)
#set($listlevel = $listlevel - 1)
#end
#macro(return_array_begin)
#list() #type("array"):
#set($listlevel = $listlevel + 1)
#end
#macro(array_begin $value)
#list() #type("array") $value
#set($listlevel = $listlevel + 1)
#end
#macro(array_begin_desc $value $desc)
#list() #type("array") $value - $desc
#set($listlevel = $listlevel + 1)
#end
#macro(array_end)
#set($listlevel = $listlevel - 1)
#end
#macro(array_single $type $value)
#list() #atype("$type") $value
#end
#macro(array_single_desc $type $value $desc)
#list() #atype($type) $value - $desc
#end
#macro(options)
#set($listlevel = $listlevel + 1)
#end
#macro(item $item)
#list() $item
#end
#macro(item_desc $item, $desc)
#list() $item - $desc
#end
#macro(options_end)
#set($listlevel = $listlevel - 1)
#end
#macro(param $type $value)
#list() #type($type) $value
#end
#macro(param_desc $type $value $desc)
#list() #type($type) $value - $desc
#end
#macro(session_key)
  #param("string", "sessionKey")
#end
#macro(return_int_success)
#list() #type('int') - 1 on success, exception thrown otherwise.
#end
#macro(itemlist)

#end
#macro(itemlist_end)

#end
#macro(paragraph)

#end
#macro(paragraph_end)

#end
