<datasource_modes>

<mode name="bugs_fixed">
  <query params="eid">
SELECT  EBL.bug_id AS ID,
        EBL.summary AS SUMMARY
        EBL.href AS HREF
  FROM  rhnErrataBugList EBL
 WHERE  EBL.errata_id = :eid
ORDER BY EBL.bug_id
  </query>
</mode>

<mode name="relevant_errata">
  <query params="user_id">
SELECT E.id, E.update_date
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededErrataCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="all_errata">
  <query params="org_id">
SELECT  DISTINCT E.id, E.update_date
  FROM  rhnErrata E, rhnChannelErrata CE, rhnAvailableChannels AC
 WHERE  AC.org_id = :org_id
   AND  CE.channel_id = AC.channel_id
   AND  CE.errata_id = E.id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_system_set">
  <query params="user_id">
SELECT E.id, E.update_date
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededErrataCache SNEC
         WHERE SNEC.server_id IN (SELECT element FROM rhnSet WHERE user_id = :user_id AND label = 'system_list')
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="relevant_to_system_set_elab" />
</mode>


<mode name="relevant_to_system">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator params="sid" multiple="t">
SELECT DISTINCT AEU.errata_id AS id,
                AST.name AS status,
                SA.action_id,
                SA.modified
  FROM rhnActionErrataUpdate AEU,
       rhnServerAction SA,
       rhnActionStatus AST
 WHERE SA.server_id = :sid
   AND SA.action_id = AEU.action_id
   AND AEU.errata_id IN (%s)
   AND AST.id = SA.status
   AND NOT (
EXISTS (
SELECT 1 FROM rhnServerNeededErrataCache
 WHERE server_id = SA.server_id
   AND errata_id = AEU.errata_id
)
AND
AST.name = 'Completed' -- filter out rolled back status
)
ORDER BY SA.modified DESC
  </elaborator>
  <elaborator name="errata_overview" />
</mode>

<mode name="unscheduled_relevant_to_system">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = :sid
                      AND SA.status = AST.id
                      AND AST.name IN('Queued', 'Picked Up')
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="unqueued_relevant_to_system">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = :sid
                      AND SA.status = AST.id
                      AND AST.name = 'Queued'
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="unscheduled_relevant_to_system_set">
  <query params="user_id, set_label">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = SNEC.server_id
   AND SNEC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = ST.element
                      AND SA.status = AST.id
                      AND AST.name IN('Queued', 'Picked Up')
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>


<mode name="relevant_to_channel">
  <query params="cid">
SELECT DISTINCT E.id,
                E.advisory_name AS ADVISORY,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS ISSUE_DATE,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS LONG_UPDATE_DATE,
                E.update_date,
                E.synopsis,
                E.advisory_type,
                E.last_modified AS LAST_MODIFIED_SHORT,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS LAST_MODIFIED
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
ORDER BY E.last_modified DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_one_channel_but_not_another">
  <query params="cid, cid_2">
SELECT DISTINCT E.id, E.update_date, E.advisory_name, E.advisory_type, E.synopsis as ADVISORY_SYNOPSIS
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND NOT EXISTS (SELECT 1
                     FROM rhnChannelErrata CE2,
                          rhnErrataCloned EC
                    WHERE CE2.channel_id = :cid_2
                      AND EC.original_id = CE.errata_id
                      AND EC.id = CE2.errata_id)
   AND NOT EXISTS  (select 1
                  from  rhnChannelErrata CE3
                 where CE3.channel_id = :cid_2
                       AND CE3.errata_id = E.id)
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_progenitor">
  <query params="cid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnChannelErrata CE,
       rhnChannelCloned CC
 WHERE CC.id = :cid
   AND CE.channel_id = CC.id
   AND CE.errata_id = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_group">
  <query params="sgid">
SELECT DISTINCT E.id, E.advisory, E.advisory_name, E.advisory_type, E.synopsis AS ADVISORY_SYNOPSIS,
     TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED, E.update_date,
     (SELECT COUNT(Distinct SGM2.server_id)
       FROM rhnServerNeededErrataCache SNEC,
            rhnServerGroupMembers SGM2
       WHERE SNEC.errata_id = E.id
       AND SNEC.server_id = SGM2.server_id
       AND SGM2.server_group_id = :sgid) AS AFFECTED_SYSTEM_COUNT
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC,
       rhnServerGroupMembers SGM,
       rhnServerFeaturesView SFV
 WHERE SGM.server_id = SNEC.server_id
   AND SNEC.errata_id = E.id
   AND SFV.server_id = SGM.server_id
   AND SFV.label = 'ftr_system_grouping'
   AND SGM.server_group_id = :sgid
ORDER BY E.update_date, E.id
</query>
</mode>

<query name="in_set" params="user_id, set_label">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
</query>

<mode name="in_set">
  <query name="in_set" />
  <elaborator name="errata_overview" />
</mode>

<mode name="unpublished_in_set">
  <query params="user_id, set_label">
SELECT DISTINCT E.id,
       E.update_date,
       E.advisory,
       E.advisory_type,
       E.advisory_name,
       E.synopsis AS ADVISORY_SYNOPSIS,
       TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
       TO_CHAR(E.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
       E.locally_modified,
       0 AS PUBLISHED
  FROM rhnErrataTmp E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="in_set_relevant_to_system_set">
  <query name="in_set" />
  <elaborator name="relevant_to_system_set_elab" />
</mode>


<mode name="published_owned_errata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
         TO_CHAR(E.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
         E.locally_modified,
         1 AS PUBLISHED
    FROM rhnErrata E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator params="">
  SELECT EC.id, EC.original_id AS from_errata_id, 'cloned_from' as RELATIONSHIP
    FROM rhnErrataCloned EC
   WHERE EC.id IN (%s)
  </elaborator>
</mode>

<mode name="unpublished_owned_errata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
         TO_CHAR(E.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
         E.locally_modified,
         0 AS PUBLISHED
    FROM rhnErrataTmp E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator params="">
  SELECT EC.id, EC.original_id, 'cloned_from' as RELATIONSHIP
    FROM rhnErrataClonedTmp EC
   WHERE EC.id IN (%s)
  </elaborator>
</mode>

<mode name="published_clones_of_errata">
  <query params="org_id, eid">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
         TO_CHAR(E.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
         E.locally_modified,
         1 AS PUBLISHED
    FROM rhnErrata E, rhnErrataCloned EC
   WHERE E.org_id = :org_id
     AND EC.id = E.id
     AND EC.original_id = :eid
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="unpublished_clones_of_errata">
  <query params="org_id, eid">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
         TO_CHAR(E.created, 'YYYY-MM-DD HH24:MI:SS') AS CREATED,
         E.locally_modified,
         0 AS PUBLISHED
    FROM rhnErrataTmp E, rhnErrataClonedTmp EC
   WHERE E.org_id = :org_id
     AND EC.id = E.id
     AND EC.original_id = :eid
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="owned_by_org_potential_for_channel">
  <query params="cid, org_id">
SELECT E.id, E.update_date
  FROM rhnErrata E
 WHERE E.org_id = :org_id
   AND not exists (SELECT 1
                     FROM rhnChannelErrata CE
                    WHERE CE.channel_id = :cid
                      AND CE.errata_id = E.id)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="potential_for_cloned_channel">
  <query params="">
--dummy
  </query>
</mode>

<query name="related_channels_owned_by_org" multiple="t" params="org_id">
  SELECT CE.errata_id AS ID, CE.channel_id, C.name AS channel_name
    FROM rhnChannelErrata CE,
         rhnChannel C,
         rhnChannelCloned CC
   WHERE CE.errata_id IN (%s)
     AND C.org_id = :org_id
     AND CC.id = C.id
     AND CC.original_id = CE.channel_id
ORDER BY CE.errata_id, C.name
</query>

<query name="errata_overview" params="user_id">
SELECT  E.id,
        E.advisory,
        E.advisory_name,
        E.advisory_type,
        E.synopsis AS ADVISORY_SYNOPSIS,
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED,
    (SELECT  COUNT(DISTINCT S.id)
       FROM  rhnServerNeededErrataCache SNEC, rhnServer S, rhnUserServerPerms USP
      WHERE  USP.user_id = :user_id
        AND  USP.server_id = S.ID
        AND  S.id = SNEC.server_id
        AND  EXISTS (SELECT 1 FROM rhnServerFeaturesView SFV WHERE SFV.server_id = SNEC.server_id AND SFV.label = 'ftr_errata_updates')
        AND  SNEC.errata_id = E.id) AS AFFECTED_SYSTEM_COUNT
  FROM  rhnErrata E
 WHERE  E.id IN (%s)
ORDER BY  E.update_date DESC
</query>

<query name="relevant_to_system_set_elab" params="user_id">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type,
        E.synopsis AS advisory_synopsis,
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS advisory_last_updated,
        COUNT(DISTINCT S.id) AS affected_system_count
  FROM  rhnErrata E, rhnSet ST, rhnServerNeededErrataCache SNEC, rhnServer S, rhnUserServerPerms USP
 WHERE  USP.user_id = :user_id
   AND  USP.server_id = S.ID
   AND  S.id = SNEC.server_id
   AND  E.id IN (%s)
   AND  SNEC.errata_id = E.id
   AND  USP.user_id = ST.user_id
   AND  ST.label = 'system_list'
   AND  S.id = ST.element
GROUP BY  E.id, E.advisory_name, E.advisory, E.advisory_type, E.synopsis, E.update_date
ORDER BY  E.update_date DESC
</query>

</datasource_modes>
