<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <class name="com.redhat.rhn.domain.errata.Errata"
        table="rhnErrata" >
        <id name="id" type="long" column="id">
            <meta attribute="scope-set">protected</meta>
            <generator class="org.hibernate.id.enhanced.SequenceStyleGenerator">
                <param name="sequence_name">rhn_errata_id_seq</param>
                <param name="increment_size">1</param>
            </generator>
        </id>
        <property name="advisory" column="advisory" type="string" length="32" />
        <property name="advisoryType" column="advisory_type" type="string"
            length="32" />

        <property name="advisoryStatus" column="advisory_status">
            <type name="com.redhat.rhn.domain.errata.AdvisoryStatusEnumType">
            </type>
        </property>

        <property name="product" column="product" type="string" length="64" />
        <property name="description" column="description" type="string"
            length="4000" />
        <property name="synopsis" column="synopsis" type="string" length="4000"
            />
        <property name="topic" column="topic" type="string" length="4000" />
        <property name="solution" column="solution" type="string" length="4000"
            />
        <property name="errataFrom" column="errata_from" type="string" length="127" />
        <property name="issueDate" column="issue_date" type="timestamp" />
        <property name="updateDate" column="update_date" type="timestamp" />
        <property name="notes" column="notes" type="string" length="4000" />
        <property name="rights" column="rights" type="string" length="100" />
        <property name="refersTo" column="refers_to" type="string"
            length="4000" />
        <property name="advisoryName" column="advisory_name" type="string"
            length="32" />
        <property name="advisoryRel" column="advisory_rel" type="long" />
        <property name="locallyModified" column="locally_modified"
            type="yes_no" />
        <property name="lastModified" column="last_modified"
            type="timestamp" insert="false" update="false"/>
        <property name="created" column="created" type="timestamp"
            insert="false" update="false"/>
        <property name="modified" column="modified" type="timestamp"
            insert="false" update="false"/>
        <many-to-one name="org" class="com.redhat.rhn.domain.org.Org"
            column="org_id"/>
        <many-to-one
                name="severity"
                class="com.redhat.rhn.domain.errata.Severity"
                column="severity_id"/>
        <set name="bugs" lazy="true" inverse="true" order-by="BUG_ID asc"
            cascade="all">
            <key column="errata_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.errata.Bug"/>
        </set>
        <set name="cves" lazy="true" cascade="save-update" table="rhnErrataCve">
                <key column="errata_id"/>
                <many-to-many column="cve_id" class="com.redhat.rhn.domain.errata.Cve" />
        </set>
        <set name="files" lazy="true" inverse="true" order-by="id asc"
            cascade="all">
            <key column="errata_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.errata.ErrataFile"/>
        </set>
        <set name="keywords" lazy="true" inverse="true" order-by="KEYWORD asc"
            cascade="all">
            <key column="errata_id"/>
            <one-to-many
                class="com.redhat.rhn.domain.errata.Keyword"/>
        </set>
        <set name="packages" lazy="true" table="rhnErrataPackage"
            order-by="PACKAGE_ID asc">
            <key column="errata_id"/>
            <many-to-many class="com.redhat.rhn.domain.rhnpackage.Package"
                column="package_id"/>
        </set>
        <set name="channels" lazy="true" table="rhnChannelErrata" cascade="all">
            <key column="errata_id"/>
            <many-to-many class="com.redhat.rhn.domain.channel.Channel"
                column="channel_id"/>
        </set>
        <joined-subclass
                name="com.redhat.rhn.domain.errata.ClonedErrata"
                table="rhnErrataCloned">
                <key column="id"/>
                <many-to-one name="original" column="original_id"
                class="com.redhat.rhn.domain.errata.Errata" />
        </joined-subclass>
    </class>
    <query name="Errata.findByAdvisoryType">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                where e.advisoryType = :type]]>
    </query>
    <query name="Errata.findById">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                where e.id = :id]]>
    </query>
    <query name="Errata.listByIds">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                where e.id in (:list)]]>
    </query>

    <query name="Errata.findByAdvisoryNameAndOrg">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                 where e.advisoryName = :advisory and ((:org is not null and e.org = :org) or (:org is null and e.org is null))]]>
    </query>
    
    <query name="Errata.findVendorAnUserErrataByAdvisoryNameAndOrg">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                 where e.advisoryName = :advisory and (e.org = :org or e.org is null)]]>
    </query>
    
    <query name="Errata.findErrataInBothChannels">
        <![CDATA[
        from com.redhat.rhn.domain.errata.Errata as e
        where :channel_from in elements(e.channels)
        and :channel_to in elements(e.channels)]]>
    </query>

    <query name="ClonedErrata.findSiblingsInChannel">
        <![CDATA[
        select e_from
        from com.redhat.rhn.domain.errata.ClonedErrata as e_from,
        com.redhat.rhn.domain.errata.ClonedErrata as e_to
        where :channel_from in elements(e_from.channels)
        and e_from.original = e_to.original
        and :channel_to in elements(e_to.channels)]]>
    </query>

    <query name="Errata.findClonesInChannel">
        <![CDATA[
        select e
        from com.redhat.rhn.domain.errata.Errata as e,
        com.redhat.rhn.domain.errata.ClonedErrata as c
        where :channel_from in elements(e.channels)
        and c.original = e
        and :channel_to in elements(c.channels)
    ]]>
    </query>

    <query name="ClonedErrata.findByOriginal">
        <![CDATA[from com.redhat.rhn.domain.errata.ClonedErrata as c
                 where c.original = :original
                 and c.org = :org]]>
    </query>
    <query name="Errata.findByAdvisory">
        <![CDATA[from com.redhat.rhn.domain.errata.Errata as e
                 where e.advisory = :advisory and (e.org = :org or e.org is null)]]>
    </query>

    <query name="Errata.listByChannel">
        <![CDATA[
        select e
         from com.redhat.rhn.domain.errata.Errata e
         where
          :channel member of e.channels
          and (e.org = :org or e.org is null)]]>
    </query>

    <query name="Errata.lookupByChannelBetweenDates">
        <![CDATA[select e
                   from com.redhat.rhn.domain.errata.Errata as e
                  where :channel in elements(e.channels) and
                        (e.org = :org or e.org is null) and
                        (e.lastModified > to_timestamp(:start_date, 'YYYY-MM-DD HH24:MI:SS')) and
                        (e.lastModified < to_timestamp(:end_date, 'YYYY-MM-DD HH24:MI:SS'))
                  order by e.issueDate
                ]]>
    </query>
    <sql-query name="Errata.retractedPackages">
        <![CDATA[
            select pid, sid
                from suseServerChannelsRetractedPackagesView
            where pid in (:pids) and sid in (:sids)
        ]]>
        <return-scalar column="pid" type="long" />
        <return-scalar column="sid" type="long" />
    </sql-query>

    <sql-query name="Errata.retractedPackagesByNevra">
        <![CDATA[
            SELECT pid, sid
            FROM suseServerChannelsRetractedPackagesView
                JOIN rhnpackage p on p.id = pid
                JOIN rhnpackagename pn on pn.id = p.name_id
                JOIN rhnpackageevr pevr on pevr.id = p.evr_id
                JOIN rhnpackagearch parch on parch.id = p.package_arch_id
            WHERE (pn.name || '-' || COALESCE(pevr.epoch || ':', '') || pevr.version || '-' || pevr.release || '.' || parch.label) in (:nevras)
                AND sid in (:sids)
        ]]>
        <return-scalar column="pid" type="long" />
        <return-scalar column="sid" type="long" />
    </sql-query>

    <sql-query name="Errata.searchById">
        <![CDATA[select distinct e.id, e.advisory, e.advisory_name as advisoryName,
                    e.advisory_type as advisoryType, e.synopsis as advisorySynopsis,
                    e.advisory_status as advisoryStatus,
                    e.update_date as updateDate, e.issue_date as issueDate,
                    case when rb.keyword is not null then 1 else 0 end as reboot_suggested,
                    case when rs.keyword is not null then 1 else 0 end as restart_suggested,
                    e.severity_id AS severityId
                from rhnErrata e
                    left join rhnerratakeyword rb on e.id = rb.errata_id and rb.keyword = 'reboot_suggested'
                    left join rhnerratakeyword rs on e.id = rs.errata_id and rs.keyword = 'restart_suggested',
                    rhnChannelErrata CE
                where e.id IN (:eids)
                  and CE.errata_id = e.id
                  and CE.channel_id IN(SELECT channel_id
                           FROM rhnAvailableChannels
                           WHERE org_id = :org_id)
                ]]>
        <return-scalar column="id" type="long" />
        <return-scalar column="advisory" type="string" />
        <return-scalar column="advisoryName" type="string" />
        <return-scalar column="advisoryType" type="string" />
        <return-scalar column="advisoryStatus" type="string" />
        <return-scalar column="advisorySynopsis" type="string" />
        <return-scalar column="updateDate" type="timestamp" />
        <return-scalar column="issueDate" type="timestamp" />
        <return-scalar column="reboot_suggested" type="boolean" />
        <return-scalar column="restart_suggested" type="boolean" />
        <return-scalar column="severityId" type="integer" />
    </sql-query>

    <sql-query name="Errata.searchByPackageIds">
        <![CDATA[select distinct e.id, e.advisory, e.advisory_name as advisoryName,
                        e.advisory_type as advisoryType, e.synopsis as advisorySynopsis,
                        e.advisory_status as advisoryStatus,
                        e.update_date as updateDate, e.issue_date as issueDate, pn.name,
                        case when rb.keyword is not null then 1 else 0 end as reboot_suggested,
                        case when rs.keyword is not null then 1 else 0 end as restart_suggested,
                        p.id as pid
                   from rhnErrata e
                        left join rhnerratakeyword rb on e.id = rb.errata_id and rb.keyword = 'reboot_suggested'
                        left join rhnerratakeyword rs on e.id = rs.errata_id and rs.keyword = 'restart_suggested',
                        rhnErrataPackage ep,
                        rhnPackage p,
                        rhnPackageName pn
                  where e.id = ep.errata_id
                    and p.id = ep.package_id
                    and p.name_id = pn.id
                    and ep.package_id IN (:pids)
                  order by e.id]]>
        <return-scalar column="id" type="long" />
        <return-scalar column="advisory" type="string" />
        <return-scalar column="advisoryName" type="string" />
        <return-scalar column="advisoryType" type="string" />
        <return-scalar column="advisoryStatus" type="string" />
        <return-scalar column="advisorySynopsis" type="string" />
        <return-scalar column="updateDate" type="timestamp" />
        <return-scalar column="issueDate" type="timestamp" />
        <return-scalar column="name" type="string" />
        <return-scalar column="reboot_suggested" type="boolean" />
        <return-scalar column="restart_suggested" type="boolean" />
        <return-scalar column="pid" type="long" />
    </sql-query>

    <sql-query name="Errata.searchByPackageIdsWithOrg">
        <![CDATA[select distinct e.id, e.advisory, e.advisory_name as advisoryName,
                        e.advisory_type as advisoryType, e.synopsis as advisorySynopsis,
                        e.advisory_status as advisoryStatus,
                        e.update_date as updateDate, e.issue_date as issueDate, pn.name,
                        case when rb.keyword is not null then 1 else 0 end as reboot_suggested,
                        case when rs.keyword is not null then 1 else 0 end as restart_suggested
                   from rhnErrata e
                        left join rhnerratakeyword rb on e.id = rb.errata_id and rb.keyword = 'reboot_suggested'
                        left join rhnerratakeyword rs on e.id = rs.errata_id and rs.keyword = 'restart_suggested',
                        rhnErrataPackage ep,
                        rhnPackage p,
                        rhnPackageName pn,
                        rhnAvailableChannels ac,
                        rhnChannelErrata ce
                  where e.id = ep.errata_id
                    and p.id = ep.package_id
                    and p.name_id = pn.id
                    and ep.package_id IN (:pids)
                    and e.id = ce.errata_id
                    and ce.channel_id = ac.channel_id
                    and ac.org_id = :org_id
                  order by e.id]]>
        <return-scalar column="id" type="long" />
        <return-scalar column="advisory" type="string" />
        <return-scalar column="advisoryName" type="string" />
        <return-scalar column="advisoryType" type="string" />
        <return-scalar column="advisoryStatus" type="string" />
        <return-scalar column="advisorySynopsis" type="string" />
        <return-scalar column="updateDate" type="timestamp" />
        <return-scalar column="issueDate" type="timestamp" />
        <return-scalar column="name" type="string" />
        <return-scalar column="reboot_suggested" type="boolean" />
        <return-scalar column="restart_suggested" type="boolean" />
    </sql-query>

    <sql-query name="Errata.listAvailableToOrgByIds">
        <![CDATA[SELECT E.*, EC.original_id, CASE WHEN EC.original_id IS NULL THEN 0 ELSE 1 END as clazz_
                 FROM rhnErrata as E
                 LEFT JOIN rhnErrataCloned EC ON E.id = EC.id
                 WHERE E.id in (:eids)
                     AND (E.org_id = :orgId
                          OR EXISTS (SELECT 1
                                     FROM WEB_CUSTOMER ORG
                                     INNER JOIN rhnTrustedOrgs TORG ON ORG.id = TORG.org_id
                                     WHERE ORG.id = :orgId
                                         AND E.org_id = TORG.org_trust_id)
                          OR EXISTS (SELECT 1
                                     FROM rhnAvailableChannels AC,
                                     rhnChannelErrata CE
                                     WHERE CE.errata_id = E.id
                                         AND CE.channel_id = AC.channel_id
                                         AND AC.org_id = :orgId))
                          ]]>
        <return alias="E" class="com.redhat.rhn.domain.errata.Errata" />
    </sql-query>
</hibernate-mapping>
