#!/usr/bin/python3

from argparse import ArgumentParser
from configparser import ConfigParser
from itertools import chain
from os.path import dirname, expanduser, realpath
from re import match
from sys import exit
import urllib.parse
import urllib.request
import xml.etree.ElementTree as ET

PRJ = 'systemsmanagement:Uyuni:Master'
PACKAGES = ['patterns-uyuni', 'uyuni-docs_en',
            'release-notes-uyuni', 'release-notes-uyuni-proxy']
PRODUCTS = ['Uyuni-Server', 'Uyuni-Proxy']
CONFIG = '%s/../web/conf/rhn_web.conf' % dirname(realpath(__file__))


def get_webui_version(conf):
    config = ConfigParser()
    with open(conf) as f:
        # This is basically a hack, as our .conf file does not have sections
        config.read_file(chain(['[section]'], f), source=conf)
        return config.get('section', 'web.version.uyuni')


def obs_get_file(args, file_path):
    url = "{0}/source/{1}".format(args.apiurl, file_path)
    user = args.user
    password = args.password
    password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, url, user, password)
    auth_handler = urllib.request.HTTPBasicAuthHandler(password_mgr)
    opener = urllib.request.build_opener(auth_handler)
    urllib.request.install_opener(opener)
    req = urllib.request.Request(url=url, method='GET')
    resource = urllib.request.urlopen(req)
    charset = resource.headers.get_content_charset()
    if charset is None:
        charset = 'utf-8'
    return resource.read().decode(charset)


def obs_get_package_ver(args, project, package):
    file_path = "{0}/{1}/{1}.spec".format(project, package)
    for line in obs_get_file(args, file_path).split('\n'):
        version = match('^Version:\s*(\S+)$', line)
        if version:
            return version.group(1)


def obs_get_product_ver(args, project, product):
    file_path = "{0}/000product/{1}.product".format(project, product)
    root = ET.fromstring(obs_get_file(args, file_path))
    return root.find("./products/product/[name='%s']/version" % product).text


def parse_arguments():
    """ Parse arguments from command line """
    parser = ArgumentParser(
        description="Check if Uyuni versions are aligned at all packages before a release")
    parser.add_argument("-u", "--user", action="store", dest="user",
                        help="OBS Username or read from ~/.oscrc")
    parser.add_argument("-p", "--password", action="store", dest="password",
                        help="OBS Password or read from ~/.oscrc")
    parser.add_argument("-a", "--api-url", action="store", dest="apiurl",
                        default="https://api.opensuse.org",
                        help="OBS API URL (Default: https://api.opensuse.org")
    args = parser.parse_args()
    if not args.user or not args.password:
        try:
            creds_path = "%s/.oscrc" % expanduser('~')
            creds = ConfigParser()
            creds.read(creds_path)
            args.user = creds.get(args.apiurl, 'user')
            args.password = creds.get(args.apiurl, 'pass')
        except Exception:
            raise RuntimeError(
                'Could not find credentials for {} at {}'.format(args.apiurl, creds_path))
    return args


def print_info(msg):
    print("[\033[01m\033[34mINFO \033[0m] %s" % msg)


def print_ok(msg):
    print("[\033[01m\033[32mOK   \033[0m] %s" % msg)


def print_error(msg):
    print("[\033[01m\033[31mERROR\033[0m] %s" % msg)


args = parse_arguments()
webui_version = get_webui_version(CONFIG)
print_info("WebUI version from the config file is '%s'" % webui_version)

error = False

for package in PACKAGES:
    package_ver = obs_get_package_ver(args, PRJ, package)
    if package_ver == webui_version:
        print_ok("{} version ({}) is OK".format(package, package_ver))
    else:
        print_error("{} version ({}) is WRONG".format(package, package_ver))
        error = True

for product in PRODUCTS:
    product_ver = obs_get_product_ver(args, PRJ, product)
    if product_ver == webui_version:
        print_ok("Product definition {} version ({}) is OK".format(product, product_ver))
    else:
        print_error("Product definition {} version ({}) is WRONG".format(product, product_ver))
        error = True

exit(error)
