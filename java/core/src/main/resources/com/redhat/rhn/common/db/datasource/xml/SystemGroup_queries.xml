<datasource_modes>

<query name="visible_to_user_overview_fast" params="org_id, user_id">
                SELECT
         G.ID AS ID, G.NAME AS NAME,

                  (SELECT COUNT(*) FROM rhnUserManagedServerGroups UMSG WHERE UMSG.server_group_id = G.id)
         AS GROUP_ADMINS,

                (SELECT COUNT(*) FROM rhnServerGroupMembers SGM WHERE SGM.server_group_id = G.id
                 AND EXISTS ( SELECT 1
                              FROM rhnServerFeaturesView SFV
                              WHERE SFV.server_id = SGM.server_id
                                    AND SFV.label = 'ftr_system_grouping')) AS  SERVER_COUNT
 FROM   rhnServerGroup G, rhnUserManagedServerGroups UMSG
 WHERE   G.ORG_ID = :org_id
   AND   UMSG.user_id = :user_id
   AND   G.id IN (%s)
   AND   G.id = UMSG.server_group_id
  </query>

<query name="visible_to_user_ids" params="user_id">
select * from (
SELECT DISTINCT SG.id AS ID, SG.name AS NAME
  FROM rhnServerGroup SG, rhnUserManagedServerGroups UMSG
 WHERE UMSG.user_id = :user_id
   AND UMSG.server_group_id = SG.id
   AND SG.group_type IS NULL
) x
ORDER BY UPPER(NAME)
</query>

<mode name="visible_to_user_and_counts" class="com.redhat.rhn.frontend.dto.SystemGroupOverview">
  <query params="user_id">
    select * from (
    SELECT SG.id AS ID, SG.name AS NAME,
       (SELECT COUNT(*)
          FROM rhnServerGroupMembers SGM WHERE SGM.server_group_id = SG.id
           AND EXISTS (SELECT 1
                         FROM rhnServerFeaturesView SFV
                        WHERE SFV.server_id = SGM.server_id
                          AND SFV.label = 'ftr_system_grouping')) AS SERVER_COUNT
      FROM rhnServerGroup SG, rhnUserManagedServerGroups UMSG
     WHERE UMSG.user_id = :user_id
       AND UMSG.server_group_id = SG.id
       AND SG.group_type IS NULL
    ) x
    ORDER BY UPPER(NAME)
  </query>
  <elaborator name="most_severe_errata" />
</mode>
<query name="most_severe_errata" params="">
    WITH groupAdvisoryTypes AS (
        SELECT sgm.server_group_id, e.advisory_type
          FROM rhnServerNeededCache snpc
              INNER JOIN rhnServerGroupMembers sgm ON sgm.server_id = snpc.server_id
              INNER JOIN rhnServerFeaturesView sfv ON sgm.server_id = sfv.server_id
              LEFT JOIN rhnErrata e ON e.id = snpc.errata_id
          WHERE sfv.label = 'ftr_system_grouping'
          GROUP BY sgm.server_group_id, e.advisory_type
    )
    SELECT rhnServerGroup.id,
        CASE (
            SELECT EXISTS (SELECT 1
                FROM groupAdvisoryTypes gat
                    WHERE gat.server_group_id = rhnServerGroup.id
                    AND gat.advisory_type = 'Security Advisory')
        )
        WHEN TRUE THEN 'Security Advisory'
        ELSE CASE (
            SELECT EXISTS (SELECT 1
                FROM groupAdvisoryTypes gat
                    WHERE gat.server_group_id = rhnServerGroup.id
                    AND gat.advisory_type = 'Bug Fix Advisory')
        )
        WHEN TRUE THEN 'Bug Fix Advisory'
        ELSE CASE (
            SELECT EXISTS (SELECT 1
                FROM groupAdvisoryTypes gat
                    WHERE gat.server_group_id = rhnServerGroup.id
                    AND gat.advisory_type = 'Product Enhancement Advisory')
        )
        WHEN TRUE THEN 'Product Enhancement Advisory'
        ELSE CASE (
            SELECT EXISTS (SELECT 1
                FROM groupAdvisoryTypes gat
                    WHERE gat.server_group_id = rhnServerGroup.id
                    AND gat.advisory_type IS NULL)
        )
        WHEN TRUE THEN 'Outdated Packages'
        ELSE NULL
        END END END END AS most_severe_errata
    FROM rhnServerGroup
    WHERE rhnServerGroup.id IN (%s)
</query>
<mode name="is_visible">
        <query  params="sgid, user_id">
                SELECT 1
                  FROM rhnServerGroup SG
                                inner join rhnUserManagedServerGroups UMSG on UMSG.server_group_id = SG.id
                 WHERE UMSG.user_id = :user_id
                   AND UMSG.SERVER_GROUP_ID = :sgid
                   AND SG.group_type IS NULL
        </query>
</mode>


<mode name="visible_to_user" class="com.redhat.rhn.frontend.dto.SystemGroupOverview">
  <query name="visible_to_user_ids" />
  <elaborator name="visible_to_user_overview_fast" />
  <elaborator name="most_severe_errata" />
</mode>

<mode name="managed_system_groups_by_system">
  <query>
    SELECT S.id AS system_id, SG.id AS group_id, SG.name AS group_name
    FROM rhnServer S
      JOIN rhnServerGroupMembers SGM ON (SGM.server_id = S.id)
      JOIN rhnServerGroup SG ON (SG.id = SGM.server_group_id)
    WHERE S.id IN (%s)
      AND SG.group_type IS NULL
  </query>
</mode>

<mode name="visible_to_system">
  <query params="sid, org_id, user_id">
  SELECT MAX(CASE VSGM.server_id WHEN :sid THEN 1 ELSE 0 END) is_system_member,
         VSGM.GROUP_ID id,
         VSGM.GROUP_NAME,
         VSGM.GROUP_TYPE,
         VSGM.CURRENT_MEMBERS,
         (CASE USGP.server_group_id WHEN VSGM.group_id THEN 1 ELSE 0 END) AS USER_PERMITTED_ACCESS
    FROM rhnVisServerGroupMembership VSGM
    LEFT JOIN rhnUserServerGroupPerms USGP
      ON VSGM.group_id = USGP.server_group_id
     AND :user_id = USGP.user_id
   WHERE VSGM.ORG_ID = :org_id
GROUP BY VSGM.group_id, VSGM.group_name, VSGM.group_type, VSGM.current_members, USGP.server_group_id
ORDER BY UPPER(VSGM.group_name), VSGM.group_id
  </query>
</mode>

<mode name="user_permissions">
  <query params="user_id, org_id">
SELECT SG.id, SG.name AS NAME, SG.current_Members as server_count,
       coalesce((SELECT MAX(1)
              FROM rhnUserServerGroupPerms USGP
             WHERE USGP.server_group_id = SG.id
               AND USGP.user_id = :user_id), 0) AS selected
  FROM rhnServerGroup SG
 WHERE SG.org_id = :org_id
   AND SG.group_type IS NULL
ORDER BY UPPER(SG.name), SG.id
  </query>
</mode>

<mode name="group_errata_counts">
  <query params="sgid">
     SELECT count(DISTINCT CASE
                WHEN snc.errata_id IS NULL THEN snc.package_id
                ELSE snc.errata_id END), --Count multiple packages in an erratum as one
            CASE e.advisory_type
                WHEN 'Security Advisory' THEN 'se'
                WHEN 'Bug Fix Advisory' THEN 'be'
                WHEN 'Product Enhancement Advisory' THEN 'ee'
                ELSE 'op' --Outdated packages
            END AS advisory_type
      FROM rhnServerNeededCache snc
        INNER JOIN rhnServerGroupMembers sgm ON sgm.server_id = snc.server_id
        INNER JOIN rhnServerFeaturesView sfv ON sgm.server_id = sfv.server_id
        LEFT JOIN rhnErrata e ON e.id = snc.errata_id
      WHERE sgm.server_group_id = :sgid AND sfv.label = 'ftr_system_grouping'
      GROUP BY e.advisory_type
  </query>
</mode>

<mode name="snapshot_group_diff">
  <query params="ss_id, sid">
select snapshot_group.id as snapshot_group_id,
       snapshot_group.name as snapshot_group_name,
       server_group.id as current_group_id,
       server_group.name as current_group_name
  from (
        select sg.id as id,
               sg.name as name
          from rhnSnapshotServerGroup ssg
          join rhnServerGroup sg
            on sg.id = ssg.server_group_id
          join rhnSnapshot SN
            on sn.id = ssg.snapshot_id
         where sn.id = :ss_id
           and sn.server_id = :sid
           and sg.group_type is null
        ) snapshot_group
  full outer join (
        select vsgm.group_id as id,
               vsgm.group_name as name
          from rhnVisServerGroupMembership vsgm
         where vsgm.server_id = :sid
        ) server_group
    on snapshot_group.id = server_group.id
 where snapshot_group.id is null
    or server_group.id   is null
  </query>
</mode>

<mode name="groups_a_system_is_in_unsafe">
  <query params="sid">
select sgm.group_id as id,
       sg.name as group_name
  from rhnServerGroup sg,
       rhnServerGroupMembership sgm
 where sgm.server_id = :sid
   and sgm.group_id = sg.id
 order by upper(sg.name)
  </query>
</mode>
</datasource_modes>
