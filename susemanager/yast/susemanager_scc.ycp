{
    textdomain "susemanager";

    import "Directory";
    import "FileUtils";
    import "GetInstArgs";
    import "Label";
    import "Popup";
    import "Stage";
    import "String";
    import "Wizard";

    map args = GetInstArgs::argmap ();
    any ret = `auto;

    map display_info    = UI::GetDisplayInfo ();
    boolean text_mode   = display_info["TextMode"]:false;

    map<string,string> settings = $[
        "NCC_USER"      : "",
        "NCC_PASS"      : "",
        "NCC_EMAIL"     : "",
        "ISS_PARENT"    : ""
    ];

    any log_view_ID = nil;

    /**
     * Function for logging in the LogView widget.
     * @param string text to be logged
     */
    void LogThis (string text) {
        if (UI::WidgetExists (`id (log_view_ID)))
            UI::ChangeWidget (`id (log_view_ID), `LastLine, text + "\n");
    }

    /**
     * Gets the current credentials and use them to download a list of available
     * repositories from scc.suse.com. Progress is written to the LogView
     * identified by ID got as a function parameter.
     *
     * @param any log_view widget ID
     */
    boolean CredentialsTest(any log_view) {
        log_view_ID = log_view;

        string user = settings["NCC_USER"]:"";
        string pass = settings["NCC_PASS"]:"";
        string serv = settings["ISS_PARENT"]:"";
        if (serv == "")
            serv = "scc.suse.com";
        string url  = sformat("https://%1", serv);

        // File for writing the credentials
        string test_file = Directory::tmpdir + "/curl_input_file";

        // At first, credentials need to be written to a temporary file
        // because of security reasons. If used on a commandline, `ps`
        // could reveal them.

        // TRANSLATORS: LogView line
        LogThis (_("Creating a temporary file..."));

        integer cmd_exit = (integer) SCR::Execute (.target.bash, sformat ("echo \"# URL for downloading repos/patches
url=\\\"\\\"
# user:pass to be used for downloading
user=\\\"\\\"\" > '%1'", String::Quote (test_file)));

        if (cmd_exit != 0) {
            // TRANSLATORS: LogView line
            LogThis (sformat (_("Cannot create a temporary file %1."), test_file));

            return false;
        }

        // TRANSLATORS: LogView line
        LogThis (_("Writing credentials to a temporary file..."));
        if (! (boolean) SCR::RegisterAgent (.curlTempFile, `ag_ini (`SysConfigFile (test_file)))) {
            y2error ("Cannot register agent");
            // TRANSLATORS: LogView line
            LogThis (sformat(_("Cannot write to a temporary file %1."), test_file));

            return false;
        }

        SCR::Read (add(.curlTempFile, "url"));
        SCR::Read (add(.curlTempFile, "user"));

        // NUUrl
        if (! (boolean) SCR::Write (add (.curlTempFile, "url"), sformat ("%1/connect/organizations/repositories", url)))
            y2error ("Writing url failed");

        // NUUser and NUPass
        // user:pass, all ":" in user or pass need to be escaped
        string userpass = sformat (
            "%1:%2",
            mergestring (splitstring (user, ":"), "\\:"),
            mergestring (splitstring (pass, ":"), "\\:")
        );

        if (! (boolean) SCR::Write (add (.curlTempFile, "user"), userpass))
            y2error ("Writing user failed");

        if (! (boolean) SCR::Write (.curlTempFile, nil)) {
            y2error ("Cannot write credentials");
            // TRANSLATORS: LogView line
            LogThis (sformat(_("Cannot write to a temporary file %1."), test_file));

            return false;
        }

        if (! (boolean) SCR::UnregisterAgent (.curlTempFile)) {
            y2error ("Cannot unregister agent");
        }
        string insecure = "";
        if (serv != "scc.suse.com")
            insecure = "--insecure";

        // TRANSLATORS: LogView line
        LogThis (sformat(_("Downloading list of available repositories from %1..."), url));
        map cmd = (map) SCR::Execute (
            .target.bash_output,
            sformat ("/usr/bin/curl -I -w '%%{http_code}' %1 --silent --config '%2' -o /dev/null",
                     String::Quote (insecure), String::Quote (test_file))
        );

        if (cmd["stdout"]:"" == "200") {
            LogThis (_("Downloaded list of repositories successfully."));

            return true;
        } else {
            LogThis (_("Cannot download list of repositories."));
            LogThis (sformat (_("Reason: Response code %1"), cmd["stdout"]:""));

            return false;
        }

    }

    // dialog for testing SCC connection
    boolean TestCredentials () {

        UI::OpenDialog (`MinSize (52, 12, `VBox (
            // TRANSLATORS: LogView label
            `LogView (`id ("test_log"), _("&Test Details"), 5, 100),
            `VSpacing (1),
            `PushButton (`id (`ok), `opt (`default, `key_F10), Label::OKButton())
        )));

        // complex.ycp
        boolean ret = CredentialsTest ("test_log");


        if (ret == true) {
            // TRANSLATORS: LogView line
            UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: success") + "\n");
        } else {
            // TRANSLATORS: LogView line
            UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: failure") + "\n");
        }

        UI::UserInput();
        UI::CloseDialog();

        return ret;
    }

    map<string,string> labels   = $[
        // text entry label
        "NCC_USER"      : _("SCC Mirror Credentials Username"),
        // text entry label
        "NCC_PASS"      : _("SCC Mirror Credentials Password"),
        // text entry label
        "NCC_EMAIL"     : _("SCC E-mail Address"),
        // text entry label
        "ISS_PARENT"    : _("Parent Server Name")
    ];

    string env_file     = Directory::tmpdir + "/env_cc";
    if (FileUtils::Exists (env_file))
    {
        SCR::Execute (.target.remove, env_file);
    }
    SCR::Execute (.target.bash, sformat ("/usr/bin/touch %1; /bin/chmod 0600 %1;", env_file));

    // read existing values, if present
    foreach (string key, string value, settings, {
        string val      = getenv (key);
        if (val != nil && val != "")
        {
            y2internal ("value for %1 present: %2", key, val);
            settings[key]       = val;
        }
    });

    term contents = `HBox (`HSpacing (1), `VBox (
        `RadioButtonGroup (`id(`rb), `Frame ("", `HBox (`HSpacing (0.2), `VBox (
            `VSpacing (0.4),
            `Left (`RadioButton(`id(`scc), `opt (`notify),
                // radio button label
                _("Connect to SCC"), settings["ISS_PARENT"]:"" == "")),
            text_mode ? `Empty () : `VSpacing (),
            `Left ( `RadioButton(`id(`iss), `opt (`notify),
                // radio button label
                _("Connect to SUSE Manager for inter-server sync"), settings["ISS_PARENT"]:"" != "")),
            `HBox (`HSpacing (4),
                   // text entry label
                   `InputField (`id ("ISS_PARENT"), `opt (`hstretch), _("Parent &Server Name"), settings["ISS_PARENT"]:""))
            )))),
        // text entry label
        `InputField (`id ("NCC_USER"), `opt (`hstretch), _("SCC Mirror Credentials &Username"),
            settings["NCC_USER"]:""),
        // text entry label
        `Password (`id ("NCC_PASS"), `opt (`hstretch), _("SCC Mirror Credentials &Password"),
            settings["NCC_PASS"]:""),
        // text entry label
        `InputField (`id ("NCC_EMAIL"), `opt (`hstretch), _("SCC &E-mail Address"),
            settings["NCC_EMAIL"]:""),
        `VSpacing (),
        `PushButton (`id ("test_NU_credentials"), `opt(`key_F6), _("&Test...")),
        `VSpacing (0.5)
    ), `HSpacing (1));

    // help text
    string help_text    = _("<p>Here, enter mirror credentials from the SUSE Customer Center.</p>");

    // dialog caption
    Wizard::SetContents (_("SCC Settings"), contents, help_text, args["enable_back"]:true, args["enable_next"]:true);
    UI::SetFocus (`scc);
    UI::ChangeWidget (`id ("ISS_PARENT"), `Enabled, false);

    while (true)
    {
        ret     = UI::UserInput ();
        if (ret == `scc || ret == `iss)
        {
            settings["ISS_PARENT"] = "";
            UI::ChangeWidget (`id ("ISS_PARENT"), `Enabled, ret == `iss);
        }
        if (ret == `back)
        {
            break;
        }
        if (ret == `abort && Popup::ConfirmAbort(`incomplete))
        {
            break;
        }
        if (ret == "test_NU_credentials" || ret == `next)
        {
            boolean missing     = false;
            foreach (string key, string value, settings, {
                string val      = (string) UI::QueryWidget (`id (key), `Value);
                if ( key == "ISS_PARENT")
                {
                    boolean sccconnect = UI::QueryWidget (`id (`rb), `CurrentButton) == `scc;
                    if (sccconnect)
                    {
                        settings[key]       = "";
                        UI::ChangeWidget (`id ("ISS_PARENT"), `Value, "");
                        continue;
                    }
                }
                if (val == "")
                {
                    string label        = labels[key]:key;
                    // error label
                    Popup::Error (sformat (_("The value of '%1' is empty."), label));
                    UI::SetFocus (`id (key));
                    missing     = true;
                    break;
                }
                else
                {
                    settings[key]       = val;
                }
            });
            if (missing)
            {
                ret     = `not_next;
                continue;
            }
        }
        if (ret == "test_NU_credentials")
        {
            TestCredentials();
        }
        if (ret == `next)
        {
            string email        = (string) UI::QueryWidget (`id ("NCC_EMAIL"), `Value);
            if (!issubstring (email, "@"))
            {
                // error popup
                Popup::Error (_("The E-mail Address is not valid."));
                UI::SetFocus (`id ("NCC_EMAIL"));
                continue;
            }
            foreach (string key, string value, settings, {
                string val      = (string) UI::QueryWidget (`id (key), `Value);
                setenv (key, val, true);
                SCR::Execute (.target.bash, sformat ("echo \"export %1='%2'\" >> %3", key, val, env_file));
            });

            break;
        }
    }

    return ret;
}
